// Code generated by go-swagger; DO NOT EDIT.

package domain_bulk_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain bulk tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain bulk tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DomainAuthinfo2Creates(params *DomainAuthinfo2CreatesParams) (*DomainAuthinfo2CreatesOK, error)

	DomainAuthinfoCreates(params *DomainAuthinfoCreatesParams) (*DomainAuthinfoCreatesOK, error)

	DomainAuthinfoDeletes(params *DomainAuthinfoDeletesParams) (*DomainAuthinfoDeletesOK, error)

	DomainBuys(params *DomainBuysParams) (*DomainBuysOK, error)

	DomainCancelationCreates(params *DomainCancelationCreatesParams) (*DomainCancelationCreatesOK, error)

	DomainCancelationDeletes(params *DomainCancelationDeletesParams) (*DomainCancelationDeletesOK, error)

	DomainCancelationPatches(params *DomainCancelationPatchesParams) (*DomainCancelationPatchesOK, error)

	DomainCreates(params *DomainCreatesParams) (*DomainCreatesOK, error)

	DomainPatches(params *DomainPatchesParams) (*DomainPatchesOK, error)

	DomainRenews(params *DomainRenewsParams) (*DomainRenewsOK, error)

	DomainRestores(params *DomainRestoresParams) (*DomainRestoresOK, error)

	DomainTransfers(params *DomainTransfersParams) (*DomainTransfersOK, error)

	DomainUpdateComments(params *DomainUpdateCommentsParams) (*DomainUpdateCommentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DomainAuthinfo2Creates auths info2 create bulk

  Creating several AuthInfos 2 with one request.
*/
func (a *Client) DomainAuthinfo2Creates(params *DomainAuthinfo2CreatesParams) (*DomainAuthinfo2CreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo2CreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo2Creates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_authinfo2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo2CreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo2CreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo2Creates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainAuthinfoCreates authinfo1s create bulk

  Creating several AuthInfos 1 with one request.
*/
func (a *Client) DomainAuthinfoCreates(params *DomainAuthinfoCreatesParams) (*DomainAuthinfoCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfoCreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfoCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfoCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfoCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfoCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainAuthinfoDeletes authinfo1s delete bulk

  Deleting several AuthInfos 1 with one request.
*/
func (a *Client) DomainAuthinfoDeletes(params *DomainAuthinfoDeletesParams) (*DomainAuthinfoDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfoDeletesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfoDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/domain/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfoDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfoDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfoDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainBuys domains buy bulk

  Buying several domains with one request.
*/
func (a *Client) DomainBuys(params *DomainBuysParams) (*DomainBuysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainBuysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainBuys",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainBuysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainBuysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainBuys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationCreates domains cancelation create bulk

  Creating several domain cancelations with one request.
*/
func (a *Client) DomainCancelationCreates(params *DomainCancelationCreatesParams) (*DomainCancelationCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationCreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationDeletes domains cancelation delete bulk

  Deleting several domain cancelations with one request.
*/
func (a *Client) DomainCancelationDeletes(params *DomainCancelationDeletesParams) (*DomainCancelationDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationDeletesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationPatches domains cancelation update bulk

  Updating several domain cancelations with one request.
*/
func (a *Client) DomainCancelationPatches(params *DomainCancelationPatchesParams) (*DomainCancelationPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationPatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCreates domains create bulk

  Creating several domains with one request.
*/
func (a *Client) DomainCreates(params *DomainCreatesParams) (*DomainCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPatches domains update bulk

  Updating several domains with one request.
*/
func (a *Client) DomainPatches(params *DomainPatchesParams) (*DomainPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainRenews domains renew bulk

  Renewing several domains with one request.
*/
func (a *Client) DomainRenews(params *DomainRenewsParams) (*DomainRenewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRenewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRenews",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRenewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRenewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRenews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainRestores domains restore bulk

  Restoring several domains with one request.
*/
func (a *Client) DomainRestores(params *DomainRestoresParams) (*DomainRestoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRestores",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestores: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainTransfers domains transfer bulk

  Transferring several domains with one request.
*/
func (a *Client) DomainTransfers(params *DomainTransfersParams) (*DomainTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTransfersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainTransfers",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainTransfersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainUpdateComments domains comments update bulk

  Updating several domain comments with one request.
*/
func (a *Client) DomainUpdateComments(params *DomainUpdateCommentsParams) (*DomainUpdateCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainUpdateComments",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainUpdateCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainUpdateComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
