// Code generated by go-swagger; DO NOT EDIT.

package zone_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zone tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zone tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DomainAddDomainSafe(params *DomainAddDomainSafeParams) (*DomainAddDomainSafeOK, error)

	DomainDeleteDomainSafe(params *DomainDeleteDomainSafeParams) (*DomainDeleteDomainSafeOK, error)

	ZoneAxfr(params *ZoneAxfrParams) (*ZoneAxfrOK, error)

	ZoneCopy(params *ZoneCopyParams) (*ZoneCopyOK, error)

	ZoneCreate(params *ZoneCreateParams) (*ZoneCreateOK, error)

	ZoneDelete(params *ZoneDeleteParams) (*ZoneDeleteOK, error)

	ZoneHistoryInfo(params *ZoneHistoryInfoParams) (*ZoneHistoryInfoOK, error)

	ZoneHistoryList(params *ZoneHistoryListParams) (*ZoneHistoryListOK, error)

	ZoneImport(params *ZoneImportParams) (*ZoneImportOK, error)

	ZoneInfo(params *ZoneInfoParams) (*ZoneInfoOK, error)

	ZoneList(params *ZoneListParams) (*ZoneListOK, error)

	ZoneMigrate(params *ZoneMigrateParams) (*ZoneMigrateOK, error)

	ZonePatch(params *ZonePatchParams) (*ZonePatchOK, error)

	ZoneStream(params *ZoneStreamParams) (*ZoneStreamOK, error)

	ZoneUpdate(params *ZoneUpdateParams) (*ZoneUpdateOK, error)

	ZoneUpdateComment(params *ZoneUpdateCommentParams) (*ZoneUpdateCommentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DomainAddDomainSafe saves object create

  Adding the zone to the domain safe
*/
func (a *Client) DomainAddDomainSafe(params *DomainAddDomainSafeParams) (*DomainAddDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAddDomainSafeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAddDomainSafe",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{systemNameServer}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAddDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAddDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAddDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainDeleteDomainSafe saves object delete

  Deleting the zone from the domain safe
*/
func (a *Client) DomainDeleteDomainSafe(params *DomainDeleteDomainSafeParams) (*DomainDeleteDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainDeleteDomainSafeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainDeleteDomainSafe",
		Method:             "DELETE",
		PathPattern:        "/zone/{name}/{systemNameServer}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainDeleteDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainDeleteDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainDeleteDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneAxfr zones axfr

  Inquiring the AXFR data for the specified zone.
*/
func (a *Client) ZoneAxfr(params *ZoneAxfrParams) (*ZoneAxfrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneAxfrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneAxfr",
		Method:             "GET",
		PathPattern:        "/zone/{name}/{systemNameServer}/_axfr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneAxfrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneAxfrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneAxfr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneCopy zones update

  Copying an existing zone.
*/
func (a *Client) ZoneCopy(params *ZoneCopyParams) (*ZoneCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneCopy",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{systemNameServer}/_copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneCreate zones create

  Creating a zone.
*/
func (a *Client) ZoneCreate(params *ZoneCreateParams) (*ZoneCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneCreate",
		Method:             "POST",
		PathPattern:        "/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneDelete zones delete

  Deleting an existing zone.
*/
func (a *Client) ZoneDelete(params *ZoneDeleteParams) (*ZoneDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneDelete",
		Method:             "DELETE",
		PathPattern:        "/zone/{name}/{systemNameServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneHistoryInfo zones history info

  Inquiring the data for the specified log.
*/
func (a *Client) ZoneHistoryInfo(params *ZoneHistoryInfoParams) (*ZoneHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneHistoryInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneHistoryInfo",
		Method:             "GET",
		PathPattern:        "/zone/history/{logId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneHistoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneHistoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneHistoryList zones history list

  Inquiring a list of zones history entries with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: dnssec, created, mainip, secondary1, secondary2, secondary3, secondary4, secondary5, secondary6, secondary7, virtualNameServer, domainsafe, name, comment, updated, action, primary, changed.
*/
func (a *Client) ZoneHistoryList(params *ZoneHistoryListParams) (*ZoneHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneHistoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneHistoryList",
		Method:             "POST",
		PathPattern:        "/zone/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneHistoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneHistoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneImport zones import

  Importing the specified zone.
*/
func (a *Client) ZoneImport(params *ZoneImportParams) (*ZoneImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneImport",
		Method:             "POST",
		PathPattern:        "/zone/{name}/{systemNameServer}/_import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneInfo zones info

  Inquiring the data for the specified zone.
*/
func (a *Client) ZoneInfo(params *ZoneInfoParams) (*ZoneInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneInfo",
		Method:             "GET",
		PathPattern:        "/zone/{name}/{systemNameServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneList zones list

  Inquiring a list of zones with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: dnssec, created, mainip, secondary1, secondary2, secondary3, secondary4, secondary5, secondary6, secondary7, virtualNameServer, domainsafe, name, comment, updated, action, primary, changed.
*/
func (a *Client) ZoneList(params *ZoneListParams) (*ZoneListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneList",
		Method:             "POST",
		PathPattern:        "/zone/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneMigrate zones update

  Copying an existing zone and updating the domain with the new name servers.
*/
func (a *Client) ZoneMigrate(params *ZoneMigrateParams) (*ZoneMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneMigrateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneMigrate",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{systemNameServer}/_migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneMigrateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZonePatch zones update

  Updating an existing zone.
*/
func (a *Client) ZonePatch(params *ZonePatchParams) (*ZonePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZonePatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zonePatch",
		Method:             "PATCH",
		PathPattern:        "/zone/{name}/{systemNameServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZonePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zonePatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneStream zones stream update

  Adding or removing records for any zone with the given name.
*/
func (a *Client) ZoneStream(params *ZoneStreamParams) (*ZoneStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneStream",
		Method:             "POST",
		PathPattern:        "/zone/{name}/_stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneUpdate zones update

  Updating an existing zone.
*/
func (a *Client) ZoneUpdate(params *ZoneUpdateParams) (*ZoneUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneUpdate",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{systemNameServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneUpdateComment zones comment update

  Updating an existing zone.
*/
func (a *Client) ZoneUpdateComment(params *ZoneUpdateCommentParams) (*ZoneUpdateCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneUpdateCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneUpdateComment",
		Method:             "PUT",
		PathPattern:        "/zone/{name}/{systemNameServer}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneUpdateCommentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneUpdateCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneUpdateComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
