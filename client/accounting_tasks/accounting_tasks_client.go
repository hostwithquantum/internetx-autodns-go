// Code generated by go-swagger; DO NOT EDIT.

package accounting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accounting tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounting tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccountingDocumentCalculate(params *AccountingDocumentCalculateParams) (*AccountingDocumentCalculateOK, error)

	AccountingDocumentCreate(params *AccountingDocumentCreateParams) (*AccountingDocumentCreateOK, error)

	AccountingDocumentInfo(params *AccountingDocumentInfoParams) (*AccountingDocumentInfoOK, error)

	AccountingDocumentListe(params *AccountingDocumentListeParams) (*AccountingDocumentListeOK, error)

	AccountingDocumentUpdate(params *AccountingDocumentUpdateParams) (*AccountingDocumentUpdateOK, error)

	GenericCalculate(params *GenericCalculateParams) (*GenericCalculateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AccountingDocumentCalculate accountings document calculate

  Calculating an accounting document. This call is for inquiring the prices for certain objects.
*/
func (a *Client) AccountingDocumentCalculate(params *AccountingDocumentCalculateParams) (*AccountingDocumentCalculateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountingDocumentCalculateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "accountingDocumentCalculate",
		Method:             "POST",
		PathPattern:        "/accounting/calculate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountingDocumentCalculateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountingDocumentCalculateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountingDocumentCalculate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountingDocumentCreate accountings document create

  Creating an accounting document.
*/
func (a *Client) AccountingDocumentCreate(params *AccountingDocumentCreateParams) (*AccountingDocumentCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountingDocumentCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "accountingDocumentCreate",
		Method:             "POST",
		PathPattern:        "/accounting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountingDocumentCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountingDocumentCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountingDocumentCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountingDocumentInfo accountings document info

  Inquiring the data for the specified accounting document.
*/
func (a *Client) AccountingDocumentInfo(params *AccountingDocumentInfoParams) (*AccountingDocumentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountingDocumentInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "accountingDocumentInfo",
		Method:             "GET",
		PathPattern:        "/accounting/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountingDocumentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountingDocumentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountingDocumentInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountingDocumentListe accountings document list

  Inquiring a list of accounting documents with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) AccountingDocumentListe(params *AccountingDocumentListeParams) (*AccountingDocumentListeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountingDocumentListeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "accountingDocumentListe",
		Method:             "POST",
		PathPattern:        "/accounting/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountingDocumentListeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountingDocumentListeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountingDocumentListe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountingDocumentUpdate accountings document update

  Updating an existing accounting document.
*/
func (a *Client) AccountingDocumentUpdate(params *AccountingDocumentUpdateParams) (*AccountingDocumentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountingDocumentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "accountingDocumentUpdate",
		Method:             "PUT",
		PathPattern:        "/accounting/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountingDocumentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountingDocumentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for accountingDocumentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenericCalculate accountings document calculate

  Calculating an accounting document based on a supplied task data, e.g. domain create. This call is for inquiring the prices for certain objects.
*/
func (a *Client) GenericCalculate(params *GenericCalculateParams) (*GenericCalculateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericCalculateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "genericCalculate",
		Method:             "POST",
		PathPattern:        "/calculate/*",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenericCalculateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenericCalculateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for genericCalculate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
