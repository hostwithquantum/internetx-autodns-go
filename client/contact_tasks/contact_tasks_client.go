// Code generated by go-swagger; DO NOT EDIT.

package contact_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contact tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contact tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ContactCreate(params *ContactCreateParams) (*ContactCreateOK, error)

	ContactDelete(params *ContactDeleteParams) (*ContactDeleteOK, error)

	ContactInfo(params *ContactInfoParams) (*ContactInfoOK, error)

	ContactList(params *ContactListParams) (*ContactListOK, error)

	ContactUpdate(params *ContactUpdateParams) (*ContactUpdateOK, error)

	ContcatCommentUpdate(params *ContcatCommentUpdateParams) (*ContcatCommentUpdateOK, error)

	VerificationConfirm(params *VerificationConfirmParams) (*VerificationConfirmOK, error)

	VerificationCreate(params *VerificationCreateParams) (*VerificationCreateOK, error)

	VerificationHistoryInfo(params *VerificationHistoryInfoParams) (*VerificationHistoryInfoOK, error)

	VerificationHistoryList(params *VerificationHistoryListParams) (*VerificationHistoryListOK, error)

	VerificationInfo(params *VerificationInfoParams) (*VerificationInfoOK, error)

	VerificationInfoWithReference(params *VerificationInfoWithReferenceParams) (*VerificationInfoWithReferenceOK, error)

	VerificationList(params *VerificationListParams) (*VerificationListOK, error)

	VerificationResendEmail(params *VerificationResendEmailParams) (*VerificationResendEmailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ContactCreate contacts create

  Creating a new domain contact.
*/
func (a *Client) ContactCreate(params *ContactCreateParams) (*ContactCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactCreate",
		Method:             "POST",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContactDelete contacts delete

  Deleting an existing domain contact.
*/
func (a *Client) ContactDelete(params *ContactDeleteParams) (*ContactDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactDelete",
		Method:             "DELETE",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContactInfo contacts info

  Inquiring data of a specified domain contact.
*/
func (a *Client) ContactInfo(params *ContactInfoParams) (*ContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContactList contacts list

  Inquiring a list of contacts with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: country, pcode, city, type, title, lname, alias, state, id, sip, fax, verification, email, fname, address, created, phone, organization, domainsafe, comment, updated.
*/
func (a *Client) ContactList(params *ContactListParams) (*ContactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactList",
		Method:             "POST",
		PathPattern:        "/contact/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContactUpdate contacts update

  Updating an existing domain contact.
*/
func (a *Client) ContactUpdate(params *ContactUpdateParams) (*ContactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contactUpdate",
		Method:             "PUT",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContcatCommentUpdate contacts comment update

  Updating a comment for an existing contact.
*/
func (a *Client) ContcatCommentUpdate(params *ContcatCommentUpdateParams) (*ContcatCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContcatCommentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "contcatCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/contact/{id}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContcatCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContcatCommentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contcatCommentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationConfirm contacts verification confirm

  Confirming an existing verification with a given hash.
*/
func (a *Client) VerificationConfirm(params *VerificationConfirmParams) (*VerificationConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationConfirm",
		Method:             "PUT",
		PathPattern:        "/contact/verification/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationCreate contacts verification create

  Creating a new contact verification.
*/
func (a *Client) VerificationCreate(params *VerificationCreateParams) (*VerificationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationCreate",
		Method:             "POST",
		PathPattern:        "/contact/{id}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationHistoryInfo contacts verification history info

  Inquiring the data of a specified verification.
*/
func (a *Client) VerificationHistoryInfo(params *VerificationHistoryInfoParams) (*VerificationHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationHistoryInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationHistoryInfo",
		Method:             "GET",
		PathPattern:        "/contact/verification/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationHistoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationHistoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationHistoryList contacts verification history list

  Inquiring a list of history verifications with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: confirmed, action, deactivation, created, failed, name, comment, updated, status
*/
func (a *Client) VerificationHistoryList(params *VerificationHistoryListParams) (*VerificationHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationHistoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationHistoryList",
		Method:             "POST",
		PathPattern:        "/contact/verification/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationHistoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationHistoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationInfo contacts verification info

  Inquiring the data for the specified verification.
*/
func (a *Client) VerificationInfo(params *VerificationInfoParams) (*VerificationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationInfoWithReference contacts verification info

  Inquiring the data for the specified verification.
*/
func (a *Client) VerificationInfoWithReference(params *VerificationInfoWithReferenceParams) (*VerificationInfoWithReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationInfoWithReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationInfoWithReference",
		Method:             "GET",
		PathPattern:        "/contact/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationInfoWithReferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationInfoWithReferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationInfoWithReference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationList contacts verification list

  Inquiring a list of contact vrifications with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: confirmed, action, deactivation, created, failed, name, comment, updated, status.
*/
func (a *Client) VerificationList(params *VerificationListParams) (*VerificationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationList",
		Method:             "POST",
		PathPattern:        "/contact/verification/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerificationResendEmail contacts verification resend email

  Resending the email for an existing verification.
*/
func (a *Client) VerificationResendEmail(params *VerificationResendEmailParams) (*VerificationResendEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationResendEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verificationResendEmail",
		Method:             "PUT",
		PathPattern:        "/contact/{id}/verification/_resendEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationResendEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationResendEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationResendEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
