// Code generated by go-swagger; DO NOT EDIT.

package contact_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new contact tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new contact tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new contact tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for contact tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContactAddDomainSafe(params *ContactAddDomainSafeParams, opts ...ClientOption) (*ContactAddDomainSafeOK, error)

	ContactCreate(params *ContactCreateParams, opts ...ClientOption) (*ContactCreateOK, error)

	ContactDelete(params *ContactDeleteParams, opts ...ClientOption) (*ContactDeleteOK, error)

	ContactDeleteDomainSafe(params *ContactDeleteDomainSafeParams, opts ...ClientOption) (*ContactDeleteDomainSafeOK, error)

	ContactDeletes(params *ContactDeletesParams, opts ...ClientOption) (*ContactDeletesOK, error)

	ContactInfo(params *ContactInfoParams, opts ...ClientOption) (*ContactInfoOK, error)

	ContactList(params *ContactListParams, opts ...ClientOption) (*ContactListOK, error)

	ContactUpdate(params *ContactUpdateParams, opts ...ClientOption) (*ContactUpdateOK, error)

	ContcatCommentUpdate(params *ContcatCommentUpdateParams, opts ...ClientOption) (*ContcatCommentUpdateOK, error)

	VerificationConfirm(params *VerificationConfirmParams, opts ...ClientOption) (*VerificationConfirmOK, error)

	VerificationCreate(params *VerificationCreateParams, opts ...ClientOption) (*VerificationCreateOK, error)

	VerificationHistoryInfo(params *VerificationHistoryInfoParams, opts ...ClientOption) (*VerificationHistoryInfoOK, error)

	VerificationHistoryList(params *VerificationHistoryListParams, opts ...ClientOption) (*VerificationHistoryListOK, error)

	VerificationInfo(params *VerificationInfoParams, opts ...ClientOption) (*VerificationInfoOK, error)

	VerificationInfoWithReference(params *VerificationInfoWithReferenceParams, opts ...ClientOption) (*VerificationInfoWithReferenceOK, error)

	VerificationList(params *VerificationListParams, opts ...ClientOption) (*VerificationListOK, error)

	VerificationResendEmail(params *VerificationResendEmailParams, opts ...ClientOption) (*VerificationResendEmailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ContactAddDomainSafe saves object create 0601

Adding the contact to the domain safe
*/
func (a *Client) ContactAddDomainSafe(params *ContactAddDomainSafeParams, opts ...ClientOption) (*ContactAddDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactAddDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactAddDomainSafe",
		Method:             "PUT",
		PathPattern:        "/contact/{id}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactAddDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactAddDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactAddDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactCreate contacts create 0301

Creating a new domain contact.
*/
func (a *Client) ContactCreate(params *ContactCreateParams, opts ...ClientOption) (*ContactCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactCreate",
		Method:             "POST",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactDelete contacts delete 0303

Deleting an existing domain contact.
*/
func (a *Client) ContactDelete(params *ContactDeleteParams, opts ...ClientOption) (*ContactDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDelete",
		Method:             "DELETE",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactDeleteDomainSafe saves object create 0603

Deleting the contact from the domain safe
*/
func (a *Client) ContactDeleteDomainSafe(params *ContactDeleteDomainSafeParams, opts ...ClientOption) (*ContactDeleteDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDeleteDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDeleteDomainSafe",
		Method:             "DELETE",
		PathPattern:        "/contact/{id}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDeleteDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDeleteDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDeleteDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactDeletes contacts delete bulk 0303

Deleting several contacts with one request.
*/
func (a *Client) ContactDeletes(params *ContactDeletesParams, opts ...ClientOption) (*ContactDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactInfo contacts info 0304

Inquiring data of a specified domain contact.
*/
func (a *Client) ContactInfo(params *ContactInfoParams, opts ...ClientOption) (*ContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactList contacts list 0304

Inquiring a list of contacts with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: country, pcode, city, type, title, lname, alias, state, id, sip, fax, verification, email, fname, address, created, phone, organization, domainsafe, comment, updated.
*/
func (a *Client) ContactList(params *ContactListParams, opts ...ClientOption) (*ContactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactList",
		Method:             "POST",
		PathPattern:        "/contact/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactUpdate contacts update 0302

Updating an existing domain contact.
*/
func (a *Client) ContactUpdate(params *ContactUpdateParams, opts ...ClientOption) (*ContactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactUpdate",
		Method:             "PUT",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContcatCommentUpdate contacts comment update 0302004

Updating a comment for an existing contact.
*/
func (a *Client) ContcatCommentUpdate(params *ContcatCommentUpdateParams, opts ...ClientOption) (*ContcatCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContcatCommentUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contcatCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/contact/{id}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContcatCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContcatCommentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contcatCommentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationConfirm contacts verification confirm 0346

Confirming an existing verification with a given hash.
*/
func (a *Client) VerificationConfirm(params *VerificationConfirmParams, opts ...ClientOption) (*VerificationConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationConfirm",
		Method:             "PUT",
		PathPattern:        "/contact/verification/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationCreate contacts verification create 0341

Creating a new contact verification.
*/
func (a *Client) VerificationCreate(params *VerificationCreateParams, opts ...ClientOption) (*VerificationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationCreate",
		Method:             "POST",
		PathPattern:        "/contact/{id}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationHistoryInfo contacts verification history info 0354

Inquiring the data of a specified verification.
*/
func (a *Client) VerificationHistoryInfo(params *VerificationHistoryInfoParams, opts ...ClientOption) (*VerificationHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationHistoryInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationHistoryInfo",
		Method:             "GET",
		PathPattern:        "/contact/verification/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationHistoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationHistoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationHistoryList contacts verification history list 0355

Inquiring a list of history verifications with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: confirmed, action, deactivation, created, failed, name, comment, updated, status
*/
func (a *Client) VerificationHistoryList(params *VerificationHistoryListParams, opts ...ClientOption) (*VerificationHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationHistoryListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationHistoryList",
		Method:             "POST",
		PathPattern:        "/contact/verification/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationHistoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationHistoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationInfo contacts verification info 0344

Inquiring the data for the specified verification.
*/
func (a *Client) VerificationInfo(params *VerificationInfoParams, opts ...ClientOption) (*VerificationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationInfoWithReference contacts verification info 0344

Inquiring the data for the specified verification.
*/
func (a *Client) VerificationInfoWithReference(params *VerificationInfoWithReferenceParams, opts ...ClientOption) (*VerificationInfoWithReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationInfoWithReferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationInfoWithReference",
		Method:             "GET",
		PathPattern:        "/contact/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationInfoWithReferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationInfoWithReferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationInfoWithReference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationList contacts verification list 0345

Inquiring a list of contact verifications with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: confirmed, action, deactivation, created, failed, name, comment, updated, status.
*/
func (a *Client) VerificationList(params *VerificationListParams, opts ...ClientOption) (*VerificationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationList",
		Method:             "POST",
		PathPattern:        "/contact/verification/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerificationResendEmail contacts verification resend email 0349

Resending the email for an existing verification.
*/
func (a *Client) VerificationResendEmail(params *VerificationResendEmailParams, opts ...ClientOption) (*VerificationResendEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerificationResendEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verificationResendEmail",
		Method:             "PUT",
		PathPattern:        "/contact/{id}/verification/_resendEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerificationResendEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerificationResendEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verificationResendEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
