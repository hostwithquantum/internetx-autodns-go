// Code generated by go-swagger; DO NOT EDIT.

package contact_document_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new contact document tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new contact document tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new contact document tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for contact document tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ContactDocumentDelete(params *ContactDocumentDeleteParams, opts ...ClientOption) (*ContactDocumentDeleteOK, error)

	ContactDocumentInfo(params *ContactDocumentInfoParams, opts ...ClientOption) (*ContactDocumentInfoOK, error)

	ContactDocumentPatch(params *ContactDocumentPatchParams, opts ...ClientOption) (*ContactDocumentPatchOK, error)

	DocumentCopy(params *DocumentCopyParams, opts ...ClientOption) (*DocumentCopyOK, error)

	DocumentCreate(params *DocumentCreateParams, opts ...ClientOption) (*DocumentCreateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ContactDocumentDelete contacts document delete 0363

Deleting a single TmchMark document for the given type.
*/
func (a *Client) ContactDocumentDelete(params *ContactDocumentDeleteParams, opts ...ClientOption) (*ContactDocumentDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDocumentDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDocumentDelete",
		Method:             "DELETE",
		PathPattern:        "/contact/{id}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDocumentDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDocumentDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDocumentDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactDocumentInfo contacts document info 0364

Inquiring a single contact document for the given type.
*/
func (a *Client) ContactDocumentInfo(params *ContactDocumentInfoParams, opts ...ClientOption) (*ContactDocumentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDocumentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDocumentInfo",
		Method:             "GET",
		PathPattern:        "/contact/{id}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDocumentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDocumentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDocumentInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactDocumentPatch contacts document status update 0362

Updating status an existing contactDocument.
*/
func (a *Client) ContactDocumentPatch(params *ContactDocumentPatchParams, opts ...ClientOption) (*ContactDocumentPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContactDocumentPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contactDocumentPatch",
		Method:             "PATCH",
		PathPattern:        "/contact/{id}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactDocumentPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactDocumentPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contactDocumentPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCopy contacts document copy 0365

Copying a document and assigning it to another contact.
*/
func (a *Client) DocumentCopy(params *DocumentCopyParams, opts ...ClientOption) (*DocumentCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "documentCopy",
		Method:             "POST",
		PathPattern:        "/contact/{id}/document/{type}/_copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for documentCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DocumentCreate contacts document create 0361

Uploading a specific document to a contact entry.
*/
func (a *Client) DocumentCreate(params *DocumentCreateParams, opts ...ClientOption) (*DocumentCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "documentCreate",
		Method:             "POST",
		PathPattern:        "/contact/{id}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for documentCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
