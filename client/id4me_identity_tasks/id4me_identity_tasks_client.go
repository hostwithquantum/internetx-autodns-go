// Code generated by go-swagger; DO NOT EDIT.

package id4me_identity_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new id4me identity tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for id4me identity tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConfirmId4MeIdentity(params *ConfirmId4MeIdentityParams) (*ConfirmId4MeIdentityOK, error)

	CreateId4MeIdentity(params *CreateId4MeIdentityParams) (*CreateId4MeIdentityOK, error)

	DeleteId4MeIdentity(params *DeleteId4MeIdentityParams) (*DeleteId4MeIdentityOK, error)

	Id4MeIdentityInfo(params *Id4MeIdentityInfoParams) (*Id4MeIdentityInfoOK, error)

	Id4MeIdentityList(params *Id4MeIdentityListParams) (*Id4MeIdentityListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConfirmId4MeIdentity id4mes identity confirm

  Confirming an existing id4me identity. Not available yet.
*/
func (a *Client) ConfirmId4MeIdentity(params *ConfirmId4MeIdentityParams) (*ConfirmId4MeIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmId4MeIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "confirmId4MeIdentity",
		Method:             "PUT",
		PathPattern:        "/id4MeIdentity/{name}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmId4MeIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmId4MeIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmId4MeIdentity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateId4MeIdentity id4mes identity create

  Creating a new id4me identity. Not available yet.
*/
func (a *Client) CreateId4MeIdentity(params *CreateId4MeIdentityParams) (*CreateId4MeIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateId4MeIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createId4MeIdentity",
		Method:             "POST",
		PathPattern:        "/id4MeIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateId4MeIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateId4MeIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createId4MeIdentity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteId4MeIdentity id4mes identity delete

  Deleting an existing id4me identity. Not available yet.
*/
func (a *Client) DeleteId4MeIdentity(params *DeleteId4MeIdentityParams) (*DeleteId4MeIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteId4MeIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteId4MeIdentity",
		Method:             "DELETE",
		PathPattern:        "/id4MeIdentity/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteId4MeIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteId4MeIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteId4MeIdentity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Id4MeIdentityInfo id4mes identity info

  Inquiring the data for the specified name. Not available yet.
*/
func (a *Client) Id4MeIdentityInfo(params *Id4MeIdentityInfoParams) (*Id4MeIdentityInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewId4MeIdentityInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "id4MeIdentityInfo",
		Method:             "GET",
		PathPattern:        "/id4MeIdentity/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Id4MeIdentityInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Id4MeIdentityInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for id4MeIdentityInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Id4MeIdentityList id4mes identity list

  Inquiring a list of id4me identities with certain details. Not available yet.
*/
func (a *Client) Id4MeIdentityList(params *Id4MeIdentityListParams) (*Id4MeIdentityListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewId4MeIdentityListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "id4MeIdentityList",
		Method:             "POST",
		PathPattern:        "/id4MeIdentity/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Id4MeIdentityListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Id4MeIdentityListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for id4MeIdentityList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
