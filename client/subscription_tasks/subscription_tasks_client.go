// Code generated by go-swagger; DO NOT EDIT.

package subscription_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new subscription tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new subscription tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for subscription tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SubscriptionCancelationCreate(params *SubscriptionCancelationCreateParams, opts ...ClientOption) (*SubscriptionCancelationCreateOK, error)

	SubscriptionCancelationDelete(params *SubscriptionCancelationDeleteParams, opts ...ClientOption) (*SubscriptionCancelationDeleteOK, error)

	SubscriptionCreate(params *SubscriptionCreateParams, opts ...ClientOption) (*SubscriptionCreateOK, error)

	SubscriptionDelete(params *SubscriptionDeleteParams, opts ...ClientOption) (*SubscriptionDeleteOK, error)

	SubscriptionList(params *SubscriptionListParams, opts ...ClientOption) (*SubscriptionListOK, error)

	SubscriptionUpdate(params *SubscriptionUpdateParams, opts ...ClientOption) (*SubscriptionUpdateOK, error)

	SubscriptionUpgrade(params *SubscriptionUpgradeParams, opts ...ClientOption) (*SubscriptionUpgradeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SubscriptionCancelationCreate subscriptions create cancelation

Adding a cancelation for the subscription.
*/
func (a *Client) SubscriptionCancelationCreate(params *SubscriptionCancelationCreateParams, opts ...ClientOption) (*SubscriptionCancelationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionCancelationCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionCancelationCreate",
		Method:             "POST",
		PathPattern:        "/subscription/{contractId}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionCancelationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionCancelationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionCancelationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionCancelationDelete subscriptions remove cancalation

Removing an existing cancelation of a subscription.
*/
func (a *Client) SubscriptionCancelationDelete(params *SubscriptionCancelationDeleteParams, opts ...ClientOption) (*SubscriptionCancelationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionCancelationDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionCancelationDelete",
		Method:             "DELETE",
		PathPattern:        "/subscription/{contractId}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionCancelationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionCancelationDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionCancelationDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionCreate subscriptions create 1701

Creating a new subscription contract.
*/
func (a *Client) SubscriptionCreate(params *SubscriptionCreateParams, opts ...ClientOption) (*SubscriptionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionCreate",
		Method:             "POST",
		PathPattern:        "/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionDelete subscriptions delete 1703

Deleting a subscription contract.
*/
func (a *Client) SubscriptionDelete(params *SubscriptionDeleteParams, opts ...ClientOption) (*SubscriptionDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionDelete",
		Method:             "DELETE",
		PathPattern:        "/subscription/{contractId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionList subscriptions list 1705

Inquiring a list of the subscription contracts
*/
func (a *Client) SubscriptionList(params *SubscriptionListParams, opts ...ClientOption) (*SubscriptionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionList",
		Method:             "POST",
		PathPattern:        "/subscription/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionUpdate subscriptions update 1702

Updating a subscription contract.
*/
func (a *Client) SubscriptionUpdate(params *SubscriptionUpdateParams, opts ...ClientOption) (*SubscriptionUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionUpdate",
		Method:             "PUT",
		PathPattern:        "/subscription/{contractId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriptionUpgrade subscriptions upgrade 1706

Upgrading a subscription contract.
*/
func (a *Client) SubscriptionUpgrade(params *SubscriptionUpgradeParams, opts ...ClientOption) (*SubscriptionUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subscriptionUpgrade",
		Method:             "PUT",
		PathPattern:        "/subscription/{contractId}/_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subscriptionUpgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
