// Code generated by go-swagger; DO NOT EDIT.

package domain_prereg_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain prereg tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain prereg tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConfirmPrereg(params *ConfirmPreregParams) (*ConfirmPreregOK, error)

	CreateAndConfirmPrereg(params *CreateAndConfirmPreregParams) (*CreateAndConfirmPreregOK, error)

	DomainPreregCreate(params *DomainPreregCreateParams) (*DomainPreregCreateOK, error)

	DomainPreregDelete(params *DomainPreregDeleteParams) (*DomainPreregDeleteOK, error)

	DomainPreregInfo(params *DomainPreregInfoParams) (*DomainPreregInfoOK, error)

	DomainPreregList(params *DomainPreregListParams) (*DomainPreregListOK, error)

	DomainPreregUpdate(params *DomainPreregUpdateParams) (*DomainPreregUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConfirmPrereg domains prereg confirm

  Confirming an existing domain preregistration.
*/
func (a *Client) ConfirmPrereg(params *ConfirmPreregParams) (*ConfirmPreregOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmPreregParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "confirmPrereg",
		Method:             "PUT",
		PathPattern:        "/domainPrereg/{reference}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPreregReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPreregOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmPrereg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAndConfirmPrereg domains prereg create

  Creating and confirming an existing domain preregistration.
*/
func (a *Client) CreateAndConfirmPrereg(params *CreateAndConfirmPreregParams) (*CreateAndConfirmPreregOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAndConfirmPreregParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAndConfirmPrereg",
		Method:             "POST",
		PathPattern:        "/domainPrereg/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAndConfirmPreregReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAndConfirmPreregOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAndConfirmPrereg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPreregCreate domains prereg create

  Creating a new domain preregistration.
*/
func (a *Client) DomainPreregCreate(params *DomainPreregCreateParams) (*DomainPreregCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPreregCreate",
		Method:             "POST",
		PathPattern:        "/domainPrereg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPreregDelete domains prereg delete

  Deleting an existing domain preregistration.
*/
func (a *Client) DomainPreregDelete(params *DomainPreregDeleteParams) (*DomainPreregDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPreregDelete",
		Method:             "DELETE",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPreregInfo domains prereg info

  Inquiring the data of a specified domain preregistration.
*/
func (a *Client) DomainPreregInfo(params *DomainPreregInfoParams) (*DomainPreregInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPreregInfo",
		Method:             "GET",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPreregList domains prereg list

  Inquiring a list of domain preregistrations with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: orderReference, techc, phase, nsentry, period, created, sld, ownerc, updated, status, confirmed, adminc,  zonec, nserver, tld, recommended, subtld.
*/
func (a *Client) DomainPreregList(params *DomainPreregListParams) (*DomainPreregListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPreregList",
		Method:             "POST",
		PathPattern:        "/domainPrereg/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainPreregUpdate domains prereg update

  Updating an existing domain preregistration.
*/
func (a *Client) DomainPreregUpdate(params *DomainPreregUpdateParams) (*DomainPreregUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainPreregUpdate",
		Method:             "PUT",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
