// Code generated by go-swagger; DO NOT EDIT.

package domain_prereg_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain prereg tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new domain prereg tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new domain prereg tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for domain prereg tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfirmPrereg(params *ConfirmPreregParams, opts ...ClientOption) (*ConfirmPreregOK, error)

	CreateAndConfirmPrereg(params *CreateAndConfirmPreregParams, opts ...ClientOption) (*CreateAndConfirmPreregOK, error)

	DomainPreregConfimrs(params *DomainPreregConfimrsParams, opts ...ClientOption) (*DomainPreregConfimrsOK, error)

	DomainPreregCreate(params *DomainPreregCreateParams, opts ...ClientOption) (*DomainPreregCreateOK, error)

	DomainPreregCreates(params *DomainPreregCreatesParams, opts ...ClientOption) (*DomainPreregCreatesOK, error)

	DomainPreregDelete(params *DomainPreregDeleteParams, opts ...ClientOption) (*DomainPreregDeleteOK, error)

	DomainPreregDeletes(params *DomainPreregDeletesParams, opts ...ClientOption) (*DomainPreregDeletesOK, error)

	DomainPreregInfo(params *DomainPreregInfoParams, opts ...ClientOption) (*DomainPreregInfoOK, error)

	DomainPreregList(params *DomainPreregListParams, opts ...ClientOption) (*DomainPreregListOK, error)

	DomainPreregPatches(params *DomainPreregPatchesParams, opts ...ClientOption) (*DomainPreregPatchesOK, error)

	DomainPreregUpdate(params *DomainPreregUpdateParams, opts ...ClientOption) (*DomainPreregUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfirmPrereg domains prereg confirm 0110007

Confirming an existing domain preregistration.
*/
func (a *Client) ConfirmPrereg(params *ConfirmPreregParams, opts ...ClientOption) (*ConfirmPreregOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmPreregParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmPrereg",
		Method:             "PUT",
		PathPattern:        "/domainPrereg/{reference}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPreregReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPreregOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmPrereg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAndConfirmPrereg domains prereg create 0110001

Creating and confirming an existing domain preregistration.
*/
func (a *Client) CreateAndConfirmPrereg(params *CreateAndConfirmPreregParams, opts ...ClientOption) (*CreateAndConfirmPreregOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAndConfirmPreregParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAndConfirmPrereg",
		Method:             "POST",
		PathPattern:        "/domainPrereg/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAndConfirmPreregReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAndConfirmPreregOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAndConfirmPrereg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregConfimrs domains prereg confirm bulk 0110007

Confirming several domain preregistrations with one request.
*/
func (a *Client) DomainPreregConfimrs(params *DomainPreregConfimrsParams, opts ...ClientOption) (*DomainPreregConfimrsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregConfimrsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregConfimrs",
		Method:             "PUT",
		PathPattern:        "/bulk/domainPrereg/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregConfimrsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregConfimrsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregConfimrs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregCreate domains prereg create 0110001

Creating a new domain preregistration.
*/
func (a *Client) DomainPreregCreate(params *DomainPreregCreateParams, opts ...ClientOption) (*DomainPreregCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregCreate",
		Method:             "POST",
		PathPattern:        "/domainPrereg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregCreates domains prereg create bulk 0110001

Creating several domain preregistrations with one request.
*/
func (a *Client) DomainPreregCreates(params *DomainPreregCreatesParams, opts ...ClientOption) (*DomainPreregCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domainPrereg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregDelete domains prereg delete 0110003

Deleting an existing domain preregistration.
*/
func (a *Client) DomainPreregDelete(params *DomainPreregDeleteParams, opts ...ClientOption) (*DomainPreregDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregDelete",
		Method:             "DELETE",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregDeletes domains prereg delete bulk 0110003

Deleting several domain preregistrations with one request.
*/
func (a *Client) DomainPreregDeletes(params *DomainPreregDeletesParams, opts ...ClientOption) (*DomainPreregDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/domainPrereg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregInfo domains prereg info 0110004

Inquiring the data of a specified domain preregistration.
*/
func (a *Client) DomainPreregInfo(params *DomainPreregInfoParams, opts ...ClientOption) (*DomainPreregInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregInfo",
		Method:             "GET",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregList domains prereg list 0110005

Inquiring a list of domain preregistrations with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: orderReference, techc, phase, nsentry, period, created, sld, ownerc, updated, status, confirmed, adminc,  zonec, nserver, tld, recommended, subtld.
*/
func (a *Client) DomainPreregList(params *DomainPreregListParams, opts ...ClientOption) (*DomainPreregListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregList",
		Method:             "POST",
		PathPattern:        "/domainPrereg/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregPatches domains prereg update bulk 0110002

Updating several domain preregistrations with one request.
*/
func (a *Client) DomainPreregPatches(params *DomainPreregPatchesParams, opts ...ClientOption) (*DomainPreregPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/domainPrereg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPreregUpdate domains prereg update 0110002

Updating an existing domain preregistration.
*/
func (a *Client) DomainPreregUpdate(params *DomainPreregUpdateParams, opts ...ClientOption) (*DomainPreregUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPreregUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPreregUpdate",
		Method:             "PUT",
		PathPattern:        "/domainPrereg/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPreregUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPreregUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPreregUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
