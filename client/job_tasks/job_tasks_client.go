// Code generated by go-swagger; DO NOT EDIT.

package job_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new job tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	JobCancel(params *JobCancelParams) (*JobCancelOK, error)

	JobConfirm(params *JobConfirmParams) (*JobConfirmOK, error)

	JobFailed(params *JobFailedParams) (*JobFailedOK, error)

	JobHistoryInfo(params *JobHistoryInfoParams) (*JobHistoryInfoOK, error)

	JobHistoryList(params *JobHistoryListParams) (*JobHistoryListOK, error)

	JobInfo(params *JobInfoParams) (*JobInfoOK, error)

	JobList(params *JobListParams) (*JobListOK, error)

	JobReject(params *JobRejectParams) (*JobRejectOK, error)

	JobRestart(params *JobRestartParams) (*JobRestartOK, error)

	JobRetry(params *JobRetryParams) (*JobRetryOK, error)

	JobSucceded(params *JobSuccededParams) (*JobSuccededOK, error)

	ResendApproverEmail(params *ResendApproverEmailParams) (*ResendApproverEmailOK, error)

	ResendPhoneAuthorization(params *ResendPhoneAuthorizationParams) (*ResendPhoneAuthorizationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  JobCancel jobs cancel

  Cancelling the specified job.
*/
func (a *Client) JobCancel(params *JobCancelParams) (*JobCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobCancel",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobConfirm jobs confirm

  Confirming the specified job.
*/
func (a *Client) JobConfirm(params *JobConfirmParams) (*JobConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobConfirm",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobFailed jobs failed

  Ending the specified job and setting the status to failed.
*/
func (a *Client) JobFailed(params *JobFailedParams) (*JobFailedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobFailedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobFailed",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_failed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobFailedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobFailedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobFailed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobHistoryInfo jobs history info

  Inquiring the data for the specified finished job.
*/
func (a *Client) JobHistoryInfo(params *JobHistoryInfoParams) (*JobHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobHistoryInfo",
		Method:             "GET",
		PathPattern:        "/job/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobHistoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobHistoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobHistoryList jobs history list

  Inquiring a list of finished jobs with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: parent, execution, subStatus, type, created, id, updated, status, object, action.
*/
func (a *Client) JobHistoryList(params *JobHistoryListParams) (*JobHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobHistoryList",
		Method:             "POST",
		PathPattern:        "/job/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobHistoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobHistoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobInfo jobs info

  Inquiring the data of the specified job.
*/
func (a *Client) JobInfo(params *JobInfoParams) (*JobInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobInfo",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobList jobs list

  Inquiring a list of jobs with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: parent, execution, subStatus, type, created, id, updated, status, object, action.
*/
func (a *Client) JobList(params *JobListParams) (*JobListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobList",
		Method:             "POST",
		PathPattern:        "/job/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobReject jobs reject

  Rejecting the specified job.
*/
func (a *Client) JobReject(params *JobRejectParams) (*JobRejectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobRejectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobReject",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobRejectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobRejectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobReject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobRestart jobs restart

  Restarting the specified job.
*/
func (a *Client) JobRestart(params *JobRestartParams) (*JobRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobRestartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobRestart",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobRestartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobRetry jobs retry

  Retrying the specified job.
*/
func (a *Client) JobRetry(params *JobRetryParams) (*JobRetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobRetryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobRetry",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobRetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobRetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobRetry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobSucceded jobs succeeded

  Ending the specified job and set the status to success.
*/
func (a *Client) JobSucceded(params *JobSuccededParams) (*JobSuccededOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobSuccededParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobSucceded",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_succeded",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobSuccededReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobSuccededOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobSucceded: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResendApproverEmail approvers email resend

  Resending the approver email.
*/
func (a *Client) ResendApproverEmail(params *ResendApproverEmailParams) (*ResendApproverEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendApproverEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resendApproverEmail",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_resendApproverEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResendApproverEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendApproverEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendApproverEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResendPhoneAuthorization phones authorization resend

  Resending the phone authorization.
*/
func (a *Client) ResendPhoneAuthorization(params *ResendPhoneAuthorizationParams) (*ResendPhoneAuthorizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendPhoneAuthorizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resendPhoneAuthorization",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_resendPhoneAuthorization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResendPhoneAuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendPhoneAuthorizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendPhoneAuthorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
