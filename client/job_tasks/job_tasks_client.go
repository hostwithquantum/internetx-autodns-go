// Code generated by go-swagger; DO NOT EDIT.

package job_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new job tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new job tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new job tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for job tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	JobCancel(params *JobCancelParams, opts ...ClientOption) (*JobCancelOK, error)

	JobConfirm(params *JobConfirmParams, opts ...ClientOption) (*JobConfirmOK, error)

	JobHistoryInfo(params *JobHistoryInfoParams, opts ...ClientOption) (*JobHistoryInfoOK, error)

	JobHistoryList(params *JobHistoryListParams, opts ...ClientOption) (*JobHistoryListOK, error)

	JobInfo(params *JobInfoParams, opts ...ClientOption) (*JobInfoOK, error)

	JobList(params *JobListParams, opts ...ClientOption) (*JobListOK, error)

	ResendApproverEmail(params *ResendApproverEmailParams, opts ...ClientOption) (*ResendApproverEmailOK, error)

	ResendPhoneAuthorization(params *ResendPhoneAuthorizationParams, opts ...ClientOption) (*ResendPhoneAuthorizationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
JobCancel jobs cancel 300121

Cancelling the specified job.
*/
func (a *Client) JobCancel(params *JobCancelParams, opts ...ClientOption) (*JobCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobCancelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobCancel",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JobConfirm jobs confirm 300122

Confirming the specified job.
*/
func (a *Client) JobConfirm(params *JobConfirmParams, opts ...ClientOption) (*JobConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobConfirm",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JobHistoryInfo jobs history info 300134

Inquiring the data for the specified finished job.
*/
func (a *Client) JobHistoryInfo(params *JobHistoryInfoParams, opts ...ClientOption) (*JobHistoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobHistoryInfo",
		Method:             "GET",
		PathPattern:        "/job/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobHistoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobHistoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JobHistoryList jobs history list 300135

Inquiring a list of finished jobs with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: parent, execution, subStatus, type, created, id, updated, status, object, action.
*/
func (a *Client) JobHistoryList(params *JobHistoryListParams, opts ...ClientOption) (*JobHistoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobHistoryListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobHistoryList",
		Method:             "POST",
		PathPattern:        "/job/history/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobHistoryListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobHistoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobHistoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JobInfo jobs info 300114

Inquiring the data of the specified job.
*/
func (a *Client) JobInfo(params *JobInfoParams, opts ...ClientOption) (*JobInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobInfo",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JobList jobs list 300115

Inquiring a list of jobs with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: parent, execution, subStatus, type, created, id, updated, status, object, action.
*/
func (a *Client) JobList(params *JobListParams, opts ...ClientOption) (*JobListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jobList",
		Method:             "POST",
		PathPattern:        "/job/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jobList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResendApproverEmail approvers email resend 400118

Resending the approver email.
*/
func (a *Client) ResendApproverEmail(params *ResendApproverEmailParams, opts ...ClientOption) (*ResendApproverEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendApproverEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resendApproverEmail",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_resendApproverEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResendApproverEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendApproverEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendApproverEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResendPhoneAuthorization phones authorization resend 400119

Resending the phone authorization.
*/
func (a *Client) ResendPhoneAuthorization(params *ResendPhoneAuthorizationParams, opts ...ClientOption) (*ResendPhoneAuthorizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendPhoneAuthorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resendPhoneAuthorization",
		Method:             "PUT",
		PathPattern:        "/job/{id}/_resendPhoneAuthorization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResendPhoneAuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendPhoneAuthorizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendPhoneAuthorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
