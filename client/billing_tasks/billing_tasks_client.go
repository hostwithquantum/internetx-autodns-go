// Code generated by go-swagger; DO NOT EDIT.

package billing_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new billing tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new billing tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new billing tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for billing tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BillingEventConfirm(params *BillingEventConfirmParams, opts ...ClientOption) (*BillingEventConfirmOK, error)

	BillingEventDrop(params *BillingEventDropParams, opts ...ClientOption) (*BillingEventDropOK, error)

	BillingEventReactivate(params *BillingEventReactivateParams, opts ...ClientOption) (*BillingEventReactivateOK, error)

	BillingEventRegect(params *BillingEventRegectParams, opts ...ClientOption) (*BillingEventRegectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BillingEventConfirm billings event confirm bulk 1606

Confirming several Billing with one request.
*/
func (a *Client) BillingEventConfirm(params *BillingEventConfirmParams, opts ...ClientOption) (*BillingEventConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingEventConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billingEventConfirm",
		Method:             "PUT",
		PathPattern:        "/bulk/intern/billing/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingEventConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingEventConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingEventConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingEventDrop billings event drop bulk 1623

Drop several Billing with one request.
*/
func (a *Client) BillingEventDrop(params *BillingEventDropParams, opts ...ClientOption) (*BillingEventDropOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingEventDropParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billingEventDrop",
		Method:             "PUT",
		PathPattern:        "/bulk/intern/billing/_drop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingEventDropReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingEventDropOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingEventDrop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingEventReactivate billings event reactivate bulk 1609

Reactivating several Billing with one request.
*/
func (a *Client) BillingEventReactivate(params *BillingEventReactivateParams, opts ...ClientOption) (*BillingEventReactivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingEventReactivateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billingEventReactivate",
		Method:             "PUT",
		PathPattern:        "/bulk/intern/billing/_reactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingEventReactivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingEventReactivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingEventReactivate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingEventRegect billings event reject bulk 1608

Rejecting several Billing with one request.
*/
func (a *Client) BillingEventRegect(params *BillingEventRegectParams, opts ...ClientOption) (*BillingEventRegectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingEventRegectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billingEventRegect",
		Method:             "PUT",
		PathPattern:        "/bulk/intern/billing/_reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingEventRegectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingEventRegectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billingEventRegect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
