// Code generated by go-swagger; DO NOT EDIT.

package backup_mx_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup mx tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backup mx tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backup mx tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backup mx tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BackupMxCreate(params *BackupMxCreateParams, opts ...ClientOption) (*BackupMxCreateOK, error)

	BackupMxCreates(params *BackupMxCreatesParams, opts ...ClientOption) (*BackupMxCreatesOK, error)

	BackupMxDelete(params *BackupMxDeleteParams, opts ...ClientOption) (*BackupMxDeleteOK, error)

	BackupMxDeletes(params *BackupMxDeletesParams, opts ...ClientOption) (*BackupMxDeletesOK, error)

	BackupMxInfo(params *BackupMxInfoParams, opts ...ClientOption) (*BackupMxInfoOK, error)

	BackupMxList(params *BackupMxListParams, opts ...ClientOption) (*BackupMxListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BackupMxCreate backups mx create 0521

Creating a new BackupMx.
*/
func (a *Client) BackupMxCreate(params *BackupMxCreateParams, opts ...ClientOption) (*BackupMxCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxCreate",
		Method:             "POST",
		PathPattern:        "/backupMx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupMxCreates backups mx create bulk 0521

Creating several new backupMxs.
*/
func (a *Client) BackupMxCreates(params *BackupMxCreatesParams, opts ...ClientOption) (*BackupMxCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxCreates",
		Method:             "POST",
		PathPattern:        "/bulk/backupMx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupMxDelete backups mx delete 0523

Deleting an existing BackupMx.
*/
func (a *Client) BackupMxDelete(params *BackupMxDeleteParams, opts ...ClientOption) (*BackupMxDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxDelete",
		Method:             "DELETE",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupMxDeletes backups mx delete bulk 0523

Deleting several existing backupMxs.
*/
func (a *Client) BackupMxDeletes(params *BackupMxDeletesParams, opts ...ClientOption) (*BackupMxDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/backupMx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupMxInfo backups mx info 0524

Inquiring the data for the specified backup mx.
*/
func (a *Client) BackupMxInfo(params *BackupMxInfoParams, opts ...ClientOption) (*BackupMxInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxInfo",
		Method:             "GET",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupMxList backups mx list 0524

Inquiring a list of BackupMx with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: domain, created, updated
*/
func (a *Client) BackupMxList(params *BackupMxListParams, opts ...ClientOption) (*BackupMxListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupMxList",
		Method:             "POST",
		PathPattern:        "/backupMx/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
