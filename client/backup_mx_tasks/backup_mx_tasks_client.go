// Code generated by go-swagger; DO NOT EDIT.

package backup_mx_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup mx tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup mx tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BackupMxCreate(params *BackupMxCreateParams) (*BackupMxCreateOK, error)

	BackupMxDelete(params *BackupMxDeleteParams) (*BackupMxDeleteOK, error)

	BackupMxInfo(params *BackupMxInfoParams) (*BackupMxInfoOK, error)

	BackupMxList(params *BackupMxListParams) (*BackupMxListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BackupMxCreate backups mx create

  Creating a new backupmx.
*/
func (a *Client) BackupMxCreate(params *BackupMxCreateParams) (*BackupMxCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxCreate",
		Method:             "POST",
		PathPattern:        "/backupMx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BackupMxDelete backups mx delete

  Deleting an existing backup mx.
*/
func (a *Client) BackupMxDelete(params *BackupMxDeleteParams) (*BackupMxDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxDelete",
		Method:             "DELETE",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BackupMxInfo backups mx info

  Inquiring the data for the specified backup mx.
*/
func (a *Client) BackupMxInfo(params *BackupMxInfoParams) (*BackupMxInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxInfo",
		Method:             "GET",
		PathPattern:        "/backupMx/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BackupMxList backups mx list

  Inquiring a list of backupmx with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: domain, created, updated
*/
func (a *Client) BackupMxList(params *BackupMxListParams) (*BackupMxListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupMxListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupMxList",
		Method:             "POST",
		PathPattern:        "/backupMx/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupMxListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupMxListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backupMxList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
