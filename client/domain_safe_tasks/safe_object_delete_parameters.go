// Code generated by go-swagger; DO NOT EDIT.

package domain_safe_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSafeObjectDeleteParams creates a new SafeObjectDeleteParams object
// with the default values initialized.
func NewSafeObjectDeleteParams() *SafeObjectDeleteParams {
	var ()
	return &SafeObjectDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSafeObjectDeleteParamsWithTimeout creates a new SafeObjectDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSafeObjectDeleteParamsWithTimeout(timeout time.Duration) *SafeObjectDeleteParams {
	var ()
	return &SafeObjectDeleteParams{

		timeout: timeout,
	}
}

// NewSafeObjectDeleteParamsWithContext creates a new SafeObjectDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewSafeObjectDeleteParamsWithContext(ctx context.Context) *SafeObjectDeleteParams {
	var ()
	return &SafeObjectDeleteParams{

		Context: ctx,
	}
}

// NewSafeObjectDeleteParamsWithHTTPClient creates a new SafeObjectDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSafeObjectDeleteParamsWithHTTPClient(client *http.Client) *SafeObjectDeleteParams {
	var ()
	return &SafeObjectDeleteParams{
		HTTPClient: client,
	}
}

/*SafeObjectDeleteParams contains all the parameters to send to the API endpoint
for the safe object delete operation typically these are written to a http.Request
*/
type SafeObjectDeleteParams struct {

	/*SafeObject*/
	SafeObject string
	/*Type*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the safe object delete params
func (o *SafeObjectDeleteParams) WithTimeout(timeout time.Duration) *SafeObjectDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the safe object delete params
func (o *SafeObjectDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the safe object delete params
func (o *SafeObjectDeleteParams) WithContext(ctx context.Context) *SafeObjectDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the safe object delete params
func (o *SafeObjectDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the safe object delete params
func (o *SafeObjectDeleteParams) WithHTTPClient(client *http.Client) *SafeObjectDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the safe object delete params
func (o *SafeObjectDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSafeObject adds the safeObject to the safe object delete params
func (o *SafeObjectDeleteParams) WithSafeObject(safeObject string) *SafeObjectDeleteParams {
	o.SetSafeObject(safeObject)
	return o
}

// SetSafeObject adds the safeObject to the safe object delete params
func (o *SafeObjectDeleteParams) SetSafeObject(safeObject string) {
	o.SafeObject = safeObject
}

// WithType adds the typeVar to the safe object delete params
func (o *SafeObjectDeleteParams) WithType(typeVar string) *SafeObjectDeleteParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the safe object delete params
func (o *SafeObjectDeleteParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *SafeObjectDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param safeObject
	if err := r.SetPathParam("safeObject", o.SafeObject); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
