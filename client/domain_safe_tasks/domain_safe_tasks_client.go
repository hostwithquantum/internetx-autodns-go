// Code generated by go-swagger; DO NOT EDIT.

package domain_safe_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain safe tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new domain safe tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new domain safe tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for domain safe tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SafeContactCreate(params *SafeContactCreateParams, opts ...ClientOption) (*SafeContactCreateOK, error)

	SafeContactInfo(params *SafeContactInfoParams, opts ...ClientOption) (*SafeContactInfoOK, error)

	SafeContactList(params *SafeContactListParams, opts ...ClientOption) (*SafeContactListOK, error)

	SafeContactUpdate(params *SafeContactUpdateParams, opts ...ClientOption) (*SafeContactUpdateOK, error)

	SafeObjectCreate(params *SafeObjectCreateParams, opts ...ClientOption) (*SafeObjectCreateOK, error)

	SafeObjectDelete(params *SafeObjectDeleteParams, opts ...ClientOption) (*SafeObjectDeleteOK, error)

	SafeObjectList(params *SafeObjectListParams, opts ...ClientOption) (*SafeObjectListOK, error)

	SafeUserCreate(params *SafeUserCreateParams, opts ...ClientOption) (*SafeUserCreateOK, error)

	SafeUserDelete(params *SafeUserDeleteParams, opts ...ClientOption) (*SafeUserDeleteOK, error)

	SafeUserUpdate(params *SafeUserUpdateParams, opts ...ClientOption) (*SafeUserUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SafeContactCreate saves contact create 0621

Creating a new DomainSafe Contact.
*/
func (a *Client) SafeContactCreate(params *SafeContactCreateParams, opts ...ClientOption) (*SafeContactCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeContactCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeContactCreate",
		Method:             "POST",
		PathPattern:        "/domainSafeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeContactCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeContactCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeContactCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeContactInfo saves contact info 0624

Inquiring the data for the specified safeContact.
*/
func (a *Client) SafeContactInfo(params *SafeContactInfoParams, opts ...ClientOption) (*SafeContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeContactInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeContactInfo",
		Method:             "GET",
		PathPattern:        "/domainSafeContact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeContactInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeContactInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeContactInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeContactList saves contact list 0624

Inquiring a list of Domain Safe contacts with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: name, created, updated.
*/
func (a *Client) SafeContactList(params *SafeContactListParams, opts ...ClientOption) (*SafeContactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeContactListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeContactList",
		Method:             "POST",
		PathPattern:        "/domainSafeContact/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeContactListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeContactListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeContactList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeContactUpdate saves contact update 0622

Updating an existing DomainSafe contact.
*/
func (a *Client) SafeContactUpdate(params *SafeContactUpdateParams, opts ...ClientOption) (*SafeContactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeContactUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeContactUpdate",
		Method:             "PUT",
		PathPattern:        "/domainSafeContact/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeContactUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeContactUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeContactUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeObjectCreate saves object create 0601

Creating a new SafeObject.
*/
func (a *Client) SafeObjectCreate(params *SafeObjectCreateParams, opts ...ClientOption) (*SafeObjectCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeObjectCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeObjectCreate",
		Method:             "POST",
		PathPattern:        "/domainSafeObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeObjectCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeObjectCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeObjectCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeObjectDelete saves object delete 0603

Deleting an existing safeObject.
*/
func (a *Client) SafeObjectDelete(params *SafeObjectDeleteParams, opts ...ClientOption) (*SafeObjectDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeObjectDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeObjectDelete",
		Method:             "DELETE",
		PathPattern:        "/domainSafeObject/{safeObject}/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeObjectDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeObjectDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeObjectDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeObjectList saves object list 0604

Inquiring a list of DomanSafe objects with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: created, updated.
*/
func (a *Client) SafeObjectList(params *SafeObjectListParams, opts ...ClientOption) (*SafeObjectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeObjectListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeObjectList",
		Method:             "POST",
		PathPattern:        "/domainSafeObject/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeObjectListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeObjectListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeObjectList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeUserCreate saves user create 0622001

Creating a new DomainSafe user.
*/
func (a *Client) SafeUserCreate(params *SafeUserCreateParams, opts ...ClientOption) (*SafeUserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeUserCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeUserCreate",
		Method:             "POST",
		PathPattern:        "/domainSafeContact/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeUserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeUserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeUserCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeUserDelete saves user delete 0622003

Deleting an existing DomainSafe user.
*/
func (a *Client) SafeUserDelete(params *SafeUserDeleteParams, opts ...ClientOption) (*SafeUserDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeUserDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeUserDelete",
		Method:             "DELETE",
		PathPattern:        "/domainSafeContact/user/{user}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeUserDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeUserDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeUserDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SafeUserUpdate saves user update 0622002

Updating an existing DomainSafe user.
*/
func (a *Client) SafeUserUpdate(params *SafeUserUpdateParams, opts ...ClientOption) (*SafeUserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafeUserUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safeUserUpdate",
		Method:             "PUT",
		PathPattern:        "/domainSafeContact/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafeUserUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafeUserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safeUserUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
