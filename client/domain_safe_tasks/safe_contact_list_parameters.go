// Code generated by go-swagger; DO NOT EDIT.

package domain_safe_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hostwithquantum/internetx-autodns-go/models"
)

// NewSafeContactListParams creates a new SafeContactListParams object
// with the default values initialized.
func NewSafeContactListParams() *SafeContactListParams {
	var ()
	return &SafeContactListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSafeContactListParamsWithTimeout creates a new SafeContactListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSafeContactListParamsWithTimeout(timeout time.Duration) *SafeContactListParams {
	var ()
	return &SafeContactListParams{

		timeout: timeout,
	}
}

// NewSafeContactListParamsWithContext creates a new SafeContactListParams object
// with the default values initialized, and the ability to set a context for a request
func NewSafeContactListParamsWithContext(ctx context.Context) *SafeContactListParams {
	var ()
	return &SafeContactListParams{

		Context: ctx,
	}
}

// NewSafeContactListParamsWithHTTPClient creates a new SafeContactListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSafeContactListParamsWithHTTPClient(client *http.Client) *SafeContactListParams {
	var ()
	return &SafeContactListParams{
		HTTPClient: client,
	}
}

/*SafeContactListParams contains all the parameters to send to the API endpoint
for the safe contact list operation typically these are written to a http.Request
*/
type SafeContactListParams struct {

	/*Body
	  query

	*/
	Body *models.Query
	/*Keys
	  The query parameter to fetch additional details.

	*/
	Keys []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the safe contact list params
func (o *SafeContactListParams) WithTimeout(timeout time.Duration) *SafeContactListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the safe contact list params
func (o *SafeContactListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the safe contact list params
func (o *SafeContactListParams) WithContext(ctx context.Context) *SafeContactListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the safe contact list params
func (o *SafeContactListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the safe contact list params
func (o *SafeContactListParams) WithHTTPClient(client *http.Client) *SafeContactListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the safe contact list params
func (o *SafeContactListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the safe contact list params
func (o *SafeContactListParams) WithBody(body *models.Query) *SafeContactListParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the safe contact list params
func (o *SafeContactListParams) SetBody(body *models.Query) {
	o.Body = body
}

// WithKeys adds the keys to the safe contact list params
func (o *SafeContactListParams) WithKeys(keys []string) *SafeContactListParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the safe contact list params
func (o *SafeContactListParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WriteToRequest writes these params to a swagger request
func (o *SafeContactListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	valuesKeys := o.Keys

	joinedKeys := swag.JoinByFormat(valuesKeys, "multi")
	// query array param keys
	if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
