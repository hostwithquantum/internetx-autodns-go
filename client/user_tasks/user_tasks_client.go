// Code generated by go-swagger; DO NOT EDIT.

package user_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	UserBillingObjectTermsInfo(params *UserBillingObjectTermsInfoParams) (*UserBillingObjectTermsInfoOK, error)

	NewPassword(params *NewPasswordParams) (*NewPasswordOK, error)

	NewPasswordVerify(params *NewPasswordVerifyParams) (*NewPasswordVerifyOK, error)

	ServiceUserProfilInfo(params *ServiceUserProfilInfoParams) (*ServiceUserProfilInfoOK, error)

	ServiceUserProfilInfoWithPrefix(params *ServiceUserProfilInfoWithPrefixParams) (*ServiceUserProfilInfoWithPrefixOK, error)

	ServiceUserProfileUpdate(params *ServiceUserProfileUpdateParams) (*ServiceUserProfileUpdateOK, error)

	UserACLInfo(params *UserACLInfoParams) (*UserACLInfoOK, error)

	UserACLUpdate(params *UserACLUpdateParams) (*UserACLUpdateOK, error)

	UserBillingLimitInfo(params *UserBillingLimitInfoParams) (*UserBillingLimitInfoOK, error)

	UserConfirmVerification(params *UserConfirmVerificationParams) (*UserConfirmVerificationOK, error)

	UserCopy(params *UserCopyParams) (*UserCopyOK, error)

	UserCreate(params *UserCreateParams) (*UserCreateOK, error)

	UserDelete(params *UserDeleteParams) (*UserDeleteOK, error)

	UserInfo(params *UserInfoParams) (*UserInfoOK, error)

	UserList(params *UserListParams) (*UserListOK, error)

	UserProfileInfo(params *UserProfileInfoParams) (*UserProfileInfoOK, error)

	UserProfileInfoWithPrefix(params *UserProfileInfoWithPrefixParams) (*UserProfileInfoWithPrefixOK, error)

	UserProfileUpdate(params *UserProfileUpdateParams) (*UserProfileUpdateOK, error)

	UserSSOVerification(params *UserSSOVerificationParams) (*UserSSOVerificationOK, error)

	UserUpdate(params *UserUpdateParams) (*UserUpdateOK, error)

	UserUpdateLock(params *UserUpdateLockParams) (*UserUpdateLockOK, error)

	UserUpdateUnlock(params *UserUpdateUnlockParams) (*UserUpdateUnlockOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  UserBillingObjectTermsInfo billings object terms info

  Inquiring the terms of the contact for the logged in user.
*/
func (a *Client) UserBillingObjectTermsInfo(params *UserBillingObjectTermsInfoParams) (*UserBillingObjectTermsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserBillingObjectTermsInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserBillingObjectTermsInfo",
		Method:             "GET",
		PathPattern:        "/user/billingterm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserBillingObjectTermsInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserBillingObjectTermsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserBillingObjectTermsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewPassword news password

  This route is for setting a new password for a user.
*/
func (a *Client) NewPassword(params *NewPasswordParams) (*NewPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newPassword",
		Method:             "PUT",
		PathPattern:        "/user/_newPassword?token={token}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewPasswordVerify news password verify

  Verifying a passwort change request
*/
func (a *Client) NewPasswordVerify(params *NewPasswordVerifyParams) (*NewPasswordVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewPasswordVerifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newPasswordVerify",
		Method:             "GET",
		PathPattern:        "/user/_newPasswordVerify?token={token}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewPasswordVerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewPasswordVerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newPasswordVerify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceUserProfilInfo services user profile info

  Inquiring the service user profile for the specified user.
*/
func (a *Client) ServiceUserProfilInfo(params *ServiceUserProfilInfoParams) (*ServiceUserProfilInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUserProfilInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceUserProfilInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/serviceProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceUserProfilInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUserProfilInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceUserProfilInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceUserProfilInfoWithPrefix services user profile

  Inquiring the service user profile for the specified user.
*/
func (a *Client) ServiceUserProfilInfoWithPrefix(params *ServiceUserProfilInfoWithPrefixParams) (*ServiceUserProfilInfoWithPrefixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUserProfilInfoWithPrefixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceUserProfilInfoWithPrefix",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/serviceProfile/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceUserProfilInfoWithPrefixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUserProfilInfoWithPrefixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceUserProfilInfoWithPrefix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceUserProfileUpdate services user profile update

  Updating the service user profile for the specified user.
*/
func (a *Client) ServiceUserProfileUpdate(params *ServiceUserProfileUpdateParams) (*ServiceUserProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUserProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serviceUserProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/serviceProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceUserProfileUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUserProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceUserProfileUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserACLInfo users ACL info

  Inquiring the ACL data for the specified user.
*/
func (a *Client) UserACLInfo(params *UserACLInfoParams) (*UserACLInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserACLInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userAclInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserACLInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserACLInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userAclInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserACLUpdate ACLs update

  Updating the ACLs for the specified user.
*/
func (a *Client) UserACLUpdate(params *UserACLUpdateParams) (*UserACLUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserACLUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userAclUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserACLUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserACLUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userAclUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserBillingLimitInfo billings object limit info

  Inquiring the billing limit data for the logged in user.
*/
func (a *Client) UserBillingLimitInfo(params *UserBillingLimitInfoParams) (*UserBillingLimitInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserBillingLimitInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userBillingLimitInfo",
		Method:             "GET",
		PathPattern:        "/user/billinglimit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserBillingLimitInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserBillingLimitInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userBillingLimitInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserConfirmVerification users action verify

  Applying a verification code for an user action.
*/
func (a *Client) UserConfirmVerification(params *UserConfirmVerificationParams) (*UserConfirmVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserConfirmVerificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userConfirmVerification",
		Method:             "GET",
		PathPattern:        "/user/_verify/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserConfirmVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserConfirmVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userConfirmVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserCopy users copy

  Copying an existing user.
*/
func (a *Client) UserCopy(params *UserCopyParams) (*UserCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCopy",
		Method:             "POST",
		PathPattern:        "/user/{name}/{context}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserCreate users create

  Creating a new user.
*/
func (a *Client) UserCreate(params *UserCreateParams) (*UserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCreate",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserDelete users delete

  Deleting an existing user.
*/
func (a *Client) UserDelete(params *UserDeleteParams) (*UserDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userDelete",
		Method:             "DELETE",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserInfo users info

  Inquiring the data for the specified user.
*/
func (a *Client) UserInfo(params *UserInfoParams) (*UserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserList users list

  Inquiring a list of users with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) UserList(params *UserListParams) (*UserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userList",
		Method:             "POST",
		PathPattern:        "/user/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileInfo users profile info

  Inquiring the user profile of the specified user.
*/
func (a *Client) UserProfileInfo(params *UserProfileInfoParams) (*UserProfileInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userProfileInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileInfoWithPrefix users profile info

  Inquiring the user profile of the specified user.
*/
func (a *Client) UserProfileInfoWithPrefix(params *UserProfileInfoWithPrefixParams) (*UserProfileInfoWithPrefixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileInfoWithPrefixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userProfileInfoWithPrefix",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/profile/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileInfoWithPrefixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileInfoWithPrefixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileInfoWithPrefix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileUpdate users profile update

  Updating the profile of the specified user.
*/
func (a *Client) UserProfileUpdate(params *UserProfileUpdateParams) (*UserProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserSSOVerification s s o action verify

  Applying a verification code for a signle sign on.
*/
func (a *Client) UserSSOVerification(params *UserSSOVerificationParams) (*UserSSOVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSSOVerificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userSSOVerification",
		Method:             "GET",
		PathPattern:        "/user/_sso/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSSOVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserSSOVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userSSOVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserUpdate users update

  Updating an existing user.
*/
func (a *Client) UserUpdate(params *UserUpdateParams) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserUpdateLock users update lock

  Updating an existing user to lock him.
*/
func (a *Client) UserUpdateLock(params *UserUpdateLockParams) (*UserUpdateLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUpdateLock",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/_lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateLockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateLockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdateLock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserUpdateUnlock updates user unlock

  Updating an an existing user to unlock him.
*/
func (a *Client) UserUpdateUnlock(params *UserUpdateUnlockParams) (*UserUpdateUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateUnlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUpdateUnlock",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/_unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdateUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
