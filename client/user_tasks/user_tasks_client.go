// Code generated by go-swagger; DO NOT EDIT.

package user_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new user tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new user tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new user tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for user tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	UserBillingObjectTermsInfo(params *UserBillingObjectTermsInfoParams, opts ...ClientOption) (*UserBillingObjectTermsInfoOK, error)

	EmailConfirmVerification(params *EmailConfirmVerificationParams, opts ...ClientOption) (*EmailConfirmVerificationOK, error)

	NewPassword(params *NewPasswordParams, opts ...ClientOption) (*NewPasswordOK, error)

	NewPasswordVerify(params *NewPasswordVerifyParams, opts ...ClientOption) (*NewPasswordVerifyOK, error)

	ServiceUserProfileUpdate(params *ServiceUserProfileUpdateParams, opts ...ClientOption) (*ServiceUserProfileUpdateOK, error)

	UserACLInfo(params *UserACLInfoParams, opts ...ClientOption) (*UserACLInfoOK, error)

	UserACLUpdate(params *UserACLUpdateParams, opts ...ClientOption) (*UserACLUpdateOK, error)

	UserBillingLimitInfo(params *UserBillingLimitInfoParams, opts ...ClientOption) (*UserBillingLimitInfoOK, error)

	UserConfirmVerification(params *UserConfirmVerificationParams, opts ...ClientOption) (*UserConfirmVerificationOK, error)

	UserCopy(params *UserCopyParams, opts ...ClientOption) (*UserCopyOK, error)

	UserCreate(params *UserCreateParams, opts ...ClientOption) (*UserCreateOK, error)

	UserDelete(params *UserDeleteParams, opts ...ClientOption) (*UserDeleteOK, error)

	UserDocumentUpload(params *UserDocumentUploadParams, opts ...ClientOption) (*UserDocumentUploadOK, error)

	UserInfo(params *UserInfoParams, opts ...ClientOption) (*UserInfoOK, error)

	UserList(params *UserListParams, opts ...ClientOption) (*UserListOK, error)

	UserProfileInfo(params *UserProfileInfoParams, opts ...ClientOption) (*UserProfileInfoOK, error)

	UserProfileInfoWithPrefix(params *UserProfileInfoWithPrefixParams, opts ...ClientOption) (*UserProfileInfoWithPrefixOK, error)

	UserProfileUpdate(params *UserProfileUpdateParams, opts ...ClientOption) (*UserProfileUpdateOK, error)

	UserSSOVerification(params *UserSSOVerificationParams, opts ...ClientOption) (*UserSSOVerificationOK, error)

	UserUpdate(params *UserUpdateParams, opts ...ClientOption) (*UserUpdateOK, error)

	UserUpdateLock(params *UserUpdateLockParams, opts ...ClientOption) (*UserUpdateLockOK, error)

	UserUpdateResendInvite(params *UserUpdateResendInviteParams, opts ...ClientOption) (*UserUpdateResendInviteOK, error)

	UserUpdateUnlock(params *UserUpdateUnlockParams, opts ...ClientOption) (*UserUpdateUnlockOK, error)

	UserVerificationCreate(params *UserVerificationCreateParams, opts ...ClientOption) (*UserVerificationCreateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UserBillingObjectTermsInfo billings object terms info 09994

Inquiring the terms of the contact for the logged in user.
*/
func (a *Client) UserBillingObjectTermsInfo(params *UserBillingObjectTermsInfoParams, opts ...ClientOption) (*UserBillingObjectTermsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserBillingObjectTermsInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserBillingObjectTermsInfo",
		Method:             "GET",
		PathPattern:        "/user/billingterm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserBillingObjectTermsInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserBillingObjectTermsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserBillingObjectTermsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailConfirmVerification emails action verify

Applying a verification code for an email address.
*/
func (a *Client) EmailConfirmVerification(params *EmailConfirmVerificationParams, opts ...ClientOption) (*EmailConfirmVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailConfirmVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "emailConfirmVerification",
		Method:             "GET",
		PathPattern:        "/email/_verify/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailConfirmVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailConfirmVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for emailConfirmVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NewPassword news password

This route is for setting a new password for a user.
*/
func (a *Client) NewPassword(params *NewPasswordParams, opts ...ClientOption) (*NewPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "newPassword",
		Method:             "PUT",
		PathPattern:        "/user/_newPassword?token={token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NewPasswordVerify news password verify

Verifying a passwort change request
*/
func (a *Client) NewPasswordVerify(params *NewPasswordVerifyParams, opts ...ClientOption) (*NewPasswordVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewPasswordVerifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "newPasswordVerify",
		Method:             "GET",
		PathPattern:        "/user/_newPasswordVerify?token={token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewPasswordVerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewPasswordVerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newPasswordVerify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceUserProfileUpdate services user profile update 1301052

Updating the service user profile for the specified user.
*/
func (a *Client) ServiceUserProfileUpdate(params *ServiceUserProfileUpdateParams, opts ...ClientOption) (*ServiceUserProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUserProfileUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceUserProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/serviceProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceUserProfileUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUserProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceUserProfileUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserACLInfo users ACL info 1301024

Inquiring the ACL data for the specified user.
*/
func (a *Client) UserACLInfo(params *UserACLInfoParams, opts ...ClientOption) (*UserACLInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserACLInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userAclInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserACLInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserACLInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userAclInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserACLUpdate ACLs update 1301022

Updating the ACLs for the specified user.
*/
func (a *Client) UserACLUpdate(params *UserACLUpdateParams, opts ...ClientOption) (*UserACLUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserACLUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userAclUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserACLUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserACLUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userAclUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserBillingLimitInfo billings object limit info 01144

Inquiring the billing limit data for the logged in user.
*/
func (a *Client) UserBillingLimitInfo(params *UserBillingLimitInfoParams, opts ...ClientOption) (*UserBillingLimitInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserBillingLimitInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userBillingLimitInfo",
		Method:             "GET",
		PathPattern:        "/user/billinglimit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserBillingLimitInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserBillingLimitInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userBillingLimitInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserConfirmVerification users action verify

Applying a verification code for an user action.
*/
func (a *Client) UserConfirmVerification(params *UserConfirmVerificationParams, opts ...ClientOption) (*UserConfirmVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserConfirmVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userConfirmVerification",
		Method:             "GET",
		PathPattern:        "/user/_verify/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserConfirmVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserConfirmVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userConfirmVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserCopy users copy 1301016

Copying an existing user.
*/
func (a *Client) UserCopy(params *UserCopyParams, opts ...ClientOption) (*UserCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userCopy",
		Method:             "POST",
		PathPattern:        "/user/{name}/{context}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserCreate users create 1301001

Creating a new user.
*/
func (a *Client) UserCreate(params *UserCreateParams, opts ...ClientOption) (*UserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userCreate",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserDelete users delete 1301003

Deleting an existing user.
*/
func (a *Client) UserDelete(params *UserDeleteParams, opts ...ClientOption) (*UserDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userDelete",
		Method:             "DELETE",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserDocumentUpload uploads image

Uploading an image to the user profile as a specific key.
*/
func (a *Client) UserDocumentUpload(params *UserDocumentUploadParams, opts ...ClientOption) (*UserDocumentUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDocumentUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userDocumentUpload",
		Method:             "POST",
		PathPattern:        "/user/{name}/{context}/document/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserDocumentUploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDocumentUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userDocumentUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserInfo users info 1301004

Inquiring the data for the specified user.
*/
func (a *Client) UserInfo(params *UserInfoParams, opts ...ClientOption) (*UserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserList users list 1301004

Inquiring a list of users with certain details. The data to be displayed can be extended per url paremeter.
*/
func (a *Client) UserList(params *UserListParams, opts ...ClientOption) (*UserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userList",
		Method:             "POST",
		PathPattern:        "/user/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserProfileInfo users profile info 1301017

Inquiring the user profile of the specified user.
*/
func (a *Client) UserProfileInfo(params *UserProfileInfoParams, opts ...ClientOption) (*UserProfileInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userProfileInfo",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserProfileInfoWithPrefix users profile info 1301017

Inquiring the user profile of the specified user.
*/
func (a *Client) UserProfileInfoWithPrefix(params *UserProfileInfoWithPrefixParams, opts ...ClientOption) (*UserProfileInfoWithPrefixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileInfoWithPrefixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userProfileInfoWithPrefix",
		Method:             "GET",
		PathPattern:        "/user/{name}/{context}/profile/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileInfoWithPrefixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileInfoWithPrefixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileInfoWithPrefix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserProfileUpdate users profile update 1301014

Updating the profile of the specified user.
*/
func (a *Client) UserProfileUpdate(params *UserProfileUpdateParams, opts ...ClientOption) (*UserProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userProfileUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userProfileUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserSSOVerification s s o action verify

Applying a verification code for a signle sign on.
*/
func (a *Client) UserSSOVerification(params *UserSSOVerificationParams, opts ...ClientOption) (*UserSSOVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSSOVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userSSOVerification",
		Method:             "GET",
		PathPattern:        "/user/_sso/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSSOVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserSSOVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userSSOVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserUpdate users update 1301002

Updating an existing user.
*/
func (a *Client) UserUpdate(params *UserUpdateParams, opts ...ClientOption) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userUpdate",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserUpdateLock users update lock 1301002

Updating an existing user to lock him.
*/
func (a *Client) UserUpdateLock(params *UserUpdateLockParams, opts ...ClientOption) (*UserUpdateLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateLockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userUpdateLock",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/_lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateLockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateLockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdateLock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserUpdateResendInvite users update resend invite 1301002

Invokes the resending of an invite for an invite user.
*/
func (a *Client) UserUpdateResendInvite(params *UserUpdateResendInviteParams, opts ...ClientOption) (*UserUpdateResendInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateResendInviteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userUpdateResendInvite",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/_resendInvite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateResendInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateResendInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdateResendInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserUpdateUnlock updates user unlock 1301002

Updating an an existing user to unlock him.
*/
func (a *Client) UserUpdateUnlock(params *UserUpdateUnlockParams, opts ...ClientOption) (*UserUpdateUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateUnlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userUpdateUnlock",
		Method:             "PUT",
		PathPattern:        "/user/{name}/{context}/_unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdateUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserVerificationCreate users verification create 1321011
*/
func (a *Client) UserVerificationCreate(params *UserVerificationCreateParams, opts ...ClientOption) (*UserVerificationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserVerificationCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "userVerificationCreate",
		Method:             "POST",
		PathPattern:        "/user/{name}/{context}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserVerificationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserVerificationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userVerificationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
