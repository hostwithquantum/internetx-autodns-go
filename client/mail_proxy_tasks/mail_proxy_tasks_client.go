// Code generated by go-swagger; DO NOT EDIT.

package mail_proxy_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new mail proxy tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new mail proxy tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new mail proxy tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for mail proxy tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MailProxyCreate(params *MailProxyCreateParams, opts ...ClientOption) (*MailProxyCreateOK, error)

	MailProxyCreates(params *MailProxyCreatesParams, opts ...ClientOption) (*MailProxyCreatesOK, error)

	MailProxyDelete(params *MailProxyDeleteParams, opts ...ClientOption) (*MailProxyDeleteOK, error)

	MailProxyDeletes(params *MailProxyDeletesParams, opts ...ClientOption) (*MailProxyDeletesOK, error)

	MailProxyInfo(params *MailProxyInfoParams, opts ...ClientOption) (*MailProxyInfoOK, error)

	MailProxyList(params *MailProxyListParams, opts ...ClientOption) (*MailProxyListOK, error)

	MailProxyPatches(params *MailProxyPatchesParams, opts ...ClientOption) (*MailProxyPatchesOK, error)

	MailProxyUpdate(params *MailProxyUpdateParams, opts ...ClientOption) (*MailProxyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
MailProxyCreate mails proxy create 0511

Creating a new mailproxy.
*/
func (a *Client) MailProxyCreate(params *MailProxyCreateParams, opts ...ClientOption) (*MailProxyCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyCreate",
		Method:             "POST",
		PathPattern:        "/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyCreates mails proxy create bulk 0511

Creating several new MailProxys with one request.
*/
func (a *Client) MailProxyCreates(params *MailProxyCreatesParams, opts ...ClientOption) (*MailProxyCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyCreates",
		Method:             "POST",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyDelete mails proxy delete 0513

Deleting an existing mail proxy.
*/
func (a *Client) MailProxyDelete(params *MailProxyDeleteParams, opts ...ClientOption) (*MailProxyDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyDelete",
		Method:             "DELETE",
		PathPattern:        "/mailProxy/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyDeletes mails proxy delete bulk 0513

Deleting several new MailProxys with one request.
*/
func (a *Client) MailProxyDeletes(params *MailProxyDeletesParams, opts ...ClientOption) (*MailProxyDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyInfo mails proxy info 0514

Inquiring the data for the specified mail proxy.
*/
func (a *Client) MailProxyInfo(params *MailProxyInfoParams, opts ...ClientOption) (*MailProxyInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyInfo",
		Method:             "GET",
		PathPattern:        "/mailProxy/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyList mails proxy list 0514

Inquiring a list of MailProxies with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: target, admin, protection, created, updated.
*/
func (a *Client) MailProxyList(params *MailProxyListParams, opts ...ClientOption) (*MailProxyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyList",
		Method:             "POST",
		PathPattern:        "/mailProxy/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyPatches mails proxy update bulk 0512

Updating several new MailProxys with one request.
*/
func (a *Client) MailProxyPatches(params *MailProxyPatchesParams, opts ...ClientOption) (*MailProxyPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailProxyUpdate mails proxy update 0512

Updating an existing mailproxy.
*/
func (a *Client) MailProxyUpdate(params *MailProxyUpdateParams, opts ...ClientOption) (*MailProxyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mailProxyUpdate",
		Method:             "PUT",
		PathPattern:        "/mailProxy/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
