// Code generated by go-swagger; DO NOT EDIT.

package certificate_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CertificateCommentUpdate(params *CertificateCommentUpdateParams) (*CertificateCommentUpdateOK, error)

	CertificateCreate(params *CertificateCreateParams) (*CertificateCreateOK, error)

	CertificateDelete(params *CertificateDeleteParams) (*CertificateDeleteOK, error)

	CertificateList(params *CertificateListParams) (*CertificateListOK, error)

	CertificatePrepareOrder(params *CertificatePrepareOrderParams) (*CertificatePrepareOrderOK, error)

	CertificateRealtime(params *CertificateRealtimeParams) (*CertificateRealtimeOK, error)

	CertificateReissue(params *CertificateReissueParams) (*CertificateReissueOK, error)

	CertificateRenew(params *CertificateRenewParams) (*CertificateRenewOK, error)

	CertificateRevoke(params *CertificateRevokeParams) (*CertificateRevokeOK, error)

	Certificateinfo(params *CertificateinfoParams) (*CertificateinfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CertificateCommentUpdate certificates comment update

  Updating a comment for an existing certificate.
*/
func (a *Client) CertificateCommentUpdate(params *CertificateCommentUpdateParams) (*CertificateCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateCommentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateCommentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateCommentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateCreate certificates create

  Ordering a new certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateCreate(params *CertificateCreateParams) (*CertificateCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateCreate",
		Method:             "POST",
		PathPattern:        "/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateDelete certificates delete

  Deleting an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateDelete(params *CertificateDeleteParams) (*CertificateDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateDelete",
		Method:             "DELETE",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateList certificates list

  Inquiring a list of certificates with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: product, technical, orderId, created, admin, type, expire, domain, name, comment, id, updated, authentication.
*/
func (a *Client) CertificateList(params *CertificateListParams) (*CertificateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateList",
		Method:             "POST",
		PathPattern:        "/certificate/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificatePrepareOrder certificates order prepare

  Preparing a certificate order. This call checks the csr and generates authentication data required for further calls like order, renew, reissue, revoke, delete.
*/
func (a *Client) CertificatePrepareOrder(params *CertificatePrepareOrderParams) (*CertificatePrepareOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificatePrepareOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificatePrepareOrder",
		Method:             "POST",
		PathPattern:        "/certificate/_prepareOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificatePrepareOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificatePrepareOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificatePrepareOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateRealtime certificates realtime order

  Ordering or renewing a certificate in realtime. Only supported by a few certificate products!
*/
func (a *Client) CertificateRealtime(params *CertificateRealtimeParams) (*CertificateRealtimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateRealtimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateRealtime",
		Method:             "POST",
		PathPattern:        "/certificate/_realtime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateRealtimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateRealtimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateRealtime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateReissue certificates reissue

  Reissuing an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateReissue(params *CertificateReissueParams) (*CertificateReissueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateReissueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateReissue",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateReissueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateReissueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateReissue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateRenew certificates renew

  Renewin an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateRenew(params *CertificateRenewParams) (*CertificateRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateRenew",
		Method:             "PUT",
		PathPattern:        "/certificate/{id}/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateRenewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateRenew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CertificateRevoke certificates revoke

  Revoking an existing certificate. The operation is asynchronous and creates a job.
*/
func (a *Client) CertificateRevoke(params *CertificateRevokeParams) (*CertificateRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateRevoke",
		Method:             "DELETE",
		PathPattern:        "/certificate/{id}/_revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateRevokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Certificateinfo certificates info

  Inquiring the data for the specified certificate.
*/
func (a *Client) Certificateinfo(params *CertificateinfoParams) (*CertificateinfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCertificateinfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "certificateinfo",
		Method:             "GET",
		PathPattern:        "/certificate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CertificateinfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CertificateinfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificateinfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
