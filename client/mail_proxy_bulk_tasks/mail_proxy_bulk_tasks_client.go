// Code generated by go-swagger; DO NOT EDIT.

package mail_proxy_bulk_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mail proxy bulk tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mail proxy bulk tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	MailProxyCreates(params *MailProxyCreatesParams) (*MailProxyCreatesOK, error)

	MailProxyDeletes(params *MailProxyDeletesParams) (*MailProxyDeletesOK, error)

	MailProxyPatches(params *MailProxyPatchesParams) (*MailProxyPatchesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MailProxyCreates mails proxy create bulk

  Creating several new MailProxys with one request.
*/
func (a *Client) MailProxyCreates(params *MailProxyCreatesParams) (*MailProxyCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyCreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mailProxyCreates",
		Method:             "POST",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MailProxyDeletes mails proxy delete bulk

  Deleting several new MailProxys with one request.
*/
func (a *Client) MailProxyDeletes(params *MailProxyDeletesParams) (*MailProxyDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyDeletesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mailProxyDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MailProxyPatches mails proxy update bulk

  Updating several new MailProxys with one request.
*/
func (a *Client) MailProxyPatches(params *MailProxyPatchesParams) (*MailProxyPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailProxyPatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mailProxyPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/mailProxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailProxyPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailProxyPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mailProxyPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
