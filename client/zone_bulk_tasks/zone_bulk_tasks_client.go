// Code generated by go-swagger; DO NOT EDIT.

package zone_bulk_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zone bulk tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zone bulk tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ZoneBulkPatches(params *ZoneBulkPatchesParams) (*ZoneBulkPatchesOK, error)

	ZoneCreates(params *ZoneCreatesParams) (*ZoneCreatesOK, error)

	ZoneDeletes(params *ZoneDeletesParams) (*ZoneDeletesOK, error)

	ZoneImports(params *ZoneImportsParams) (*ZoneImportsOK, error)

	ZoneUpdateComments(params *ZoneUpdateCommentsParams) (*ZoneUpdateCommentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ZoneBulkPatches updates zones

  Update existings zone.
*/
func (a *Client) ZoneBulkPatches(params *ZoneBulkPatchesParams) (*ZoneBulkPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneBulkPatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneBulkPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneBulkPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneBulkPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneBulkPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneCreates creates zones

  Create a zone.
*/
func (a *Client) ZoneCreates(params *ZoneCreatesParams) (*ZoneCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneCreatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneCreates",
		Method:             "POST",
		PathPattern:        "/bulk/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneDeletes deletes zones

  Delete an existing zone.
*/
func (a *Client) ZoneDeletes(params *ZoneDeletesParams) (*ZoneDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneDeletesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneImports imports zones

  Import the specified zone.
*/
func (a *Client) ZoneImports(params *ZoneImportsParams) (*ZoneImportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneImportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneImports",
		Method:             "POST",
		PathPattern:        "/bulk/zone/_import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneImportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneImportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneImports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ZoneUpdateComments updates zone comment

  Update an existing zone.
*/
func (a *Client) ZoneUpdateComments(params *ZoneUpdateCommentsParams) (*ZoneUpdateCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZoneUpdateCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "zoneUpdateComments",
		Method:             "PUT",
		PathPattern:        "/bulk/zone/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZoneUpdateCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZoneUpdateCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zoneUpdateComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
