// Code generated by go-swagger; DO NOT EDIT.

package domain_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AuthinfoSend(params *AuthinfoSendParams) (*AuthinfoSendOK, error)

	AutoDnssecKeyRollover(params *AutoDnssecKeyRolloverParams) (*AutoDnssecKeyRolloverOK, error)

	DomainAuthinfo1Create(params *DomainAuthinfo1CreateParams) (*DomainAuthinfo1CreateOK, error)

	DomainAuthinfo1Delete(params *DomainAuthinfo1DeleteParams) (*DomainAuthinfo1DeleteOK, error)

	DomainAuthinfo2Create(params *DomainAuthinfo2CreateParams) (*DomainAuthinfo2CreateOK, error)

	DomainBuy(params *DomainBuyParams) (*DomainBuyOK, error)

	DomainCancelationCreate(params *DomainCancelationCreateParams) (*DomainCancelationCreateOK, error)

	DomainCancelationDelete(params *DomainCancelationDeleteParams) (*DomainCancelationDeleteOK, error)

	DomainCancelationInfo(params *DomainCancelationInfoParams) (*DomainCancelationInfoOK, error)

	DomainCancelationList(params *DomainCancelationListParams) (*DomainCancelationListOK, error)

	DomainCancelationUpdate(params *DomainCancelationUpdateParams) (*DomainCancelationUpdateOK, error)

	DomainCommentUpdate(params *DomainCommentUpdateParams) (*DomainCommentUpdateOK, error)

	DomainCreate(params *DomainCreateParams) (*DomainCreateOK, error)

	DomainInfo(params *DomainInfoParams) (*DomainInfoOK, error)

	DomainList(params *DomainListParams) (*DomainListOK, error)

	DomainOwnerChange(params *DomainOwnerChangeParams) (*DomainOwnerChangeOK, error)

	DomainRenew(params *DomainRenewParams) (*DomainRenewOK, error)

	DomainRestore(params *DomainRestoreParams) (*DomainRestoreOK, error)

	DomainRestoreList(params *DomainRestoreListParams) (*DomainRestoreListOK, error)

	DomainServicesUpdate(params *DomainServicesUpdateParams) (*DomainServicesUpdateOK, error)

	DomainStatusUpdate(params *DomainStatusUpdateParams) (*DomainStatusUpdateOK, error)

	DomainTransfer(params *DomainTransferParams) (*DomainTransferOK, error)

	DomainUpdate(params *DomainUpdateParams) (*DomainUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuthinfoSend auths info send

  Sending the AuthInfo for the specified domain to the domain owner.
*/
func (a *Client) AuthinfoSend(params *AuthinfoSendParams) (*AuthinfoSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthinfoSendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authinfoSend",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_sendAuthinfoToOwnerc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthinfoSendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthinfoSendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authinfoSend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AutoDnssecKeyRollover autos DNS sec key rollover

  Invoking an AutoDNSSec key rollover. Note the AutoDNSSec feature must be enabled for the domain
*/
func (a *Client) AutoDnssecKeyRollover(params *AutoDnssecKeyRolloverParams) (*AutoDnssecKeyRolloverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoDnssecKeyRolloverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "autoDnssecKeyRollover",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_autoDnssecKeyRollover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoDnssecKeyRolloverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoDnssecKeyRolloverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for autoDnssecKeyRollover: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainAuthinfo1Create authinfos create

  Creating an AuthInfo 1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Create(params *DomainAuthinfo1CreateParams) (*DomainAuthinfo1CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo1Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo1CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo1Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainAuthinfo1Delete authinfos delete

  Deleting an existing AuthInfo1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Delete(params *DomainAuthinfo1DeleteParams) (*DomainAuthinfo1DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1DeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo1Delete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo1DeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo1Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainAuthinfo2Create authinfo2s create

  Creating an AuthInfo 2 for the specified domain.
*/
func (a *Client) DomainAuthinfo2Create(params *DomainAuthinfo2CreateParams) (*DomainAuthinfo2CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo2CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainAuthinfo2Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo2CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo2CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo2Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainBuy domains buy order

  Buying a domain from the premium market. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainBuy(params *DomainBuyParams) (*DomainBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainBuyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainBuy",
		Method:             "POST",
		PathPattern:        "/domain/_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainBuyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainBuy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationCreate domains cancelation create

  Creating a cancelation for the specified domain.
*/
func (a *Client) DomainCancelationCreate(params *DomainCancelationCreateParams) (*DomainCancelationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationCreate",
		Method:             "POST",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationDelete domains cancelation delete

  Deleting an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationDelete(params *DomainCancelationDeleteParams) (*DomainCancelationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationDelete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationInfo domains cancelation info

  Inquiring the cancelation data for the specified domain.
*/
func (a *Client) DomainCancelationInfo(params *DomainCancelationInfoParams) (*DomainCancelationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationList domains cancelation list

  Inquiring a list of cancelations with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: disconnect, execdate, ctid, created, registryStatus, sld, type, tld, subtld, gainingRegistrar, updated.
*/
func (a *Client) DomainCancelationList(params *DomainCancelationListParams) (*DomainCancelationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationList",
		Method:             "POST",
		PathPattern:        "/domain/cancelation/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCancelationUpdate domains cancelation update

  Updating an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationUpdate(params *DomainCancelationUpdateParams) (*DomainCancelationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCancelationUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCommentUpdate domains comment update

  Updating a comment for an existing domain.
*/
func (a *Client) DomainCommentUpdate(params *DomainCommentUpdateParams) (*DomainCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCommentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCommentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCommentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainCreate domains create

  Ordering a new domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainCreate(params *DomainCreateParams) (*DomainCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainCreate",
		Method:             "POST",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainInfo domains info

  Inquiring the data for the specified domain.
*/
func (a *Client) DomainInfo(params *DomainInfoParams) (*DomainInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainList domains list

  Inquiring a list of domains with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: sld, subtld, tld, status, authinfo, expire, comment, ownerc, updated, zonec, nserver, techc, adminc,  certificate, created, autorenew.
*/
func (a *Client) DomainList(params *DomainListParams) (*DomainListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainList",
		Method:             "POST",
		PathPattern:        "/domain/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainOwnerChange domains owner change

  Changing the ownerc of an existing domain.
*/
func (a *Client) DomainOwnerChange(params *DomainOwnerChangeParams) (*DomainOwnerChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainOwnerChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainOwnerChange",
		Method:             "POST",
		PathPattern:        "/domain/_ownerChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainOwnerChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainOwnerChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainOwnerChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainRenew domains renew

  Renewing an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainRenew(params *DomainRenewParams) (*DomainRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRenew",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRenewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRenew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainRestore domains restore

  Restoring an existing domain.
*/
func (a *Client) DomainRestore(params *DomainRestoreParams) (*DomainRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRestore",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainRestoreList domains restore list

  Inquiring a list of restorable domains with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: parking, certificate, adminc, cancelation, action, zonec, nserver, techc, nsentry, dnssec, period, created, sld, tld, subtld, deleted, autorenew, expire, domainsafe, comment, ownerc, updated, remarks, authinfo, status.
*/
func (a *Client) DomainRestoreList(params *DomainRestoreListParams) (*DomainRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainRestoreList",
		Method:             "POST",
		PathPattern:        "/domain/restore/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoreListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestoreList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainServicesUpdate domains services update

  Updating the services of a domain.
*/
func (a *Client) DomainServicesUpdate(params *DomainServicesUpdateParams) (*DomainServicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainServicesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainServicesUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/_services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainServicesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainServicesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainServicesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainStatusUpdate domains status update

  Updating the registry status for an existing domain.
*/
func (a *Client) DomainStatusUpdate(params *DomainStatusUpdateParams) (*DomainStatusUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainStatusUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainStatusUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_statusUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainStatusUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainStatusUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainStatusUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainTransfer domains transfer

  Transfering a domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainTransfer(params *DomainTransferParams) (*DomainTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainTransfer",
		Method:             "POST",
		PathPattern:        "/domain/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainUpdate domains update

  Updating an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainUpdate(params *DomainUpdateParams) (*DomainUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
