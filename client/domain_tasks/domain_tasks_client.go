// Code generated by go-swagger; DO NOT EDIT.

package domain_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new domain tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new domain tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for domain tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthinfoSend(params *AuthinfoSendParams, opts ...ClientOption) (*AuthinfoSendOK, error)

	AutoDeleteList(params *AutoDeleteListParams, opts ...ClientOption) (*AutoDeleteListOK, error)

	AutoDnssecKeyRollover(params *AutoDnssecKeyRolloverParams, opts ...ClientOption) (*AutoDnssecKeyRolloverOK, error)

	DomainAddDomainSafe(params *DomainAddDomainSafeParams, opts ...ClientOption) (*DomainAddDomainSafeOK, error)

	DomainAuthinfo1Create(params *DomainAuthinfo1CreateParams, opts ...ClientOption) (*DomainAuthinfo1CreateOK, error)

	DomainAuthinfo1Delete(params *DomainAuthinfo1DeleteParams, opts ...ClientOption) (*DomainAuthinfo1DeleteOK, error)

	DomainAuthinfo2Create(params *DomainAuthinfo2CreateParams, opts ...ClientOption) (*DomainAuthinfo2CreateOK, error)

	DomainAuthinfo2Creates(params *DomainAuthinfo2CreatesParams, opts ...ClientOption) (*DomainAuthinfo2CreatesOK, error)

	DomainAuthinfoCreates(params *DomainAuthinfoCreatesParams, opts ...ClientOption) (*DomainAuthinfoCreatesOK, error)

	DomainAuthinfoDeletes(params *DomainAuthinfoDeletesParams, opts ...ClientOption) (*DomainAuthinfoDeletesOK, error)

	DomainBuy(params *DomainBuyParams, opts ...ClientOption) (*DomainBuyOK, error)

	DomainBuys(params *DomainBuysParams, opts ...ClientOption) (*DomainBuysOK, error)

	DomainCancelationCreate(params *DomainCancelationCreateParams, opts ...ClientOption) (*DomainCancelationCreateOK, error)

	DomainCancelationCreates(params *DomainCancelationCreatesParams, opts ...ClientOption) (*DomainCancelationCreatesOK, error)

	DomainCancelationDelete(params *DomainCancelationDeleteParams, opts ...ClientOption) (*DomainCancelationDeleteOK, error)

	DomainCancelationDeletes(params *DomainCancelationDeletesParams, opts ...ClientOption) (*DomainCancelationDeletesOK, error)

	DomainCancelationInfo(params *DomainCancelationInfoParams, opts ...ClientOption) (*DomainCancelationInfoOK, error)

	DomainCancelationList(params *DomainCancelationListParams, opts ...ClientOption) (*DomainCancelationListOK, error)

	DomainCancelationPatches(params *DomainCancelationPatchesParams, opts ...ClientOption) (*DomainCancelationPatchesOK, error)

	DomainCancelationUpdate(params *DomainCancelationUpdateParams, opts ...ClientOption) (*DomainCancelationUpdateOK, error)

	DomainCommentUpdate(params *DomainCommentUpdateParams, opts ...ClientOption) (*DomainCommentUpdateOK, error)

	DomainCreate(params *DomainCreateParams, opts ...ClientOption) (*DomainCreateOK, error)

	DomainCreates(params *DomainCreatesParams, opts ...ClientOption) (*DomainCreatesOK, error)

	DomainDeleteDomainSafe(params *DomainDeleteDomainSafeParams, opts ...ClientOption) (*DomainDeleteDomainSafeOK, error)

	DomainInfo(params *DomainInfoParams, opts ...ClientOption) (*DomainInfoOK, error)

	DomainList(params *DomainListParams, opts ...ClientOption) (*DomainListOK, error)

	DomainOwnerChange(params *DomainOwnerChangeParams, opts ...ClientOption) (*DomainOwnerChangeOK, error)

	DomainPatches(params *DomainPatchesParams, opts ...ClientOption) (*DomainPatchesOK, error)

	DomainRenew(params *DomainRenewParams, opts ...ClientOption) (*DomainRenewOK, error)

	DomainRenews(params *DomainRenewsParams, opts ...ClientOption) (*DomainRenewsOK, error)

	DomainRestore(params *DomainRestoreParams, opts ...ClientOption) (*DomainRestoreOK, error)

	DomainRestoreList(params *DomainRestoreListParams, opts ...ClientOption) (*DomainRestoreListOK, error)

	DomainRestores(params *DomainRestoresParams, opts ...ClientOption) (*DomainRestoresOK, error)

	DomainServicesUpdate(params *DomainServicesUpdateParams, opts ...ClientOption) (*DomainServicesUpdateOK, error)

	DomainStatusUpdate(params *DomainStatusUpdateParams, opts ...ClientOption) (*DomainStatusUpdateOK, error)

	DomainTrade(params *DomainTradeParams, opts ...ClientOption) (*DomainTradeOK, error)

	DomainTransfer(params *DomainTransferParams, opts ...ClientOption) (*DomainTransferOK, error)

	DomainTransfers(params *DomainTransfersParams, opts ...ClientOption) (*DomainTransfersOK, error)

	DomainUpdate(params *DomainUpdateParams, opts ...ClientOption) (*DomainUpdateOK, error)

	DomainUpdateComments(params *DomainUpdateCommentsParams, opts ...ClientOption) (*DomainUpdateCommentsOK, error)

	DomainUpdateDNSSec(params *DomainUpdateDNSSecParams, opts ...ClientOption) (*DomainUpdateDNSSecOK, error)

	DomainsAddDomainSafe(params *DomainsAddDomainSafeParams, opts ...ClientOption) (*DomainsAddDomainSafeOK, error)

	DomainsAddDomainSafeZone(params *DomainsAddDomainSafeZoneParams, opts ...ClientOption) (*DomainsAddDomainSafeZoneOK, error)

	DomainsDeleteDomainSafe(params *DomainsDeleteDomainSafeParams, opts ...ClientOption) (*DomainsDeleteDomainSafeOK, error)

	DomainsDeleteDomainSafeZone(params *DomainsDeleteDomainSafeZoneParams, opts ...ClientOption) (*DomainsDeleteDomainSafeZoneOK, error)

	OwnercChange(params *OwnercChangeParams, opts ...ClientOption) (*OwnercChangeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AuthinfoSend auths info send 0113005

Sending the AuthInfo for the specified domain to the domain owner.
*/
func (a *Client) AuthinfoSend(params *AuthinfoSendParams, opts ...ClientOption) (*AuthinfoSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthinfoSendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authinfoSend",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_sendAuthinfoToOwnerc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthinfoSendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthinfoSendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authinfoSend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AutoDeleteList autos delete list 0718

AutoDelete list
*/
func (a *Client) AutoDeleteList(params *AutoDeleteListParams, opts ...ClientOption) (*AutoDeleteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "autoDeleteList",
		Method:             "POST",
		PathPattern:        "/domain/autodelete/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoDeleteListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoDeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for autoDeleteList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AutoDnssecKeyRollover autos DNS sec key rollover 0120002

Invoking an AutoDNSSec key rollover. Note the AutoDNSSec feature must be enabled for the domain
*/
func (a *Client) AutoDnssecKeyRollover(params *AutoDnssecKeyRolloverParams, opts ...ClientOption) (*AutoDnssecKeyRolloverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoDnssecKeyRolloverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "autoDnssecKeyRollover",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_autoDnssecKeyRollover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoDnssecKeyRolloverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoDnssecKeyRolloverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for autoDnssecKeyRollover: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAddDomainSafe saves object create 0601

Adding the domain to the domain safe
*/
func (a *Client) DomainAddDomainSafe(params *DomainAddDomainSafeParams, opts ...ClientOption) (*DomainAddDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAddDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAddDomainSafe",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAddDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAddDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAddDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfo1Create authinfos create 0113001

Creating an AuthInfo 1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Create(params *DomainAuthinfo1CreateParams, opts ...ClientOption) (*DomainAuthinfo1CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfo1Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo1CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo1Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfo1Delete authinfos delete

Deleting an existing AuthInfo1 for the specified domain.
*/
func (a *Client) DomainAuthinfo1Delete(params *DomainAuthinfo1DeleteParams, opts ...ClientOption) (*DomainAuthinfo1DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo1DeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfo1Delete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo1DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo1DeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo1Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfo2Create authinfo2s create 0113003

Creating an AuthInfo 2 for the specified domain.
*/
func (a *Client) DomainAuthinfo2Create(params *DomainAuthinfo2CreateParams, opts ...ClientOption) (*DomainAuthinfo2CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo2CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfo2Create",
		Method:             "POST",
		PathPattern:        "/domain/{name}/_authinfo2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo2CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo2CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo2Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfo2Creates auths info2 create bulk 0113003

Creating several AuthInfos 2 with one request.
*/
func (a *Client) DomainAuthinfo2Creates(params *DomainAuthinfo2CreatesParams, opts ...ClientOption) (*DomainAuthinfo2CreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfo2CreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfo2Creates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_authinfo2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfo2CreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfo2CreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfo2Creates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfoCreates authinfo1s create bulk 0113001

Creating several AuthInfos 1 with one request.
*/
func (a *Client) DomainAuthinfoCreates(params *DomainAuthinfoCreatesParams, opts ...ClientOption) (*DomainAuthinfoCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfoCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfoCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfoCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfoCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfoCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainAuthinfoDeletes authinfo1s delete bulk 0113002

Deleting several AuthInfos 1 with one request.
*/
func (a *Client) DomainAuthinfoDeletes(params *DomainAuthinfoDeletesParams, opts ...ClientOption) (*DomainAuthinfoDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainAuthinfoDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainAuthinfoDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/domain/_authinfo1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainAuthinfoDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainAuthinfoDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainAuthinfoDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainBuy domains buy order 0101006

Buying a domain from the premium market. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainBuy(params *DomainBuyParams, opts ...ClientOption) (*DomainBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainBuyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainBuy",
		Method:             "POST",
		PathPattern:        "/domain/_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainBuyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainBuy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainBuys domains buy bulk 0101006

Buying several domains with one request.
*/
func (a *Client) DomainBuys(params *DomainBuysParams, opts ...ClientOption) (*DomainBuysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainBuysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainBuys",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainBuysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainBuysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainBuys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationCreate cancelations create 0103101

Creating a cancelation for the specified domain.
*/
func (a *Client) DomainCancelationCreate(params *DomainCancelationCreateParams, opts ...ClientOption) (*DomainCancelationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationCreate",
		Method:             "POST",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationCreates cancelations create bulk 0103101

Creating several domain cancelations with one request.
*/
func (a *Client) DomainCancelationCreates(params *DomainCancelationCreatesParams, opts ...ClientOption) (*DomainCancelationCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationDelete cancelations delete 0103103

Deleting an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationDelete(params *DomainCancelationDeleteParams, opts ...ClientOption) (*DomainCancelationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationDelete",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationDeletes cancelations delete bulk 0103103

Deleting several domain cancelations with one request.
*/
func (a *Client) DomainCancelationDeletes(params *DomainCancelationDeletesParams, opts ...ClientOption) (*DomainCancelationDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationInfo cancelations info 0103104

Inquiring the cancelation data for the specified domain.
*/
func (a *Client) DomainCancelationInfo(params *DomainCancelationInfoParams, opts ...ClientOption) (*DomainCancelationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationList cancelations list 0103104

Inquiring a list of cancelations with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: disconnect, execdate, ctid, created, registryStatus, sld, type, tld, subtld, gainingRegistrar, updated.
*/
func (a *Client) DomainCancelationList(params *DomainCancelationListParams, opts ...ClientOption) (*DomainCancelationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationList",
		Method:             "POST",
		PathPattern:        "/domain/cancelation/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationPatches cancelations update bulk 0103102

Updating several domain cancelations with one request.
*/
func (a *Client) DomainCancelationPatches(params *DomainCancelationPatchesParams, opts ...ClientOption) (*DomainCancelationPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/domain/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCancelationUpdate cancelations update 0103102

Updating an existing cancelation for the specified domain.
*/
func (a *Client) DomainCancelationUpdate(params *DomainCancelationUpdateParams, opts ...ClientOption) (*DomainCancelationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCancelationUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCancelationUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/cancelation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCancelationUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCancelationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCancelationUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCommentUpdate domains comment update 0102004

Updating a comment for an existing domain.
*/
func (a *Client) DomainCommentUpdate(params *DomainCommentUpdateParams, opts ...ClientOption) (*DomainCommentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCommentUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCommentUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCommentUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCommentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCommentUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCreate domains create 0101

Ordering a new domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainCreate(params *DomainCreateParams, opts ...ClientOption) (*DomainCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCreate",
		Method:             "POST",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainCreates domains create bulk 0101

Creating several domains with one request.
*/
func (a *Client) DomainCreates(params *DomainCreatesParams, opts ...ClientOption) (*DomainCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainCreates",
		Method:             "POST",
		PathPattern:        "/bulk/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainDeleteDomainSafe saves object delete 0603

Deleting the domain from the domain safe
*/
func (a *Client) DomainDeleteDomainSafe(params *DomainDeleteDomainSafeParams, opts ...ClientOption) (*DomainDeleteDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainDeleteDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainDeleteDomainSafe",
		Method:             "DELETE",
		PathPattern:        "/domain/{name}/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainDeleteDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainDeleteDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainDeleteDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainInfo domains info 0105

Inquiring the data for the specified domain.
*/
func (a *Client) DomainInfo(params *DomainInfoParams, opts ...ClientOption) (*DomainInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainInfo",
		Method:             "GET",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainList domains list 0105

Inquiring a list of domains with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: sld, subtld, tld, status, authinfo, expire, comment, ownerc, updated, zonec, nserver, techc, adminc,  certificate, created, autorenew, cancelationStatus.
*/
func (a *Client) DomainList(params *DomainListParams, opts ...ClientOption) (*DomainListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainList",
		Method:             "POST",
		PathPattern:        "/domain/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainOwnerChange domains owner change 0104010 deprecated will be removed in future releases please use trade instead

Changing the ownerc of an existing domain.
*/
func (a *Client) DomainOwnerChange(params *DomainOwnerChangeParams, opts ...ClientOption) (*DomainOwnerChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainOwnerChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainOwnerChange",
		Method:             "POST",
		PathPattern:        "/domain/_ownerChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainOwnerChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainOwnerChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainOwnerChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainPatches domains update bulk 0102

Updating several domains with one request.
*/
func (a *Client) DomainPatches(params *DomainPatchesParams, opts ...ClientOption) (*DomainPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainRenew domains renew 0101003

Renewing an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainRenew(params *DomainRenewParams, opts ...ClientOption) (*DomainRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRenewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainRenew",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRenewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRenewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRenew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainRenews domains renew bulk 0101003

Renewing several domains with one request.
*/
func (a *Client) DomainRenews(params *DomainRenewsParams, opts ...ClientOption) (*DomainRenewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRenewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainRenews",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRenewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRenewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRenews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainRestore domains restore 0101005

Restoring an existing domain.
*/
func (a *Client) DomainRestore(params *DomainRestoreParams, opts ...ClientOption) (*DomainRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainRestore",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainRestoreList domains restore list 0105005

Inquiring a list of restorable domains with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: parking, certificate, adminc, cancelation, action, zonec, nserver, techc, nsentry, dnssec, period, created, sld, tld, subtld, deleted, autorenew, expire, domainsafe, comment, ownerc, updated, remarks, authinfo, status.
*/
func (a *Client) DomainRestoreList(params *DomainRestoreListParams, opts ...ClientOption) (*DomainRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoreListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainRestoreList",
		Method:             "POST",
		PathPattern:        "/domain/restore/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoreListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoreListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestoreList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainRestores domains restore bulk 0101005

Restoring several domains with one request.
*/
func (a *Client) DomainRestores(params *DomainRestoresParams, opts ...ClientOption) (*DomainRestoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainRestoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainRestores",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainRestoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainRestoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainRestores: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainServicesUpdate domains services update

Updating the services of a domain.
*/
func (a *Client) DomainServicesUpdate(params *DomainServicesUpdateParams, opts ...ClientOption) (*DomainServicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainServicesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainServicesUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/_services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainServicesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainServicesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainServicesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainStatusUpdate domains status update 0102002

Updating the registry status for an existing domain.
*/
func (a *Client) DomainStatusUpdate(params *DomainStatusUpdateParams, opts ...ClientOption) (*DomainStatusUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainStatusUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainStatusUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_statusUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainStatusUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainStatusUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainStatusUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainTrade domains trade 0104010

Changing the ownerc of an existing domain.
*/
func (a *Client) DomainTrade(params *DomainTradeParams, opts ...ClientOption) (*DomainTradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainTrade",
		Method:             "POST",
		PathPattern:        "/domain/_trade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainTradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainTrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainTransfer domains transfer 0104

Transfering a domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainTransfer(params *DomainTransferParams, opts ...ClientOption) (*DomainTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainTransfer",
		Method:             "POST",
		PathPattern:        "/domain/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainTransfers domains transfer bulk 0104

Transferring several domains with one request.
*/
func (a *Client) DomainTransfers(params *DomainTransfersParams, opts ...ClientOption) (*DomainTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainTransfers",
		Method:             "POST",
		PathPattern:        "/bulk/domain/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainTransfersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainUpdate domains update 0102

Updating an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainUpdate(params *DomainUpdateParams, opts ...ClientOption) (*DomainUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainUpdate",
		Method:             "PUT",
		PathPattern:        "/domain/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainUpdateComments domains comments update bulk 0102004

Updating several domain comments with one request.
*/
func (a *Client) DomainUpdateComments(params *DomainUpdateCommentsParams, opts ...ClientOption) (*DomainUpdateCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainUpdateComments",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainUpdateCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainUpdateComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainUpdateDNSSec domains update 0102007

Updating only the dnssec information for an existing domain. The operation is asynchronous and creates a job.
*/
func (a *Client) DomainUpdateDNSSec(params *DomainUpdateDNSSecParams, opts ...ClientOption) (*DomainUpdateDNSSecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainUpdateDNSSecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainUpdateDnsSec",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_dnssec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainUpdateDNSSecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainUpdateDNSSecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainUpdateDnsSec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsAddDomainSafe saves object create bulk 0601

Adding several domains in the DomainSafe with one request.
*/
func (a *Client) DomainsAddDomainSafe(params *DomainsAddDomainSafeParams, opts ...ClientOption) (*DomainsAddDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsAddDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainsAddDomainSafe",
		Method:             "PUT",
		PathPattern:        "/bulk/domain/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsAddDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsAddDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainsAddDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsAddDomainSafeZone saves object zone create bulk 0601

Adding several zones in the DomainSafe with one request.
*/
func (a *Client) DomainsAddDomainSafeZone(params *DomainsAddDomainSafeZoneParams, opts ...ClientOption) (*DomainsAddDomainSafeZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsAddDomainSafeZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainsAddDomainSafeZone",
		Method:             "PUT",
		PathPattern:        "/bulk/zone/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsAddDomainSafeZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsAddDomainSafeZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainsAddDomainSafeZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsDeleteDomainSafe saves object delete bulk 0603

Deleting several domains from the DomainSafe with one request.
*/
func (a *Client) DomainsDeleteDomainSafe(params *DomainsDeleteDomainSafeParams, opts ...ClientOption) (*DomainsDeleteDomainSafeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsDeleteDomainSafeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainsDeleteDomainSafe",
		Method:             "DELETE",
		PathPattern:        "/bulk/domain/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsDeleteDomainSafeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsDeleteDomainSafeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainsDeleteDomainSafe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsDeleteDomainSafeZone saves object zone delete bulk 0603

Deleting several zones from the DomainSafe with one request.
*/
func (a *Client) DomainsDeleteDomainSafeZone(params *DomainsDeleteDomainSafeZoneParams, opts ...ClientOption) (*DomainsDeleteDomainSafeZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsDeleteDomainSafeZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainsDeleteDomainSafeZone",
		Method:             "DELETE",
		PathPattern:        "/bulk/zone/_domainSafe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsDeleteDomainSafeZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsDeleteDomainSafeZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainsDeleteDomainSafeZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OwnercChange domains owner change 0104010

Changing the ownerc of an existing domain.
*/
func (a *Client) OwnercChange(params *OwnercChangeParams, opts ...ClientOption) (*OwnercChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOwnercChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ownercChange",
		Method:             "PUT",
		PathPattern:        "/domain/{name}/_ownerChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OwnercChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OwnercChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ownercChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
