// Code generated by go-swagger; DO NOT EDIT.

package redirect_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new redirect tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new redirect tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new redirect tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for redirect tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RedirectCreate(params *RedirectCreateParams, opts ...ClientOption) (*RedirectCreateOK, error)

	RedirectCreates(params *RedirectCreatesParams, opts ...ClientOption) (*RedirectCreatesOK, error)

	RedirectDelete(params *RedirectDeleteParams, opts ...ClientOption) (*RedirectDeleteOK, error)

	RedirectDeletes(params *RedirectDeletesParams, opts ...ClientOption) (*RedirectDeletesOK, error)

	RedirectInfo(params *RedirectInfoParams, opts ...ClientOption) (*RedirectInfoOK, error)

	RedirectList(params *RedirectListParams, opts ...ClientOption) (*RedirectListOK, error)

	RedirectPatches(params *RedirectPatchesParams, opts ...ClientOption) (*RedirectPatchesOK, error)

	RedirectUpdate(params *RedirectUpdateParams, opts ...ClientOption) (*RedirectUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RedirectCreate redirects create 0501

Creating a new redirect.
*/
func (a *Client) RedirectCreate(params *RedirectCreateParams, opts ...ClientOption) (*RedirectCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectCreate",
		Method:             "POST",
		PathPattern:        "/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectCreates redirects create bulk 0501

Creating several redirects in one request.
*/
func (a *Client) RedirectCreates(params *RedirectCreatesParams, opts ...ClientOption) (*RedirectCreatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectCreatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectCreates",
		Method:             "POST",
		PathPattern:        "/bulk/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectCreatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectCreatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectCreates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectDelete redirects delete 0503

Deleting an existing redirect.
*/
func (a *Client) RedirectDelete(params *RedirectDeleteParams, opts ...ClientOption) (*RedirectDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectDelete",
		Method:             "DELETE",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectDeletes redirects delete bulk 0503

Deleting several redirects in one request.
*/
func (a *Client) RedirectDeletes(params *RedirectDeletesParams, opts ...ClientOption) (*RedirectDeletesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectDeletesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectDeletes",
		Method:             "DELETE",
		PathPattern:        "/bulk/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectDeletesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectDeletesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectDeletes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectInfo redirects info 0504

Inquiring the data for a specified redirect.
*/
func (a *Client) RedirectInfo(params *RedirectInfoParams, opts ...ClientOption) (*RedirectInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectInfo",
		Method:             "GET",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectList redirects list 0504

Inquiring a list of redirects with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: mode, created, domain, source, type, title, updated, target.
*/
func (a *Client) RedirectList(params *RedirectListParams, opts ...ClientOption) (*RedirectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectList",
		Method:             "POST",
		PathPattern:        "/redirect/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectPatches redirects update bulk 0502

Updating several redirects in one request.
*/
func (a *Client) RedirectPatches(params *RedirectPatchesParams, opts ...ClientOption) (*RedirectPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectPatches",
		Method:             "PATCH",
		PathPattern:        "/bulk/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RedirectUpdate redirects update 0502

Updating an existing redirect.
*/
func (a *Client) RedirectUpdate(params *RedirectUpdateParams, opts ...ClientOption) (*RedirectUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "redirectUpdate",
		Method:             "PUT",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
