// Code generated by go-swagger; DO NOT EDIT.

package redirect_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new redirect tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for redirect tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RedirectCreate(params *RedirectCreateParams) (*RedirectCreateOK, error)

	RedirectDelete(params *RedirectDeleteParams) (*RedirectDeleteOK, error)

	RedirectInfo(params *RedirectInfoParams) (*RedirectInfoOK, error)

	RedirectList(params *RedirectListParams) (*RedirectListOK, error)

	RedirectUpdate(params *RedirectUpdateParams) (*RedirectUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RedirectCreate redirects create

  Creating a new redirect.
*/
func (a *Client) RedirectCreate(params *RedirectCreateParams) (*RedirectCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectCreate",
		Method:             "POST",
		PathPattern:        "/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectDelete redirects delete

  Deleting an existing redirect.
*/
func (a *Client) RedirectDelete(params *RedirectDeleteParams) (*RedirectDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectDelete",
		Method:             "DELETE",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectInfo redirects info

  Inquiring the data for a specified redirect.
*/
func (a *Client) RedirectInfo(params *RedirectInfoParams) (*RedirectInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectInfo",
		Method:             "GET",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectList redirects list

  Inquiring a list of redirects with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: mode, created, domain, source, type, title, updated, target.
*/
func (a *Client) RedirectList(params *RedirectListParams) (*RedirectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectList",
		Method:             "POST",
		PathPattern:        "/redirect/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUpdate redirects update

  Updating an existing redirect.
*/
func (a *Client) RedirectUpdate(params *RedirectUpdateParams) (*RedirectUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUpdate",
		Method:             "PUT",
		PathPattern:        "/redirect/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedirectUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
