// Code generated by go-swagger; DO NOT EDIT.

package tmch_mark_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new tmch mark tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new tmch mark tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new tmch mark tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for tmch mark tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ImportAndtmchMarkTransfer(params *ImportAndtmchMarkTransferParams, opts ...ClientOption) (*ImportAndtmchMarkTransferOK, error)

	TmchMArkDelete(params *TmchMArkDeleteParams, opts ...ClientOption) (*TmchMArkDeleteOK, error)

	TmchMarkConfirm(params *TmchMarkConfirmParams, opts ...ClientOption) (*TmchMarkConfirmOK, error)

	TmchMarkCreate(params *TmchMarkCreateParams, opts ...ClientOption) (*TmchMarkCreateOK, error)

	TmchMarkDocumentCreate(params *TmchMarkDocumentCreateParams, opts ...ClientOption) (*TmchMarkDocumentCreateOK, error)

	TmchMarkDocumentDelete(params *TmchMarkDocumentDeleteParams, opts ...ClientOption) (*TmchMarkDocumentDeleteOK, error)

	TmchMarkDocumentInfo(params *TmchMarkDocumentInfoParams, opts ...ClientOption) (*TmchMarkDocumentInfoOK, error)

	TmchMarkImport(params *TmchMarkImportParams, opts ...ClientOption) (*TmchMarkImportOK, error)

	TmchMarkInfo(params *TmchMarkInfoParams, opts ...ClientOption) (*TmchMarkInfoOK, error)

	TmchMarkList(params *TmchMarkListParams, opts ...ClientOption) (*TmchMarkListOK, error)

	TmchMarkTransfer(params *TmchMarkTransferParams, opts ...ClientOption) (*TmchMarkTransferOK, error)

	TmchMarkUpdate(params *TmchMarkUpdateParams, opts ...ClientOption) (*TmchMarkUpdateOK, error)

	TmchMarkdocumentUpload(params *TmchMarkdocumentUploadParams, opts ...ClientOption) (*TmchMarkdocumentUploadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ImportAndtmchMarkTransfer tmches mark transfer request 011450

Importing an existing TmchMark and starting the transfer.
*/
func (a *Client) ImportAndtmchMarkTransfer(params *ImportAndtmchMarkTransferParams, opts ...ClientOption) (*ImportAndtmchMarkTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportAndtmchMarkTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importAndtmchMarkTransfer",
		Method:             "POST",
		PathPattern:        "/tmchMark/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportAndtmchMarkTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportAndtmchMarkTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importAndtmchMarkTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMArkDelete tmches mark delete 011443

Deleting the TmchMark entry for the given reference.
*/
func (a *Client) TmchMArkDelete(params *TmchMArkDeleteParams, opts ...ClientOption) (*TmchMArkDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMArkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMArkDelete",
		Method:             "DELETE",
		PathPattern:        "/tmchMark/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMArkDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMArkDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMArkDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkConfirm tmches mark confirm 011446

Confirming an existing TmchMark.
*/
func (a *Client) TmchMarkConfirm(params *TmchMarkConfirmParams, opts ...ClientOption) (*TmchMarkConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkConfirm",
		Method:             "POST",
		PathPattern:        "/tmchMark/{reference}/_confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkCreate tmches mark create 011441

Creating a new TmchMark.
*/
func (a *Client) TmchMarkCreate(params *TmchMarkCreateParams, opts ...ClientOption) (*TmchMarkCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkCreate",
		Method:             "POST",
		PathPattern:        "/tmchMark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkDocumentCreate tmches mark document create 011451

Assinging an uploaded document to a tmch mark entry.
*/
func (a *Client) TmchMarkDocumentCreate(params *TmchMarkDocumentCreateParams, opts ...ClientOption) (*TmchMarkDocumentCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkDocumentCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkDocumentCreate",
		Method:             "POST",
		PathPattern:        "/tmchMark/{reference}/document",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkDocumentCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkDocumentCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkDocumentCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkDocumentDelete tmches mark document delete 011453

Deleting a single TmchMark document for the given type.
*/
func (a *Client) TmchMarkDocumentDelete(params *TmchMarkDocumentDeleteParams, opts ...ClientOption) (*TmchMarkDocumentDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkDocumentDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkDocumentDelete",
		Method:             "DELETE",
		PathPattern:        "/tmchMark/{reference}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkDocumentDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkDocumentDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkDocumentDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkDocumentInfo tmches mark document info 011454

Inquiring a single TmchMark document for the given type.
*/
func (a *Client) TmchMarkDocumentInfo(params *TmchMarkDocumentInfoParams, opts ...ClientOption) (*TmchMarkDocumentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkDocumentInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkDocumentInfo",
		Method:             "GET",
		PathPattern:        "/tmchMark/{reference}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkDocumentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkDocumentInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkDocumentInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkImport tmches mark import 011449

Importing an existing TmchMark.
*/
func (a *Client) TmchMarkImport(params *TmchMarkImportParams, opts ...ClientOption) (*TmchMarkImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkImport",
		Method:             "POST",
		PathPattern:        "/tmchMark/_import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkInfo tmches mark info 011444

Inquiring the TmchMark entry for the given reference.
*/
func (a *Client) TmchMarkInfo(params *TmchMarkInfoParams, opts ...ClientOption) (*TmchMarkInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkInfo",
		Method:             "GET",
		PathPattern:        "/tmchMark/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkList tmches mark list 011445

Inquiring a list of TmchMark with certain details. The following keys can be used for filtering, ordering and fetching additional data via query parameter: type, name, reference, description, period, renew, status, payable, sent.
*/
func (a *Client) TmchMarkList(params *TmchMarkListParams, opts ...ClientOption) (*TmchMarkListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkList",
		Method:             "POST",
		PathPattern:        "/tmchMark/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkTransfer tmches mark transfer request 011450

Starting the transfer for given reference (External TmchMark).
*/
func (a *Client) TmchMarkTransfer(params *TmchMarkTransferParams, opts ...ClientOption) (*TmchMarkTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkTransfer",
		Method:             "PUT",
		PathPattern:        "/tmchMark/{reference}/_transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkUpdate tmches mark update 011442

Updating the TmchMark entry for the given reference.
*/
func (a *Client) TmchMarkUpdate(params *TmchMarkUpdateParams, opts ...ClientOption) (*TmchMarkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkUpdate",
		Method:             "PUT",
		PathPattern:        "/tmchMark/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TmchMarkdocumentUpload tmches mark document upload

Uploading a specific document to a tmch mark entry.
*/
func (a *Client) TmchMarkdocumentUpload(params *TmchMarkdocumentUploadParams, opts ...ClientOption) (*TmchMarkdocumentUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTmchMarkdocumentUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tmchMarkdocumentUpload",
		Method:             "PUT",
		PathPattern:        "/tmchMark/{reference}/document/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TmchMarkdocumentUploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TmchMarkdocumentUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tmchMarkdocumentUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
