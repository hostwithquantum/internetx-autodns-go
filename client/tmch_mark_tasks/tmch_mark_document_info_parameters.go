// Code generated by go-swagger; DO NOT EDIT.

package tmch_mark_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTmchMarkDocumentInfoParams creates a new TmchMarkDocumentInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTmchMarkDocumentInfoParams() *TmchMarkDocumentInfoParams {
	return &TmchMarkDocumentInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTmchMarkDocumentInfoParamsWithTimeout creates a new TmchMarkDocumentInfoParams object
// with the ability to set a timeout on a request.
func NewTmchMarkDocumentInfoParamsWithTimeout(timeout time.Duration) *TmchMarkDocumentInfoParams {
	return &TmchMarkDocumentInfoParams{
		timeout: timeout,
	}
}

// NewTmchMarkDocumentInfoParamsWithContext creates a new TmchMarkDocumentInfoParams object
// with the ability to set a context for a request.
func NewTmchMarkDocumentInfoParamsWithContext(ctx context.Context) *TmchMarkDocumentInfoParams {
	return &TmchMarkDocumentInfoParams{
		Context: ctx,
	}
}

// NewTmchMarkDocumentInfoParamsWithHTTPClient creates a new TmchMarkDocumentInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewTmchMarkDocumentInfoParamsWithHTTPClient(client *http.Client) *TmchMarkDocumentInfoParams {
	return &TmchMarkDocumentInfoParams{
		HTTPClient: client,
	}
}

/*
TmchMarkDocumentInfoParams contains all the parameters to send to the API endpoint

	for the tmch mark document info operation.

	Typically these are written to a http.Request.
*/
type TmchMarkDocumentInfoParams struct {

	/* Keys.

	   The query parameter to enable generate a download link.
	*/
	Keys []string

	// Reference.
	Reference string

	// Type.
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the tmch mark document info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TmchMarkDocumentInfoParams) WithDefaults() *TmchMarkDocumentInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the tmch mark document info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TmchMarkDocumentInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithTimeout(timeout time.Duration) *TmchMarkDocumentInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithContext(ctx context.Context) *TmchMarkDocumentInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithHTTPClient(client *http.Client) *TmchMarkDocumentInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeys adds the keys to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithKeys(keys []string) *TmchMarkDocumentInfoParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WithReference adds the reference to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithReference(reference string) *TmchMarkDocumentInfoParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetReference(reference string) {
	o.Reference = reference
}

// WithType adds the typeVar to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) WithType(typeVar string) *TmchMarkDocumentInfoParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the tmch mark document info params
func (o *TmchMarkDocumentInfoParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *TmchMarkDocumentInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Keys != nil {

		// binding items for keys
		joinedKeys := o.bindParamKeys(reg)

		// query array param keys
		if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
			return err
		}
	}

	// path param reference
	if err := r.SetPathParam("reference", o.Reference); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamTmchMarkDocumentInfo binds the parameter keys
func (o *TmchMarkDocumentInfoParams) bindParamKeys(formats strfmt.Registry) []string {
	keysIR := o.Keys

	var keysIC []string
	for _, keysIIR := range keysIR { // explode []string

		keysIIV := keysIIR // string as string
		keysIC = append(keysIC, keysIIV)
	}

	// items.CollectionFormat: "multi"
	keysIS := swag.JoinByFormat(keysIC, "multi")

	return keysIS
}
