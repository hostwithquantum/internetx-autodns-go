// Code generated by go-swagger; DO NOT EDIT.

package transfer_request_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transfer request tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfer request tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TransferOutAnswer(params *TransferOutAnswerParams) (*TransferOutAnswerOK, error)

	TransferOutAnswerOld(params *TransferOutAnswerOldParams) (*TransferOutAnswerOldOK, error)

	TransferOutInfo(params *TransferOutInfoParams) (*TransferOutInfoOK, error)

	TransferOutList(params *TransferOutListParams) (*TransferOutListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TransferOutAnswer transfers out answer

  Accepting (ACK) or rejecting (NACK) transfer request.
*/
func (a *Client) TransferOutAnswer(params *TransferOutAnswerParams) (*TransferOutAnswerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutAnswerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutAnswer",
		Method:             "POST",
		PathPattern:        "/transferout/{domain}/{_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutAnswerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutAnswerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutAnswer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransferOutAnswerOld transfers out answer

  Accepting (ACK) or rejecting (NACK) transfer request.
*/
func (a *Client) TransferOutAnswerOld(params *TransferOutAnswerOldParams) (*TransferOutAnswerOldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutAnswerOldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutAnswerOld",
		Method:             "PUT",
		PathPattern:        "/transferout/{domain}/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutAnswerOldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutAnswerOldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutAnswerOld: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransferOutInfo transfers request info

  Inquires supplied .
*/
func (a *Client) TransferOutInfo(params *TransferOutInfoParams) (*TransferOutInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutInfo",
		Method:             "GET",
		PathPattern:        "/transferout/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransferOutList transfers out list

  Inquiring a list of transferOut with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: reminder, created, loosingRegistrar, start, sld, tld, type, subtld, end, gainingRegistrar, id, updated, transaction, status.
*/
func (a *Client) TransferOutList(params *TransferOutListParams) (*TransferOutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOutList",
		Method:             "POST",
		PathPattern:        "/transferout/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
