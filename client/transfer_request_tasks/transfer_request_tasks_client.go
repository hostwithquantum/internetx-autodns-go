// Code generated by go-swagger; DO NOT EDIT.

package transfer_request_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new transfer request tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new transfer request tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new transfer request tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for transfer request tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TransferOutAnswer(params *TransferOutAnswerParams, opts ...ClientOption) (*TransferOutAnswerOK, error)

	TransferOutAnswerOld(params *TransferOutAnswerOldParams, opts ...ClientOption) (*TransferOutAnswerOldOK, error)

	TransferOutList(params *TransferOutListParams, opts ...ClientOption) (*TransferOutListOK, error)

	TransferOutTaskInfo(params *TransferOutTaskInfoParams, opts ...ClientOption) (*TransferOutTaskInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TransferOutAnswer transfers out answer 0106002

Accepting (ACK) or rejecting (NACK) transfer request.
*/
func (a *Client) TransferOutAnswer(params *TransferOutAnswerParams, opts ...ClientOption) (*TransferOutAnswerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutAnswerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOutAnswer",
		Method:             "POST",
		PathPattern:        "/transferout/{domain}/{_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutAnswerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutAnswerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutAnswer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferOutAnswerOld transfers out answer

Accepting (ACK) or rejecting (NACK) transfer request. A nackReason is only required for rejecting GTLDs Domains. You can use the following values for type : ACK, NACK
*/
func (a *Client) TransferOutAnswerOld(params *TransferOutAnswerOldParams, opts ...ClientOption) (*TransferOutAnswerOldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutAnswerOldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOutAnswerOld",
		Method:             "PUT",
		PathPattern:        "/transferout/{domain}/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutAnswerOldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutAnswerOldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutAnswerOld: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferOutList transfers out list 0106001

Inquiring a list of transferOut with certain details. The following keys can be used for filtering, ordering and inquiring additional data via query parameter: reminder, created, loosingRegistrar, start, sld, tld, type, subtld, end, gainingRegistrar, id, updated, transaction, status.
*/
func (a *Client) TransferOutList(params *TransferOutListParams, opts ...ClientOption) (*TransferOutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOutList",
		Method:             "POST",
		PathPattern:        "/transferout/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferOutTaskInfo transfers request info 0106001

Inquires supplied .
*/
func (a *Client) TransferOutTaskInfo(params *TransferOutTaskInfoParams, opts ...ClientOption) (*TransferOutTaskInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOutTaskInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOutTaskInfo",
		Method:             "GET",
		PathPattern:        "/transferout/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferOutTaskInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOutTaskInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOutTaskInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
