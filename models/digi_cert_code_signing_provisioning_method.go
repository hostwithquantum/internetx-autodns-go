// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DigiCertCodeSigningProvisioningMethod digi cert code signing provisioning method
//
// swagger:model DigiCertCodeSigningProvisioningMethod
type DigiCertCodeSigningProvisioningMethod string

func NewDigiCertCodeSigningProvisioningMethod(value DigiCertCodeSigningProvisioningMethod) *DigiCertCodeSigningProvisioningMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DigiCertCodeSigningProvisioningMethod.
func (m DigiCertCodeSigningProvisioningMethod) Pointer() *DigiCertCodeSigningProvisioningMethod {
	return &m
}

const (

	// DigiCertCodeSigningProvisioningMethodSOFTWARE captures enum value "SOFTWARE"
	DigiCertCodeSigningProvisioningMethodSOFTWARE DigiCertCodeSigningProvisioningMethod = "SOFTWARE"

	// DigiCertCodeSigningProvisioningMethodSHIPPING captures enum value "SHIPPING"
	DigiCertCodeSigningProvisioningMethodSHIPPING DigiCertCodeSigningProvisioningMethod = "SHIPPING"
)

// for schema
var digiCertCodeSigningProvisioningMethodEnum []interface{}

func init() {
	var res []DigiCertCodeSigningProvisioningMethod
	if err := json.Unmarshal([]byte(`["SOFTWARE","SHIPPING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		digiCertCodeSigningProvisioningMethodEnum = append(digiCertCodeSigningProvisioningMethodEnum, v)
	}
}

func (m DigiCertCodeSigningProvisioningMethod) validateDigiCertCodeSigningProvisioningMethodEnum(path, location string, value DigiCertCodeSigningProvisioningMethod) error {
	if err := validate.EnumCase(path, location, value, digiCertCodeSigningProvisioningMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this digi cert code signing provisioning method
func (m DigiCertCodeSigningProvisioningMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDigiCertCodeSigningProvisioningMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this digi cert code signing provisioning method based on context it is used
func (m DigiCertCodeSigningProvisioningMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
