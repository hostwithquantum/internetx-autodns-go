// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DigiCertCodeSigningHardwarePlatform digi cert code signing hardware platform
//
// swagger:model DigiCertCodeSigningHardwarePlatform
type DigiCertCodeSigningHardwarePlatform string

func NewDigiCertCodeSigningHardwarePlatform(value DigiCertCodeSigningHardwarePlatform) *DigiCertCodeSigningHardwarePlatform {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DigiCertCodeSigningHardwarePlatform.
func (m DigiCertCodeSigningHardwarePlatform) Pointer() *DigiCertCodeSigningHardwarePlatform {
	return &m
}

const (

	// DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110FIPS captures enum value "SAFE_NET_E_TOKEN_5110_FIPS"
	DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110FIPS DigiCertCodeSigningHardwarePlatform = "SAFE_NET_E_TOKEN_5110_FIPS"

	// DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110CC captures enum value "SAFE_NET_E_TOKEN_5110_CC"
	DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110CC DigiCertCodeSigningHardwarePlatform = "SAFE_NET_E_TOKEN_5110_CC"

	// DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110PLUSFIPS captures enum value "SAFE_NET_E_TOKEN_5110_PLUS_FIPS"
	DigiCertCodeSigningHardwarePlatformSAFENETETOKEN5110PLUSFIPS DigiCertCodeSigningHardwarePlatform = "SAFE_NET_E_TOKEN_5110_PLUS_FIPS"

	// DigiCertCodeSigningHardwarePlatformOTHER captures enum value "OTHER"
	DigiCertCodeSigningHardwarePlatformOTHER DigiCertCodeSigningHardwarePlatform = "OTHER"
)

// for schema
var digiCertCodeSigningHardwarePlatformEnum []interface{}

func init() {
	var res []DigiCertCodeSigningHardwarePlatform
	if err := json.Unmarshal([]byte(`["SAFE_NET_E_TOKEN_5110_FIPS","SAFE_NET_E_TOKEN_5110_CC","SAFE_NET_E_TOKEN_5110_PLUS_FIPS","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		digiCertCodeSigningHardwarePlatformEnum = append(digiCertCodeSigningHardwarePlatformEnum, v)
	}
}

func (m DigiCertCodeSigningHardwarePlatform) validateDigiCertCodeSigningHardwarePlatformEnum(path, location string, value DigiCertCodeSigningHardwarePlatform) error {
	if err := validate.EnumCase(path, location, value, digiCertCodeSigningHardwarePlatformEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this digi cert code signing hardware platform
func (m DigiCertCodeSigningHardwarePlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDigiCertCodeSigningHardwarePlatformEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this digi cert code signing hardware platform based on context it is used
func (m DigiCertCodeSigningHardwarePlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
