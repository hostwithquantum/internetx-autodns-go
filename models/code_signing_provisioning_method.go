// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CodeSigningProvisioningMethod code signing provisioning method
//
// swagger:model CodeSigningProvisioningMethod
type CodeSigningProvisioningMethod string

const (

	// CodeSigningProvisioningMethodEMAIL captures enum value "EMAIL"
	CodeSigningProvisioningMethodEMAIL CodeSigningProvisioningMethod = "EMAIL"

	// CodeSigningProvisioningMethodSOFTWARE captures enum value "SOFTWARE"
	CodeSigningProvisioningMethodSOFTWARE CodeSigningProvisioningMethod = "SOFTWARE"

	// CodeSigningProvisioningMethodSHIPPING captures enum value "SHIPPING"
	CodeSigningProvisioningMethodSHIPPING CodeSigningProvisioningMethod = "SHIPPING"
)

// for schema
var codeSigningProvisioningMethodEnum []interface{}

func init() {
	var res []CodeSigningProvisioningMethod
	if err := json.Unmarshal([]byte(`["EMAIL","SOFTWARE","SHIPPING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeSigningProvisioningMethodEnum = append(codeSigningProvisioningMethodEnum, v)
	}
}

func (m CodeSigningProvisioningMethod) validateCodeSigningProvisioningMethodEnum(path, location string, value CodeSigningProvisioningMethod) error {
	if err := validate.EnumCase(path, location, value, codeSigningProvisioningMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this code signing provisioning method
func (m CodeSigningProvisioningMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCodeSigningProvisioningMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
