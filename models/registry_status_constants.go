// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RegistryStatusConstants registry status constants
//
// swagger:model RegistryStatusConstants
type RegistryStatusConstants string

func NewRegistryStatusConstants(value RegistryStatusConstants) *RegistryStatusConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RegistryStatusConstants.
func (m RegistryStatusConstants) Pointer() *RegistryStatusConstants {
	return &m
}

const (

	// RegistryStatusConstantsACTIVE captures enum value "ACTIVE"
	RegistryStatusConstantsACTIVE RegistryStatusConstants = "ACTIVE"

	// RegistryStatusConstantsHOLD captures enum value "HOLD"
	RegistryStatusConstantsHOLD RegistryStatusConstants = "HOLD"

	// RegistryStatusConstantsLOCK captures enum value "LOCK"
	RegistryStatusConstantsLOCK RegistryStatusConstants = "LOCK"

	// RegistryStatusConstantsHOLDLOCK captures enum value "HOLD_LOCK"
	RegistryStatusConstantsHOLDLOCK RegistryStatusConstants = "HOLD_LOCK"

	// RegistryStatusConstantsAUTO captures enum value "AUTO"
	RegistryStatusConstantsAUTO RegistryStatusConstants = "AUTO"

	// RegistryStatusConstantsLOCKOWNER captures enum value "LOCK_OWNER"
	RegistryStatusConstantsLOCKOWNER RegistryStatusConstants = "LOCK_OWNER"

	// RegistryStatusConstantsLOCKUPDATE captures enum value "LOCK_UPDATE"
	RegistryStatusConstantsLOCKUPDATE RegistryStatusConstants = "LOCK_UPDATE"

	// RegistryStatusConstantsPENDING captures enum value "PENDING"
	RegistryStatusConstantsPENDING RegistryStatusConstants = "PENDING"

	// RegistryStatusConstantsNONE captures enum value "NONE"
	RegistryStatusConstantsNONE RegistryStatusConstants = "NONE"
)

// for schema
var registryStatusConstantsEnum []interface{}

func init() {
	var res []RegistryStatusConstants
	if err := json.Unmarshal([]byte(`["ACTIVE","HOLD","LOCK","HOLD_LOCK","AUTO","LOCK_OWNER","LOCK_UPDATE","PENDING","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registryStatusConstantsEnum = append(registryStatusConstantsEnum, v)
	}
}

func (m RegistryStatusConstants) validateRegistryStatusConstantsEnum(path, location string, value RegistryStatusConstants) error {
	if err := validate.EnumCase(path, location, value, registryStatusConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this registry status constants
func (m RegistryStatusConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRegistryStatusConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this registry status constants based on context it is used
func (m RegistryStatusConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
