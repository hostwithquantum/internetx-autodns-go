// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskLimit task limit
//
// swagger:model TaskLimit
type TaskLimit struct {

	// The current count if available
	Count int32 `json:"count,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The included count for each child
	InclusiveChildren int32 `json:"inclusiveChildren,omitempty"`

	// The self included count
	InclusiveSelf int32 `json:"inclusiveSelf,omitempty"`

	// The limited count for each child
	LimitChildren int32 `json:"limitChildren,omitempty"`

	// The self limit count
	LimitSelf int32 `json:"limitSelf,omitempty"`

	// The selected task group
	TaskGroup TaskGroup `json:"taskGroup,omitempty"`

	// The time unit for each child
	TimeUnitChildren TimeUnitConstants `json:"timeUnitChildren,omitempty"`

	// The self time unit
	TimeUnitSelf TimeUnitConstants `json:"timeUnitSelf,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The affected user
	User *BasicUser `json:"user,omitempty"`
}

// Validate validates this task limit
func (m *TaskLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeUnitChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeUnitSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskLimit) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskLimit) validateTaskGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskGroup) { // not required
		return nil
	}

	if err := m.TaskGroup.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taskGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taskGroup")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) validateTimeUnitChildren(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeUnitChildren) { // not required
		return nil
	}

	if err := m.TimeUnitChildren.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeUnitChildren")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeUnitChildren")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) validateTimeUnitSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeUnitSelf) { // not required
		return nil
	}

	if err := m.TimeUnitSelf.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeUnitSelf")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeUnitSelf")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskLimit) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task limit based on the context it is used
func (m *TaskLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaskGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeUnitChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeUnitSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskLimit) contextValidateTaskGroup(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TaskGroup) { // not required
		return nil
	}

	if err := m.TaskGroup.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taskGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taskGroup")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) contextValidateTimeUnitChildren(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TimeUnitChildren) { // not required
		return nil
	}

	if err := m.TimeUnitChildren.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeUnitChildren")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeUnitChildren")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) contextValidateTimeUnitSelf(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TimeUnitSelf) { // not required
		return nil
	}

	if err := m.TimeUnitSelf.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeUnitSelf")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeUnitSelf")
		}
		return err
	}

	return nil
}

func (m *TaskLimit) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskLimit) UnmarshalBinary(b []byte) error {
	var res TaskLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
