// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IPRestrictionTypeConstants Ip restriction type constants
//
// swagger:model IpRestrictionTypeConstants
type IPRestrictionTypeConstants string

func NewIPRestrictionTypeConstants(value IPRestrictionTypeConstants) *IPRestrictionTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IPRestrictionTypeConstants.
func (m IPRestrictionTypeConstants) Pointer() *IPRestrictionTypeConstants {
	return &m
}

const (

	// IPRestrictionTypeConstantsCLONE captures enum value "CLONE"
	IPRestrictionTypeConstantsCLONE IPRestrictionTypeConstants = "CLONE"

	// IPRestrictionTypeConstantsUSER captures enum value "USER"
	IPRestrictionTypeConstantsUSER IPRestrictionTypeConstants = "USER"

	// IPRestrictionTypeConstantsCONTEXT captures enum value "CONTEXT"
	IPRestrictionTypeConstantsCONTEXT IPRestrictionTypeConstants = "CONTEXT"
)

// for schema
var ipRestrictionTypeConstantsEnum []interface{}

func init() {
	var res []IPRestrictionTypeConstants
	if err := json.Unmarshal([]byte(`["CLONE","USER","CONTEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipRestrictionTypeConstantsEnum = append(ipRestrictionTypeConstantsEnum, v)
	}
}

func (m IPRestrictionTypeConstants) validateIPRestrictionTypeConstantsEnum(path, location string, value IPRestrictionTypeConstants) error {
	if err := validate.EnumCase(path, location, value, ipRestrictionTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Ip restriction type constants
func (m IPRestrictionTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIPRestrictionTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Ip restriction type constants based on context it is used
func (m IPRestrictionTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
