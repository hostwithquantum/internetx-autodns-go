// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CryptoFormatConstants crypto format constants
//
// swagger:model CryptoFormatConstants
type CryptoFormatConstants string

func NewCryptoFormatConstants(value CryptoFormatConstants) *CryptoFormatConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CryptoFormatConstants.
func (m CryptoFormatConstants) Pointer() *CryptoFormatConstants {
	return &m
}

const (

	// CryptoFormatConstantsSHA1 captures enum value "SHA1"
	CryptoFormatConstantsSHA1 CryptoFormatConstants = "SHA1"

	// CryptoFormatConstantsSHA256 captures enum value "SHA256"
	CryptoFormatConstantsSHA256 CryptoFormatConstants = "SHA256"

	// CryptoFormatConstantsSHA512 captures enum value "SHA512"
	CryptoFormatConstantsSHA512 CryptoFormatConstants = "SHA512"
)

// for schema
var cryptoFormatConstantsEnum []interface{}

func init() {
	var res []CryptoFormatConstants
	if err := json.Unmarshal([]byte(`["SHA1","SHA256","SHA512"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cryptoFormatConstantsEnum = append(cryptoFormatConstantsEnum, v)
	}
}

func (m CryptoFormatConstants) validateCryptoFormatConstantsEnum(path, location string, value CryptoFormatConstants) error {
	if err := validate.EnumCase(path, location, value, cryptoFormatConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this crypto format constants
func (m CryptoFormatConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCryptoFormatConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this crypto format constants based on context it is used
func (m CryptoFormatConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
