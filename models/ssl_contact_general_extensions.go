// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SslContactGeneralExtensions ssl contact general extensions
//
// swagger:model SslContactGeneralExtensions
type SslContactGeneralExtensions struct {

	// Additional validation data required for certain Comodo products.
	BusinessCategory BusinessCategory `json:"businessCategory,omitempty"`

	// The company number
	CompanyNumber string `json:"companyNumber,omitempty"`

	// Country of judicial formation
	// Example: DE
	JoiCountryName string `json:"joiCountryName,omitempty"`

	// Locality or city of judicial formation
	JoiLocality string `json:"joiLocality,omitempty"`

	// State or province of judicial formation
	JoiStateOrProvince string `json:"joiStateOrProvince,omitempty"`

	// The Organisational Identifier is the company/organization's registration number. It can either be a VAT, NTR, LEI number. You can provide GOV-identifier ( GOV + Country Code ) if it is a governmental organisation. INTXG if none matches.
	// Example: VAT = DE12345678, NTR = DE-BY-12345678, LEI= LEIXG353800KCIOO2YWF3VP62, GOV = GOVUS, INTXG=INTXG
	OrganisationalIdentifier string `json:"organisationalIdentifier,omitempty"`
}

// Validate validates this ssl contact general extensions
func (m *SslContactGeneralExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslContactGeneralExtensions) validateBusinessCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessCategory) { // not required
		return nil
	}

	if err := m.BusinessCategory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("businessCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("businessCategory")
		}
		return err
	}

	return nil
}

// ContextValidate validate this ssl contact general extensions based on the context it is used
func (m *SslContactGeneralExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslContactGeneralExtensions) contextValidateBusinessCategory(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessCategory) { // not required
		return nil
	}

	if err := m.BusinessCategory.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("businessCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("businessCategory")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslContactGeneralExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslContactGeneralExtensions) UnmarshalBinary(b []byte) error {
	var res SslContactGeneralExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
