// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PriceChangeStatusConstants price change status constants
//
// swagger:model PriceChangeStatusConstants
type PriceChangeStatusConstants string

func NewPriceChangeStatusConstants(value PriceChangeStatusConstants) *PriceChangeStatusConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PriceChangeStatusConstants.
func (m PriceChangeStatusConstants) Pointer() *PriceChangeStatusConstants {
	return &m
}

const (

	// PriceChangeStatusConstantsPENDING captures enum value "PENDING"
	PriceChangeStatusConstantsPENDING PriceChangeStatusConstants = "PENDING"

	// PriceChangeStatusConstantsSUCCESS captures enum value "SUCCESS"
	PriceChangeStatusConstantsSUCCESS PriceChangeStatusConstants = "SUCCESS"

	// PriceChangeStatusConstantsFAILED captures enum value "FAILED"
	PriceChangeStatusConstantsFAILED PriceChangeStatusConstants = "FAILED"

	// PriceChangeStatusConstantsNOTSET captures enum value "NOT_SET"
	PriceChangeStatusConstantsNOTSET PriceChangeStatusConstants = "NOT_SET"

	// PriceChangeStatusConstantsCONFIRMED captures enum value "CONFIRMED"
	PriceChangeStatusConstantsCONFIRMED PriceChangeStatusConstants = "CONFIRMED"

	// PriceChangeStatusConstantsFINISHED captures enum value "FINISHED"
	PriceChangeStatusConstantsFINISHED PriceChangeStatusConstants = "FINISHED"

	// PriceChangeStatusConstantsPREPARE captures enum value "PREPARE"
	PriceChangeStatusConstantsPREPARE PriceChangeStatusConstants = "PREPARE"
)

// for schema
var priceChangeStatusConstantsEnum []interface{}

func init() {
	var res []PriceChangeStatusConstants
	if err := json.Unmarshal([]byte(`["PENDING","SUCCESS","FAILED","NOT_SET","CONFIRMED","FINISHED","PREPARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceChangeStatusConstantsEnum = append(priceChangeStatusConstantsEnum, v)
	}
}

func (m PriceChangeStatusConstants) validatePriceChangeStatusConstantsEnum(path, location string, value PriceChangeStatusConstants) error {
	if err := validate.EnumCase(path, location, value, priceChangeStatusConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this price change status constants
func (m PriceChangeStatusConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePriceChangeStatusConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this price change status constants based on context it is used
func (m PriceChangeStatusConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
