// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimplePrice simple price
//
// swagger:model SimplePrice
type SimplePrice struct {

	// The gross amount of the calculation
	Amount float64 `json:"amount,omitempty"`

	// The business case
	BusinessCase string `json:"businessCase,omitempty"`

	// The billing currency
	Currency string `json:"currency,omitempty"`

	// Custom values,such as price class
	// Unique: true
	Customs []*Custom `json:"customs"`

	// The net amount of the calculation
	NetAmount float64 `json:"netAmount,omitempty"`

	// The period for the price calculation
	Period *TimePeriod `json:"period,omitempty"`

	// The price. Note the currency can be differ from the billing currency
	Price *ExchangedPrice `json:"price,omitempty"`

	// The calculated vat amount
	VatAmount float64 `json:"vatAmount,omitempty"`

	// The currency rate for the view currency
	View *CurrencyRate `json:"view,omitempty"`
}

// Validate validates this simple price
func (m *SimplePrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustoms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimplePrice) validateCustoms(formats strfmt.Registry) error {

	if swag.IsZero(m.Customs) { // not required
		return nil
	}

	if err := validate.UniqueItems("customs", "body", m.Customs); err != nil {
		return err
	}

	for i := 0; i < len(m.Customs); i++ {
		if swag.IsZero(m.Customs[i]) { // not required
			continue
		}

		if m.Customs[i] != nil {
			if err := m.Customs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimplePrice) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *SimplePrice) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *SimplePrice) validateView(formats strfmt.Registry) error {

	if swag.IsZero(m.View) { // not required
		return nil
	}

	if m.View != nil {
		if err := m.View.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimplePrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimplePrice) UnmarshalBinary(b []byte) error {
	var res SimplePrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
