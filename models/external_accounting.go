// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalAccounting external accounting
//
// swagger:model ExternalAccounting
type ExternalAccounting struct {

	// Used country. Needed for calculation of taxes
	// Example: DE
	Country string `json:"country,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The creditLimit for the customer of the accounting
	CreditLimit float64 `json:"creditLimit,omitempty"`

	// The creditor identifier
	CreditorIdentifier string `json:"creditorIdentifier,omitempty"`

	// Used currency
	// Example: EUR
	Currency string `json:"currency,omitempty"`

	// The upper end of the generated customer group numbers
	CustomerNumberMax int64 `json:"customerNumberMax,omitempty"`

	// The lower end of the generated customer group numbers
	CustomerNumberMin int64 `json:"customerNumberMin,omitempty"`

	// Enables promo prices syncronization
	EnablePromoPrice bool `json:"enablePromoPrice,omitempty"`

	// The label to identify the provider
	Label string `json:"label,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// The date when the last pricelist sync finished
	// Format: date-time
	PriceListSync strfmt.DateTime `json:"priceListSync,omitempty"`

	// The status of the pricelist sync
	PriceListSyncStatus GenericStatusConstants `json:"priceListSyncStatus,omitempty"`

	// markup value in percent or absolute
	PriceMarkup float64 `json:"priceMarkup,omitempty"`

	// The type of markup
	PriceMarkupType PriceMarkupType `json:"priceMarkupType,omitempty"`

	// The type of rounding
	PriceRounding PriceRoundingConstants `json:"priceRounding,omitempty"`

	// The price type
	PriceType PriceTypeConstants `json:"priceType,omitempty"`

	// The provider of the external_accounting
	Provider *ProviderEntity `json:"provider,omitempty"`

	// The email address for reporting
	ReportTo string `json:"reportTo,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this external accounting
func (m *ExternalAccounting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceListSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceListSyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceMarkupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceRounding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalAccounting) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalAccounting) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccounting) validatePriceListSync(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceListSync) { // not required
		return nil
	}

	if err := validate.FormatOf("priceListSync", "body", "date-time", m.PriceListSync.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalAccounting) validatePriceListSyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceListSyncStatus) { // not required
		return nil
	}

	if err := m.PriceListSyncStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceListSyncStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceListSyncStatus")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) validatePriceMarkupType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceMarkupType) { // not required
		return nil
	}

	if err := m.PriceMarkupType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceMarkupType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceMarkupType")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) validatePriceRounding(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceRounding) { // not required
		return nil
	}

	if err := m.PriceRounding.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceRounding")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceRounding")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) validatePriceType(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if err := m.PriceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceType")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccounting) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalAccounting) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this external accounting based on the context it is used
func (m *ExternalAccounting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceListSyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceMarkupType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceRounding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalAccounting) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccounting) contextValidatePriceListSyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PriceListSyncStatus) { // not required
		return nil
	}

	if err := m.PriceListSyncStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceListSyncStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceListSyncStatus")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) contextValidatePriceMarkupType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PriceMarkupType) { // not required
		return nil
	}

	if err := m.PriceMarkupType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceMarkupType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceMarkupType")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) contextValidatePriceRounding(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PriceRounding) { // not required
		return nil
	}

	if err := m.PriceRounding.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceRounding")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceRounding")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) contextValidatePriceType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	if err := m.PriceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priceType")
		}
		return err
	}

	return nil
}

func (m *ExternalAccounting) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {

		if swag.IsZero(m.Provider) { // not required
			return nil
		}

		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccounting) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalAccounting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalAccounting) UnmarshalBinary(b []byte) error {
	var res ExternalAccounting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
