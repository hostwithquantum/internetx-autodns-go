// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TechnicalCustomer technical customer
//
// swagger:model TechnicalCustomer
type TechnicalCustomer struct {

	// adopt expiration
	AdoptExpiration *AdoptExpiration `json:"adoptExpiration,omitempty"`

	// auto delete tlds
	AutoDeleteTlds string `json:"autoDeleteTlds,omitempty"`

	// billing term
	BillingTerm *BillingTerm `json:"billingTerm,omitempty"`

	// Account Label.
	Client string `json:"client,omitempty"`

	// Customer group, first 5 numbers of the account number. e.g.
	// Example: 13516
	Group int64 `json:"group,omitempty"`

	// Customer number
	Number int64 `json:"number,omitempty"`
}

// Validate validates this technical customer
func (m *TechnicalCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdoptExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TechnicalCustomer) validateAdoptExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.AdoptExpiration) { // not required
		return nil
	}

	if m.AdoptExpiration != nil {
		if err := m.AdoptExpiration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adoptExpiration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adoptExpiration")
			}
			return err
		}
	}

	return nil
}

func (m *TechnicalCustomer) validateBillingTerm(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingTerm) { // not required
		return nil
	}

	if m.BillingTerm != nil {
		if err := m.BillingTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingTerm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingTerm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this technical customer based on the context it is used
func (m *TechnicalCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdoptExpiration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingTerm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TechnicalCustomer) contextValidateAdoptExpiration(ctx context.Context, formats strfmt.Registry) error {

	if m.AdoptExpiration != nil {

		if swag.IsZero(m.AdoptExpiration) { // not required
			return nil
		}

		if err := m.AdoptExpiration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adoptExpiration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adoptExpiration")
			}
			return err
		}
	}

	return nil
}

func (m *TechnicalCustomer) contextValidateBillingTerm(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingTerm != nil {

		if swag.IsZero(m.BillingTerm) { // not required
			return nil
		}

		if err := m.BillingTerm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingTerm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingTerm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TechnicalCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TechnicalCustomer) UnmarshalBinary(b []byte) error {
	var res TechnicalCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
