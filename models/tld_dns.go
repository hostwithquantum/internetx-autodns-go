// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TldDNS tld Dns
//
// swagger:model TldDns
type TldDNS struct {

	// dnssec algorithms
	DnssecAlgorithms []int32 `json:"dnssecAlgorithms"`

	// dnssec max
	DnssecMax int32 `json:"dnssecMax,omitempty"`

	// dnssec min
	DnssecMin int32 `json:"dnssecMin,omitempty"`

	// ipv4 max
	IPV4Max int32 `json:"ipv4Max,omitempty"`

	// ipv4 min
	IPV4Min int32 `json:"ipv4Min,omitempty"`

	// ipv6 max
	IPV6Max int32 `json:"ipv6Max,omitempty"`

	// ipv6 min
	IPV6Min int32 `json:"ipv6Min,omitempty"`

	// nsentry max
	NsentryMax int32 `json:"nsentryMax,omitempty"`

	// nsentry min
	NsentryMin int32 `json:"nsentryMin,omitempty"`

	// nserver max
	NserverMax int32 `json:"nserverMax,omitempty"`

	// nserver min
	NserverMin int32 `json:"nserverMin,omitempty"`
}

// Validate validates this tld Dns
func (m *TldDNS) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tld Dns based on context it is used
func (m *TldDNS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TldDNS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TldDNS) UnmarshalBinary(b []byte) error {
	var res TldDNS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
