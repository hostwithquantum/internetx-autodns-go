// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainEnvelopeSearchRequest domain envelope search request
//
// swagger:model DomainEnvelopeSearchRequest
type DomainEnvelopeSearchRequest struct {

	// Allow duplicate domain names from different sources.
	AllowDuplicates bool `json:"allowDuplicates,omitempty"`

	// Activates the check for each domain whether the user already owns it.
	CheckPortfolio bool `json:"checkPortfolio,omitempty"`

	// The ip of the client
	ClientIP string `json:"clientIp,omitempty"`

	// The currency for every price lookup
	Currency string `json:"currency,omitempty"`

	// Activates debugging
	Debug bool `json:"debug,omitempty"`

	// All whois checks will be done via dns check.
	ForceDNSCheck bool `json:"forceDnsCheck,omitempty"`

	// Defines whether to return only free domain names when service WHOIS is used for a source.
	OnlyAvailable bool `json:"onlyAvailable,omitempty"`

	// Domain search token
	SearchToken string `json:"searchToken,omitempty"`

	// Wrapper for the configuration for each source
	Sources *DomainStudioSources `json:"sources,omitempty"`
}

// Validate validates this domain envelope search request
func (m *DomainEnvelopeSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEnvelopeSearchRequest) validateSources(formats strfmt.Registry) error {

	if swag.IsZero(m.Sources) { // not required
		return nil
	}

	if m.Sources != nil {
		if err := m.Sources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainEnvelopeSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainEnvelopeSearchRequest) UnmarshalBinary(b []byte) error {
	var res DomainEnvelopeSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
