// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPreregAddon domain prereg addon
//
// swagger:model DomainPreregAddon
type DomainPreregAddon struct {

	// IP from which the trademark registration was confirmed.
	ConfirmIP string `json:"confirmIp,omitempty"`

	// Confirmation of the order
	//
	// false = No confirmation
	// true = Confirmation
	// Default value = false
	ConfirmOrder bool `json:"confirmOrder,omitempty"`

	// Date on which the trademark registration was confirmed.
	// Format: date-time
	Confirmed strfmt.DateTime `json:"confirmed,omitempty"`

	// Reference of the trademark entry.
	ExternalReference string `json:"externalReference,omitempty"`

	// The Irp App Capacity.
	IrpAppCapacit string `json:"irpAppCapacit,omitempty"`

	// Date on which the trademark was applied for.
	// Format: date-time
	IrpAppDate strfmt.DateTime `json:"irpAppDate,omitempty"`

	// Country code of where the trademark is registered.
	IrpCcLocality string `json:"irpCcLocality,omitempty"`

	// Name of the right or trademark.
	IrpName string `json:"irpName,omitempty"`

	// Number of the right or trademark.
	IrpNumber string `json:"irpNumber,omitempty"`

	// The pre-validation code.
	IrpPvrc string `json:"irpPvrc,omitempty"`

	// Date on which the mark was assigned.
	// Format: date-time
	IrpRegDate strfmt.DateTime `json:"irpRegDate,omitempty"`

	// The addon update mode, defining the procedure upon updating addons.
	// Example: MERGE, REPLACE
	Mode string `json:"mode,omitempty"`

	// Date until which the trademark registration is valid.
	// Format: date-time
	NotAfter strfmt.DateTime `json:"notAfter,omitempty"`

	// Price class of the domain.
	PriceClass string `json:"priceClass,omitempty"`
}

// Validate validates this domain prereg addon
func (m *DomainPreregAddon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrpAppDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrpRegDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPreregAddon) validateConfirmed(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmed) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmed", "body", "date-time", m.Confirmed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPreregAddon) validateIrpAppDate(formats strfmt.Registry) error {
	if swag.IsZero(m.IrpAppDate) { // not required
		return nil
	}

	if err := validate.FormatOf("irpAppDate", "body", "date-time", m.IrpAppDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPreregAddon) validateIrpRegDate(formats strfmt.Registry) error {
	if swag.IsZero(m.IrpRegDate) { // not required
		return nil
	}

	if err := validate.FormatOf("irpRegDate", "body", "date-time", m.IrpRegDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPreregAddon) validateNotAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("notAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain prereg addon based on context it is used
func (m *DomainPreregAddon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainPreregAddon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPreregAddon) UnmarshalBinary(b []byte) error {
	var res DomainPreregAddon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
