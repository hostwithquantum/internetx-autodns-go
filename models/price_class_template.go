// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceClassTemplate price class template
//
// swagger:model PriceClassTemplate
type PriceClassTemplate struct {

	// The actual amount, before the price change processing
	ActualAmount float64 `json:"actualAmount,omitempty"`

	// Actual currency
	// Example: EUR
	ActualCurrency string `json:"actualCurrency,omitempty"`

	// Amount
	Amount float64 `json:"amount,omitempty"`

	// Lorem Ipum
	BusinessCase *BusinessCase `json:"businessCase,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Used currency
	// Example: EUR
	Currency string `json:"currency,omitempty"`

	// Customer
	Customer *GenericCustomer `json:"customer,omitempty"`

	// Indicates if price discountable is possible
	Discountable bool `json:"discountable,omitempty"`

	// The unique identifier of the price
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// The margin between amount and purchase amount
	Margin float32 `json:"margin,omitempty"`

	// Namee of the price class
	Name string `json:"name,omitempty"`

	// The activity period of a product
	Period *TimePeriod `json:"period,omitempty"`

	// The priceChange
	PriceChange *PriceChange `json:"priceChange,omitempty"`

	// ProductPriceTemplate Price condition
	PriceConditions []*PriceServiceEntity `json:"priceConditions"`

	// Priority
	Priority PriorityConstants `json:"priority,omitempty"`

	// The actual purchase amount
	PurchaseAmount float64 `json:"purchaseAmount,omitempty"`

	// The rounding strategy
	Relative RelativeConstants `json:"relative,omitempty"`

	// type of the article
	Type string `json:"type,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this price class template
func (m *PriceClassTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelative(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceClassTemplate) validateBusinessCase(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessCase) { // not required
		return nil
	}

	if m.BusinessCase != nil {
		if err := m.BusinessCase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessCase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessCase")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceClassTemplate) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) validatePeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) validatePriceChange(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceChange) { // not required
		return nil
	}

	if m.PriceChange != nil {
		if err := m.PriceChange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceChange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priceChange")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) validatePriceConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceConditions); i++ {
		if swag.IsZero(m.PriceConditions[i]) { // not required
			continue
		}

		if m.PriceConditions[i] != nil {
			if err := m.PriceConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceClassTemplate) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *PriceClassTemplate) validateRelative(formats strfmt.Registry) error {
	if swag.IsZero(m.Relative) { // not required
		return nil
	}

	if err := m.Relative.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relative")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relative")
		}
		return err
	}

	return nil
}

func (m *PriceClassTemplate) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this price class template based on the context it is used
func (m *PriceClassTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessCase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceChange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelative(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceClassTemplate) contextValidateBusinessCase(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessCase != nil {

		if swag.IsZero(m.BusinessCase) { // not required
			return nil
		}

		if err := m.BusinessCase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessCase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessCase")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {

		if swag.IsZero(m.Period) { // not required
			return nil
		}

		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) contextValidatePriceChange(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceChange != nil {

		if swag.IsZero(m.PriceChange) { // not required
			return nil
		}

		if err := m.PriceChange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceChange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priceChange")
			}
			return err
		}
	}

	return nil
}

func (m *PriceClassTemplate) contextValidatePriceConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceConditions); i++ {

		if m.PriceConditions[i] != nil {

			if swag.IsZero(m.PriceConditions[i]) { // not required
				return nil
			}

			if err := m.PriceConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceClassTemplate) contextValidatePriority(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *PriceClassTemplate) contextValidateRelative(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Relative) { // not required
		return nil
	}

	if err := m.Relative.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relative")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relative")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceClassTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceClassTemplate) UnmarshalBinary(b []byte) error {
	var res PriceClassTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
