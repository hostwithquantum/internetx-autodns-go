// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Certificate certificate
//
// swagger:model Certificate
type Certificate struct {

	// The administrative contact
	AdminContact *SslContact `json:"adminContact,omitempty"`

	// The authentication of the certificate
	Authentication *CertAuthentication `json:"authentication,omitempty"`

	// Activates the certificate transparency for a certificate. Default is "True".
	CertificateTransparency bool `json:"certificateTransparency,omitempty"`

	// The privacy settings for certificate transparency. Default is "Redacted".
	CertificateTransparencyPrivacy CertificateTransparencyPrivacyConstants `json:"certificateTransparencyPrivacy,omitempty"`

	// The type of the certificate
	CertificateType CertificateType `json:"certificateType,omitempty"`

	// The certificate authority chain
	CertificationAuthority []*CaCertificate `json:"certificationAuthority"`

	// The hardware platform for the code signing token.
	CodeSigningHardwarePlatform CodeSigningHardwarePlatform `json:"codeSigningHardwarePlatform,omitempty"`

	// The provisioning method for the code signing token
	CodeSigningProvisioningMethod CodeSigningProvisioningMethod `json:"codeSigningProvisioningMethod,omitempty"`

	// The type of code signing
	CodeSigningType CodeSigningType `json:"codeSigningType,omitempty"`

	// A custom field. Can only be updated via PUT /certificate/{id}/_comment. Requires appropriate ACLs.
	Comment string `json:"comment,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// CSR - Key (Certificate Signing Request)
	Csr string `json:"csr,omitempty"`

	// The domain, which the redirect belongs.
	Domain string `json:"domain,omitempty"`

	// The date on which the certificate expires
	// Format: date-time
	Expire strfmt.DateTime `json:"expire,omitempty"`

	// The certificate extensions for comodo.
	Extension *ExtendedValidationExtension `json:"extension,omitempty"`

	// First Name. Only for S/MIME!
	Firstname string `json:"firstname,omitempty"`

	// States if a self created CSR is to be used for S/MIME. Default is false. Only for S/MIME!
	HasCsr bool `json:"hasCsr,omitempty"`

	// The history of the certificate (old certificate versions)
	Histories []*CertificateHistory `json:"histories"`

	// The ID of the certificate
	ID int32 `json:"id,omitempty"`

	// The IDN version of the URL of the target domain.
	Idn string `json:"idn,omitempty"`

	// Last Name. Only for S/MIME!
	Lastname string `json:"lastname,omitempty"`

	// The certificate term in months
	// Required: true
	Lifetime *TimePeriod `json:"lifetime"`

	// The name of the certificate
	Name string `json:"name,omitempty"`

	// The unique certificate order number
	OrderID string `json:"orderId,omitempty"`

	// The organization unit. Only for S/MIME!
	OrganizationUnitName string `json:"organizationUnitName,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// The order number of the related request
	PartnerOrderID string `json:"partnerOrderId,omitempty"`

	// The password that is to be used for the certificate download. Only for S/MIME!
	// Pattern: ^[a-zA-Z0-9]{8,32}$
	Password string `json:"password,omitempty"`

	// The ordered product
	// Required: true
	Product *string `json:"product"`

	// Serial number of the certificate
	SerialNumber string `json:"serialNumber,omitempty"`

	// The certificate
	Server string `json:"server,omitempty"`

	// The signature hash algorithm which was used
	SignatureHashAlgorithm SignatureHashAlgorithmConstants `json:"signatureHashAlgorithm,omitempty"`

	// The webserver software in use, relevant values: 'II5' for Mircosoft, 'APACHE2' for Linux
	// Required: true
	Software ServerSoftwareTypeConstants `json:"software"`

	// Subject Alternative Names (SANs)
	SubjectAlternativeNames []*SubjectAlternativeName `json:"subjectAlternativeNames"`

	// The technical contact
	TechnicalContact *SslContact `json:"technicalContact,omitempty"`

	// The technical contact email address. Only used in realtime orders!
	TechnicalContactEmail string `json:"technicalContactEmail,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updating user of the object.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this certificate
func (m *Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateTransparencyPrivacy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificationAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeSigningHardwarePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeSigningProvisioningMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeSigningType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureHashAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAlternativeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Certificate) validateAdminContact(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminContact) { // not required
		return nil
	}

	if m.AdminContact != nil {
		if err := m.AdminContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminContact")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validateCertificateTransparencyPrivacy(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateTransparencyPrivacy) { // not required
		return nil
	}

	if err := m.CertificateTransparencyPrivacy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("certificateTransparencyPrivacy")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateCertificateType(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateType) { // not required
		return nil
	}

	if err := m.CertificateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("certificateType")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateCertificationAuthority(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificationAuthority) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificationAuthority); i++ {
		if swag.IsZero(m.CertificationAuthority[i]) { // not required
			continue
		}

		if m.CertificationAuthority[i] != nil {
			if err := m.CertificationAuthority[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificationAuthority" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Certificate) validateCodeSigningHardwarePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.CodeSigningHardwarePlatform) { // not required
		return nil
	}

	if err := m.CodeSigningHardwarePlatform.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("codeSigningHardwarePlatform")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateCodeSigningProvisioningMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.CodeSigningProvisioningMethod) { // not required
		return nil
	}

	if err := m.CodeSigningProvisioningMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("codeSigningProvisioningMethod")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateCodeSigningType(formats strfmt.Registry) error {

	if swag.IsZero(m.CodeSigningType) { // not required
		return nil
	}

	if err := m.CodeSigningType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("codeSigningType")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.Expire) { // not required
		return nil
	}

	if err := validate.FormatOf("expire", "body", "date-time", m.Expire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validateHistories(formats strfmt.Registry) error {

	if swag.IsZero(m.Histories) { // not required
		return nil
	}

	for i := 0; i < len(m.Histories); i++ {
		if swag.IsZero(m.Histories[i]) { // not required
			continue
		}

		if m.Histories[i] != nil {
			if err := m.Histories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("histories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Certificate) validateLifetime(formats strfmt.Registry) error {

	if err := validate.Required("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	if m.Lifetime != nil {
		if err := m.Lifetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.Pattern("password", "body", string(m.Password), `^[a-zA-Z0-9]{8,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateSignatureHashAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.SignatureHashAlgorithm) { // not required
		return nil
	}

	if err := m.SignatureHashAlgorithm.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signatureHashAlgorithm")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateSoftware(formats strfmt.Registry) error {

	if err := m.Software.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("software")
		}
		return err
	}

	return nil
}

func (m *Certificate) validateSubjectAlternativeNames(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectAlternativeNames) { // not required
		return nil
	}

	for i := 0; i < len(m.SubjectAlternativeNames); i++ {
		if swag.IsZero(m.SubjectAlternativeNames[i]) { // not required
			continue
		}

		if m.SubjectAlternativeNames[i] != nil {
			if err := m.SubjectAlternativeNames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjectAlternativeNames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Certificate) validateTechnicalContact(formats strfmt.Registry) error {

	if swag.IsZero(m.TechnicalContact) { // not required
		return nil
	}

	if m.TechnicalContact != nil {
		if err := m.TechnicalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technicalContact")
			}
			return err
		}
	}

	return nil
}

func (m *Certificate) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Certificate) UnmarshalBinary(b []byte) error {
	var res Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
