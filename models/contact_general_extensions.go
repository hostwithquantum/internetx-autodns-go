// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactGeneralExtensions contact general extensions
//
// swagger:model ContactGeneralExtensions
type ContactGeneralExtensions struct {

	// The birth extensions.
	Birth *ContactBirthExtensions `json:"birth,omitempty"`

	// Citizenship. For EU citizens living outside the EU.
	Citizenship string `json:"citizenship,omitempty"`

	// Company number.
	CompanyNumber string `json:"companyNumber,omitempty"`

	// Gender.
	Gender GenderConstants `json:"gender,omitempty"`

	// The identification extensions.
	Identification *ContactIdentificationExtensions `json:"identification,omitempty"`

	// Language of the contact RFC 3066.
	// Example: \"de\" or \"de_ch\
	Language string `json:"language,omitempty"`

	// Mobile phone number.
	// Example: +49-123-123
	MobilePhone string `json:"mobilePhone,omitempty"`

	// If strict mode should be used for the registry mapping.
	Strict bool `json:"strict,omitempty"`

	// The trademark extensions.
	Trademark *ContactTrademarkExtensions `json:"trademark,omitempty"`

	// VAT number.
	VatNumber string `json:"vatNumber,omitempty"`
}

// Validate validates this contact general extensions
func (m *ContactGeneralExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrademark(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactGeneralExtensions) validateBirth(formats strfmt.Registry) error {
	if swag.IsZero(m.Birth) { // not required
		return nil
	}

	if m.Birth != nil {
		if err := m.Birth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("birth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("birth")
			}
			return err
		}
	}

	return nil
}

func (m *ContactGeneralExtensions) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if err := m.Gender.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *ContactGeneralExtensions) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *ContactGeneralExtensions) validateTrademark(formats strfmt.Registry) error {
	if swag.IsZero(m.Trademark) { // not required
		return nil
	}

	if m.Trademark != nil {
		if err := m.Trademark.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trademark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trademark")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contact general extensions based on the context it is used
func (m *ContactGeneralExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBirth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrademark(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactGeneralExtensions) contextValidateBirth(ctx context.Context, formats strfmt.Registry) error {

	if m.Birth != nil {

		if swag.IsZero(m.Birth) { // not required
			return nil
		}

		if err := m.Birth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("birth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("birth")
			}
			return err
		}
	}

	return nil
}

func (m *ContactGeneralExtensions) contextValidateGender(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if err := m.Gender.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *ContactGeneralExtensions) contextValidateIdentification(ctx context.Context, formats strfmt.Registry) error {

	if m.Identification != nil {

		if swag.IsZero(m.Identification) { // not required
			return nil
		}

		if err := m.Identification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *ContactGeneralExtensions) contextValidateTrademark(ctx context.Context, formats strfmt.Registry) error {

	if m.Trademark != nil {

		if swag.IsZero(m.Trademark) { // not required
			return nil
		}

		if err := m.Trademark.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trademark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trademark")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactGeneralExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactGeneralExtensions) UnmarshalBinary(b []byte) error {
	var res ContactGeneralExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
