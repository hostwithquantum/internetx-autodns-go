// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CodeSigningType code signing type
//
// swagger:model CodeSigningType
type CodeSigningType string

const (

	// CodeSigningTypeJAVASOFT captures enum value "JAVASOFT"
	CodeSigningTypeJAVASOFT CodeSigningType = "JAVASOFT"

	// CodeSigningTypeMSAUTHENTICODE captures enum value "MS_AUTHENTICODE"
	CodeSigningTypeMSAUTHENTICODE CodeSigningType = "MS_AUTHENTICODE"

	// CodeSigningTypeVBA captures enum value "VBA"
	CodeSigningTypeVBA CodeSigningType = "VBA"

	// CodeSigningTypeADOBEAIR captures enum value "ADOBE_AIR"
	CodeSigningTypeADOBEAIR CodeSigningType = "ADOBE_AIR"

	// CodeSigningTypeAPPLE captures enum value "APPLE"
	CodeSigningTypeAPPLE CodeSigningType = "APPLE"

	// CodeSigningTypeMOZILLA captures enum value "MOZILLA"
	CodeSigningTypeMOZILLA CodeSigningType = "MOZILLA"

	// CodeSigningTypeOTHER captures enum value "OTHER"
	CodeSigningTypeOTHER CodeSigningType = "OTHER"
)

// for schema
var codeSigningTypeEnum []interface{}

func init() {
	var res []CodeSigningType
	if err := json.Unmarshal([]byte(`["JAVASOFT","MS_AUTHENTICODE","VBA","ADOBE_AIR","APPLE","MOZILLA","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeSigningTypeEnum = append(codeSigningTypeEnum, v)
	}
}

func (m CodeSigningType) validateCodeSigningTypeEnum(path, location string, value CodeSigningType) error {
	if err := validate.EnumCase(path, location, value, codeSigningTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this code signing type
func (m CodeSigningType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCodeSigningTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
