// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Operator operator
//
// swagger:model Operator
type Operator string

func NewOperator(value Operator) *Operator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Operator.
func (m Operator) Pointer() *Operator {
	return &m
}

const (

	// OperatorEQUAL captures enum value "EQUAL"
	OperatorEQUAL Operator = "EQUAL"

	// OperatorNOTEQUAL captures enum value "NOT_EQUAL"
	OperatorNOTEQUAL Operator = "NOT_EQUAL"

	// OperatorNOTLIKE captures enum value "NOT_LIKE"
	OperatorNOTLIKE Operator = "NOT_LIKE"

	// OperatorLIKE captures enum value "LIKE"
	OperatorLIKE Operator = "LIKE"

	// OperatorILIKE captures enum value "ILIKE"
	OperatorILIKE Operator = "ILIKE"

	// OperatorGREATER captures enum value "GREATER"
	OperatorGREATER Operator = "GREATER"

	// OperatorGREATEREQUAL captures enum value "GREATER_EQUAL"
	OperatorGREATEREQUAL Operator = "GREATER_EQUAL"

	// OperatorLESS captures enum value "LESS"
	OperatorLESS Operator = "LESS"

	// OperatorLESSEQUAL captures enum value "LESS_EQUAL"
	OperatorLESSEQUAL Operator = "LESS_EQUAL"

	// OperatorISNULL captures enum value "IS_NULL"
	OperatorISNULL Operator = "IS_NULL"

	// OperatorISNOTNULL captures enum value "IS_NOT_NULL"
	OperatorISNOTNULL Operator = "IS_NOT_NULL"

	// OperatorNOTLESS captures enum value "NOT_LESS"
	OperatorNOTLESS Operator = "NOT_LESS"

	// OperatorNOTGREATER captures enum value "NOT_GREATER"
	OperatorNOTGREATER Operator = "NOT_GREATER"

	// OperatorNOTLESSEQUAL captures enum value "NOT_LESS_EQUAL"
	OperatorNOTLESSEQUAL Operator = "NOT_LESS_EQUAL"

	// OperatorNOTGREATEREQUAL captures enum value "NOT_GREATER_EQUAL"
	OperatorNOTGREATEREQUAL Operator = "NOT_GREATER_EQUAL"

	// OperatorIN captures enum value "IN"
	OperatorIN Operator = "IN"

	// OperatorNOTIN captures enum value "NOT_IN"
	OperatorNOTIN Operator = "NOT_IN"
)

// for schema
var operatorEnum []interface{}

func init() {
	var res []Operator
	if err := json.Unmarshal([]byte(`["EQUAL","NOT_EQUAL","NOT_LIKE","LIKE","ILIKE","GREATER","GREATER_EQUAL","LESS","LESS_EQUAL","IS_NULL","IS_NOT_NULL","NOT_LESS","NOT_GREATER","NOT_LESS_EQUAL","NOT_GREATER_EQUAL","IN","NOT_IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operatorEnum = append(operatorEnum, v)
	}
}

func (m Operator) validateOperatorEnum(path, location string, value Operator) error {
	if err := validate.EnumCase(path, location, value, operatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operator
func (m Operator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operator based on context it is used
func (m Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
