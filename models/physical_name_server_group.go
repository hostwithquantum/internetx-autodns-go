// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalNameServerGroup physical name server group
//
// swagger:model PhysicalNameServerGroup
type PhysicalNameServerGroup struct {

	// The article name that will be used when creating zones for this group.
	ArticleLabel string `json:"articleLabel,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Support for DNSSEC by the namserver group.
	// Possible values:
	// false = DNSSEC is not supported
	// true = DNSSEC is supported
	// Default value = false
	Dnssec bool `json:"dnssec,omitempty"`

	// Custom name of the name server group.
	Name string `json:"name,omitempty"`

	// Support of zone statistics by the namserver group.
	// Possible values:
	// false = Statistics are not supported
	// true = Statistics are supported
	// Default value = false
	Statistic bool `json:"statistic,omitempty"`

	// If the group supported
	Supported NameServerMode `json:"supported,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this physical name server group
func (m *PhysicalNameServerGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalNameServerGroup) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalNameServerGroup) validateSupported(formats strfmt.Registry) error {
	if swag.IsZero(m.Supported) { // not required
		return nil
	}

	if err := m.Supported.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supported")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supported")
		}
		return err
	}

	return nil
}

func (m *PhysicalNameServerGroup) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this physical name server group based on the context it is used
func (m *PhysicalNameServerGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupported(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalNameServerGroup) contextValidateSupported(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Supported) { // not required
		return nil
	}

	if err := m.Supported.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supported")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supported")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalNameServerGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalNameServerGroup) UnmarshalBinary(b []byte) error {
	var res PhysicalNameServerGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
