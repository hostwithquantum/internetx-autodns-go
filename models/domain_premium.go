// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPremium domain premium
//
// swagger:model DomainPremium
type DomainPremium struct {

	// Additional information.
	// Example: comment_en=Without any guarantee, batchsize=1, threads=1, url=https://www.internetx.com
	Configuration Configuration `json:"configuration,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// A system of money in common use within a specific environment over time. Currency codes are used in the ISO 4217 format.
	// Example: EUR, USD
	Currency string `json:"currency,omitempty"`

	// The domain name written in Punycode syntax(IDN).
	// Example: mÃ¼ller.org
	Idn string `json:"idn,omitempty"`

	// Metrics of the domain, e.g.
	// Example: length of the sld
	Metric *Metric `json:"metric,omitempty"`

	// Sedo Make-Offer minimum price.
	MinPrice float64 `json:"minPrice,omitempty"`

	// Domain name.
	// Example: example.org
	Name string `json:"name,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// The domain status.
	// Example: FREE, ASSIGNED, INACTIVE, EAP, ON_HOLD, OFFERED, SYNC_ERROR
	PremiumStatus PremiumStatusConstants `json:"premiumStatus,omitempty"`

	// The current domain price.
	Price float64 `json:"price,omitempty"`

	// The price class of the domain when registering.
	PriceClass string `json:"priceClass,omitempty"`

	// The price class of the domain at renew.
	PriceClassRenew string `json:"priceClassRenew,omitempty"`

	// Name of the provider who provides this domain.
	Provider string `json:"provider,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this domain premium
func (m *DomainPremium) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremiumStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPremium) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPremium) validateMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPremium) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPremium) validatePremiumStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PremiumStatus) { // not required
		return nil
	}

	if err := m.PremiumStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("premiumStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("premiumStatus")
		}
		return err
	}

	return nil
}

func (m *DomainPremium) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPremium) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain premium based on the context it is used
func (m *DomainPremium) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePremiumStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPremium) contextValidateMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.Metric != nil {

		if swag.IsZero(m.Metric) { // not required
			return nil
		}

		if err := m.Metric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPremium) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPremium) contextValidatePremiumStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PremiumStatus) { // not required
		return nil
	}

	if err := m.PremiumStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("premiumStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("premiumStatus")
		}
		return err
	}

	return nil
}

func (m *DomainPremium) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainPremium) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPremium) UnmarshalBinary(b []byte) error {
	var res DomainPremium
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
