// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PriorityConstants priority constants
//
// swagger:model PriorityConstants
type PriorityConstants string

func NewPriorityConstants(value PriorityConstants) *PriorityConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PriorityConstants.
func (m PriorityConstants) Pointer() *PriorityConstants {
	return &m
}

const (

	// PriorityConstantsDEFAULT captures enum value "DEFAULT"
	PriorityConstantsDEFAULT PriorityConstants = "DEFAULT"

	// PriorityConstantsOFFER captures enum value "OFFER"
	PriorityConstantsOFFER PriorityConstants = "OFFER"

	// PriorityConstantsPROTECTED captures enum value "PROTECTED"
	PriorityConstantsPROTECTED PriorityConstants = "PROTECTED"

	// PriorityConstantsPROMO captures enum value "PROMO"
	PriorityConstantsPROMO PriorityConstants = "PROMO"
)

// for schema
var priorityConstantsEnum []interface{}

func init() {
	var res []PriorityConstants
	if err := json.Unmarshal([]byte(`["DEFAULT","OFFER","PROTECTED","PROMO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priorityConstantsEnum = append(priorityConstantsEnum, v)
	}
}

func (m PriorityConstants) validatePriorityConstantsEnum(path, location string, value PriorityConstants) error {
	if err := validate.EnumCase(path, location, value, priorityConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this priority constants
func (m PriorityConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePriorityConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this priority constants based on context it is used
func (m PriorityConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
