// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TmchContact tmch contact
//
// swagger:model TmchContact
type TmchContact struct {

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// entitlement
	// Required: true
	Entitlement TmchMarkHolderConstants `json:"entitlement"`

	// fax
	Fax string `json:"fax,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// street
	Street string `json:"street,omitempty"`
}

// Validate validates this tmch contact
func (m *TmchContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchContact) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *TmchContact) validateEntitlement(formats strfmt.Registry) error {

	if err := m.Entitlement.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("entitlement")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TmchContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TmchContact) UnmarshalBinary(b []byte) error {
	var res TmchContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
