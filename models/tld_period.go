// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TldPeriod tld period
//
// swagger:model TldPeriod
type TldPeriod struct {

	// cancelation period
	CancelationPeriod *TimePeriod `json:"cancelationPeriod,omitempty"`

	// cutoff period
	CutoffPeriod *TimePeriod `json:"cutoffPeriod,omitempty"`

	// restore argp period
	RestoreArgpPeriod *TimePeriod `json:"restoreArgpPeriod,omitempty"`

	// restore rgp period
	RestoreRgpPeriod *TimePeriod `json:"restoreRgpPeriod,omitempty"`
}

// Validate validates this tld period
func (m *TldPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelationPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCutoffPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreArgpPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreRgpPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldPeriod) validateCancelationPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CancelationPeriod) { // not required
		return nil
	}

	if m.CancelationPeriod != nil {
		if err := m.CancelationPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelationPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cancelationPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) validateCutoffPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CutoffPeriod) { // not required
		return nil
	}

	if m.CutoffPeriod != nil {
		if err := m.CutoffPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cutoffPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cutoffPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) validateRestoreArgpPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreArgpPeriod) { // not required
		return nil
	}

	if m.RestoreArgpPeriod != nil {
		if err := m.RestoreArgpPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreArgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreArgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) validateRestoreRgpPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreRgpPeriod) { // not required
		return nil
	}

	if m.RestoreRgpPeriod != nil {
		if err := m.RestoreRgpPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRgpPeriod")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tld period based on the context it is used
func (m *TldPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCancelationPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCutoffPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreArgpPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreRgpPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldPeriod) contextValidateCancelationPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.CancelationPeriod != nil {

		if swag.IsZero(m.CancelationPeriod) { // not required
			return nil
		}

		if err := m.CancelationPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelationPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cancelationPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) contextValidateCutoffPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.CutoffPeriod != nil {

		if swag.IsZero(m.CutoffPeriod) { // not required
			return nil
		}

		if err := m.CutoffPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cutoffPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cutoffPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) contextValidateRestoreArgpPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreArgpPeriod != nil {

		if swag.IsZero(m.RestoreArgpPeriod) { // not required
			return nil
		}

		if err := m.RestoreArgpPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreArgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreArgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldPeriod) contextValidateRestoreRgpPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreRgpPeriod != nil {

		if swag.IsZero(m.RestoreRgpPeriod) { // not required
			return nil
		}

		if err := m.RestoreRgpPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRgpPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TldPeriod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TldPeriod) UnmarshalBinary(b []byte) error {
	var res TldPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
