// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TmchClaimsNotice tmch claims notice
//
// swagger:model TmchClaimsNotice
type TmchClaimsNotice struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// confirm IP
	ConfirmIP InetAddress `json:"confirmIP,omitempty"`

	// confirmed
	// Format: date-time
	Confirmed strfmt.DateTime `json:"confirmed,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expire
	// Format: date-time
	Expire strfmt.DateTime `json:"expire,omitempty"`

	// idn
	Idn string `json:"idn,omitempty"`

	// message sent
	// Format: date-time
	MessageSent strfmt.DateTime `json:"messageSent,omitempty"`

	// name
	Name *Domain `json:"name,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// ownerc
	Ownerc *Contact `json:"ownerc,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`

	// status
	Status GenericStatusConstants `json:"status,omitempty"`

	// tmch claims notice mails
	TmchClaimsNoticeMails []*TmchClaimsNoticeMessage `json:"tmchClaimsNoticeMails"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this tmch claims notice
func (m *TmchClaimsNotice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTmchClaimsNoticeMails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchClaimsNotice) validateConfirmed(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmed) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmed", "body", "date-time", m.Confirmed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateExpire(formats strfmt.Registry) error {
	if swag.IsZero(m.Expire) { // not required
		return nil
	}

	if err := validate.FormatOf("expire", "body", "date-time", m.Expire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateMessageSent(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageSent) { // not required
		return nil
	}

	if err := validate.FormatOf("messageSent", "body", "date-time", m.MessageSent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) validateOwnerc(formats strfmt.Registry) error {
	if swag.IsZero(m.Ownerc) { // not required
		return nil
	}

	if m.Ownerc != nil {
		if err := m.Ownerc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerc")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateTmchClaimsNoticeMails(formats strfmt.Registry) error {
	if swag.IsZero(m.TmchClaimsNoticeMails) { // not required
		return nil
	}

	for i := 0; i < len(m.TmchClaimsNoticeMails); i++ {
		if swag.IsZero(m.TmchClaimsNoticeMails[i]) { // not required
			continue
		}

		if m.TmchClaimsNoticeMails[i] != nil {
			if err := m.TmchClaimsNoticeMails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tmchClaimsNoticeMails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tmchClaimsNoticeMails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchClaimsNotice) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tmch claims notice based on the context it is used
func (m *TmchClaimsNotice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTmchClaimsNoticeMails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchClaimsNotice) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {

		if swag.IsZero(m.Name) { // not required
			return nil
		}

		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) contextValidateOwnerc(ctx context.Context, formats strfmt.Registry) error {

	if m.Ownerc != nil {

		if swag.IsZero(m.Ownerc) { // not required
			return nil
		}

		if err := m.Ownerc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerc")
			}
			return err
		}
	}

	return nil
}

func (m *TmchClaimsNotice) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TmchClaimsNotice) contextValidateTmchClaimsNoticeMails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TmchClaimsNoticeMails); i++ {

		if m.TmchClaimsNoticeMails[i] != nil {

			if swag.IsZero(m.TmchClaimsNoticeMails[i]) { // not required
				return nil
			}

			if err := m.TmchClaimsNoticeMails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tmchClaimsNoticeMails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tmchClaimsNoticeMails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchClaimsNotice) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TmchClaimsNotice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TmchClaimsNotice) UnmarshalBinary(b []byte) error {
	var res TmchClaimsNotice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
