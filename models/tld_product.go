// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TldProduct tld product
//
// swagger:model TldProduct
type TldProduct struct {

	// allowed oc cases
	AllowedOcCases []string `json:"allowedOcCases"`

	// authinfo1 location
	Authinfo1Location []AuthInfo1Location `json:"authinfo1Location"`

	// auto delete
	AutoDelete bool `json:"autoDelete,omitempty"`

	// blocking services
	BlockingServices []string `json:"blockingServices"`

	// cancelation expire only
	CancelationExpireOnly bool `json:"cancelationExpireOnly,omitempty"`

	// cancelation period
	CancelationPeriod *TimePeriod `json:"cancelationPeriod,omitempty"`

	// categories
	Categories []string `json:"categories"`

	// char max
	CharMax int32 `json:"charMax,omitempty"`

	// char min
	CharMin int32 `json:"charMin,omitempty"`

	// comment de
	CommentDe string `json:"commentDe,omitempty"`

	// comment en
	CommentEn string `json:"commentEn,omitempty"`

	// confluence page de
	ConfluencePageDe string `json:"confluencePageDe,omitempty"`

	// confluence page en
	ConfluencePageEn string `json:"confluencePageEn,omitempty"`

	// contact extensions
	ContactExtensions []string `json:"contactExtensions"`

	// country
	Country *Country `json:"country,omitempty"`

	// country iso
	CountryIso string `json:"countryIso,omitempty"`

	// data controllers
	DataControllers []*TldDataController `json:"dataControllers"`

	// dns check
	DNSCheck bool `json:"dnsCheck,omitempty"`

	// dnssec algorithms
	DnssecAlgorithms []int32 `json:"dnssecAlgorithms"`

	// dnssec max
	DnssecMax int32 `json:"dnssecMax,omitempty"`

	// dnssec min
	DnssecMin int32 `json:"dnssecMin,omitempty"`

	// dnssec record
	DnssecRecord int32 `json:"dnssecRecord,omitempty"`

	// documents
	Documents []*Document `json:"documents"`

	// error codes
	ErrorCodes []string `json:"errorCodes"`

	// forced trustee
	ForcedTrustee bool `json:"forcedTrustee,omitempty"`

	// geo pol
	GeoPol string `json:"geoPol,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// idn
	Idn []Charset `json:"idn"`

	// ipv4 max
	IPV4Max int32 `json:"ipv4Max,omitempty"`

	// ipv4 min
	IPV4Min int32 `json:"ipv4Min,omitempty"`

	// ipv6 max
	IPV6Max int32 `json:"ipv6Max,omitempty"`

	// ipv6 min
	IPV6Min int32 `json:"ipv6Min,omitempty"`

	// is manual
	IsManual bool `json:"isManual,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// nsentry max
	NsentryMax int32 `json:"nsentryMax,omitempty"`

	// nsentry min
	NsentryMin int32 `json:"nsentryMin,omitempty"`

	// nserver max
	NserverMax int32 `json:"nserverMax,omitempty"`

	// nserver min
	NserverMin int32 `json:"nserverMin,omitempty"`

	// numeral domains
	NumeralDomains bool `json:"numeralDomains,omitempty"`

	// numeric
	Numeric bool `json:"numeric,omitempty"`

	// official language
	OfficialLanguage string `json:"officialLanguage,omitempty"`

	// ownerchange authinfo
	OwnerchangeAuthinfo bool `json:"ownerchangeAuthinfo,omitempty"`

	// premium domains
	PremiumDomains bool `json:"premiumDomains,omitempty"`

	// prereg information
	PreregInformation []*PreregInformation `json:"preregInformation"`

	// privacy
	Privacy bool `json:"privacy,omitempty"`

	// ranking level
	RankingLevel int32 `json:"rankingLevel,omitempty"`

	// realtime
	Realtime bool `json:"realtime,omitempty"`

	// registrar status
	RegistrarStatus []string `json:"registrarStatus"`

	// registrars
	Registrars []*Registrar `json:"registrars"`

	// registry lock
	RegistryLock bool `json:"registryLock,omitempty"`

	// required fields
	RequiredFields []string `json:"requiredFields"`

	// restore argp period
	RestoreArgpPeriod *TimePeriod `json:"restoreArgpPeriod,omitempty"`

	// restore rgp period
	RestoreRgpPeriod *TimePeriod `json:"restoreRgpPeriod,omitempty"`

	// restrictions
	Restrictions []*Condition `json:"restrictions"`

	// root nserver
	RootNserver []string `json:"rootNserver"`

	// sedo mls
	SedoMls bool `json:"sedo_mls,omitempty"`

	// sld max
	SldMax int32 `json:"sldMax,omitempty"`

	// sld min
	SldMin int32 `json:"sldMin,omitempty"`

	// task authinfo2
	TaskAuthinfo2 bool `json:"taskAuthinfo2,omitempty"`

	// task authinfo create
	TaskAuthinfoCreate bool `json:"taskAuthinfoCreate,omitempty"`

	// task authinfo delete
	TaskAuthinfoDelete bool `json:"taskAuthinfoDelete,omitempty"`

	// task create
	TaskCreate bool `json:"taskCreate,omitempty"`

	// task delete
	TaskDelete bool `json:"taskDelete,omitempty"`

	// task owner change
	TaskOwnerChange bool `json:"taskOwnerChange,omitempty"`

	// task preack
	TaskPreack bool `json:"taskPreack,omitempty"`

	// task renew
	TaskRenew bool `json:"taskRenew,omitempty"`

	// task restore
	TaskRestore bool `json:"taskRestore,omitempty"`

	// task status update
	TaskStatusUpdate bool `json:"taskStatusUpdate,omitempty"`

	// task transfer
	TaskTransfer bool `json:"taskTransfer,omitempty"`

	// task transit
	TaskTransit bool `json:"taskTransit,omitempty"`

	// task update
	TaskUpdate bool `json:"taskUpdate,omitempty"`

	// third level
	ThirdLevel bool `json:"thirdLevel,omitempty"`

	// tld continent
	TldContinent TldContinent `json:"tldContinent,omitempty"`

	// tld Dns
	TldDNS *TldDNS `json:"tldDns,omitempty"`

	// tld period
	TldPeriod *TldPeriod `json:"tldPeriod,omitempty"`

	// tld tasks
	TldTasks []*TldTask `json:"tldTasks"`

	// tld type
	TldType TldType `json:"tldType,omitempty"`

	// transfer authinfo
	TransferAuthinfo bool `json:"transferAuthinfo,omitempty"`

	// transfer confirmation
	TransferConfirmation bool `json:"transferConfirmation,omitempty"`

	// transfer imported contacts
	TransferImportedContacts []ContactReferenceType `json:"transferImportedContacts"`

	// trustee
	Trustee bool `json:"trustee,omitempty"`

	// trustee types
	TrusteeTypes []ContactReferenceType `json:"trusteeTypes"`

	// whois
	Whois string `json:"whois,omitempty"`
}

// Validate validates this tld product
func (m *TldProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthinfo1Location(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancelationPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataControllers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreregInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreArgpPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreRgpPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTldContinent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTldDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTldPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTldTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferImportedContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrusteeTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldProduct) validateAuthinfo1Location(formats strfmt.Registry) error {
	if swag.IsZero(m.Authinfo1Location) { // not required
		return nil
	}

	for i := 0; i < len(m.Authinfo1Location); i++ {

		if err := m.Authinfo1Location[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authinfo1Location" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authinfo1Location" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) validateCancelationPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CancelationPeriod) { // not required
		return nil
	}

	if m.CancelationPeriod != nil {
		if err := m.CancelationPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelationPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cancelationPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateDataControllers(formats strfmt.Registry) error {
	if swag.IsZero(m.DataControllers) { // not required
		return nil
	}

	for i := 0; i < len(m.DataControllers); i++ {
		if swag.IsZero(m.DataControllers[i]) { // not required
			continue
		}

		if m.DataControllers[i] != nil {
			if err := m.DataControllers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataControllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataControllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateIdn(formats strfmt.Registry) error {
	if swag.IsZero(m.Idn) { // not required
		return nil
	}

	for i := 0; i < len(m.Idn); i++ {

		if err := m.Idn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idn" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idn" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) validatePreregInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PreregInformation) { // not required
		return nil
	}

	for i := 0; i < len(m.PreregInformation); i++ {
		if swag.IsZero(m.PreregInformation[i]) { // not required
			continue
		}

		if m.PreregInformation[i] != nil {
			if err := m.PreregInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preregInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preregInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateRegistrars(formats strfmt.Registry) error {
	if swag.IsZero(m.Registrars) { // not required
		return nil
	}

	for i := 0; i < len(m.Registrars); i++ {
		if swag.IsZero(m.Registrars[i]) { // not required
			continue
		}

		if m.Registrars[i] != nil {
			if err := m.Registrars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registrars" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registrars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateRestoreArgpPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreArgpPeriod) { // not required
		return nil
	}

	if m.RestoreArgpPeriod != nil {
		if err := m.RestoreArgpPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreArgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreArgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateRestoreRgpPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreRgpPeriod) { // not required
		return nil
	}

	if m.RestoreRgpPeriod != nil {
		if err := m.RestoreRgpPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.Restrictions) { // not required
		return nil
	}

	for i := 0; i < len(m.Restrictions); i++ {
		if swag.IsZero(m.Restrictions[i]) { // not required
			continue
		}

		if m.Restrictions[i] != nil {
			if err := m.Restrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateTldContinent(formats strfmt.Registry) error {
	if swag.IsZero(m.TldContinent) { // not required
		return nil
	}

	if err := m.TldContinent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tldContinent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tldContinent")
		}
		return err
	}

	return nil
}

func (m *TldProduct) validateTldDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.TldDNS) { // not required
		return nil
	}

	if m.TldDNS != nil {
		if err := m.TldDNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tldDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tldDns")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateTldPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.TldPeriod) { // not required
		return nil
	}

	if m.TldPeriod != nil {
		if err := m.TldPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tldPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tldPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) validateTldTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.TldTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.TldTasks); i++ {
		if swag.IsZero(m.TldTasks[i]) { // not required
			continue
		}

		if m.TldTasks[i] != nil {
			if err := m.TldTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tldTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tldTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) validateTldType(formats strfmt.Registry) error {
	if swag.IsZero(m.TldType) { // not required
		return nil
	}

	if err := m.TldType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tldType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tldType")
		}
		return err
	}

	return nil
}

func (m *TldProduct) validateTransferImportedContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferImportedContacts) { // not required
		return nil
	}

	for i := 0; i < len(m.TransferImportedContacts); i++ {

		if err := m.TransferImportedContacts[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferImportedContacts" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferImportedContacts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) validateTrusteeTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.TrusteeTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.TrusteeTypes); i++ {

		if err := m.TrusteeTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trusteeTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trusteeTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this tld product based on the context it is used
func (m *TldProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthinfo1Location(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCancelationPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataControllers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreregInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrars(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreArgpPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreRgpPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTldContinent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTldDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTldPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTldTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTldType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferImportedContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrusteeTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldProduct) contextValidateAuthinfo1Location(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Authinfo1Location); i++ {

		if swag.IsZero(m.Authinfo1Location[i]) { // not required
			return nil
		}

		if err := m.Authinfo1Location[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authinfo1Location" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authinfo1Location" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) contextValidateCancelationPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.CancelationPeriod != nil {

		if swag.IsZero(m.CancelationPeriod) { // not required
			return nil
		}

		if err := m.CancelationPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelationPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cancelationPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateCountry(ctx context.Context, formats strfmt.Registry) error {

	if m.Country != nil {

		if swag.IsZero(m.Country) { // not required
			return nil
		}

		if err := m.Country.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateDataControllers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataControllers); i++ {

		if m.DataControllers[i] != nil {

			if swag.IsZero(m.DataControllers[i]) { // not required
				return nil
			}

			if err := m.DataControllers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataControllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataControllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateDocuments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Documents); i++ {

		if m.Documents[i] != nil {

			if swag.IsZero(m.Documents[i]) { // not required
				return nil
			}

			if err := m.Documents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateIdn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Idn); i++ {

		if swag.IsZero(m.Idn[i]) { // not required
			return nil
		}

		if err := m.Idn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idn" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idn" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) contextValidatePreregInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreregInformation); i++ {

		if m.PreregInformation[i] != nil {

			if swag.IsZero(m.PreregInformation[i]) { // not required
				return nil
			}

			if err := m.PreregInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preregInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preregInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateRegistrars(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Registrars); i++ {

		if m.Registrars[i] != nil {

			if swag.IsZero(m.Registrars[i]) { // not required
				return nil
			}

			if err := m.Registrars[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registrars" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registrars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateRestoreArgpPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreArgpPeriod != nil {

		if swag.IsZero(m.RestoreArgpPeriod) { // not required
			return nil
		}

		if err := m.RestoreArgpPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreArgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreArgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateRestoreRgpPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreRgpPeriod != nil {

		if swag.IsZero(m.RestoreRgpPeriod) { // not required
			return nil
		}

		if err := m.RestoreRgpPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRgpPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRgpPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateRestrictions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Restrictions); i++ {

		if m.Restrictions[i] != nil {

			if swag.IsZero(m.Restrictions[i]) { // not required
				return nil
			}

			if err := m.Restrictions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateTldContinent(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TldContinent) { // not required
		return nil
	}

	if err := m.TldContinent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tldContinent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tldContinent")
		}
		return err
	}

	return nil
}

func (m *TldProduct) contextValidateTldDNS(ctx context.Context, formats strfmt.Registry) error {

	if m.TldDNS != nil {

		if swag.IsZero(m.TldDNS) { // not required
			return nil
		}

		if err := m.TldDNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tldDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tldDns")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateTldPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.TldPeriod != nil {

		if swag.IsZero(m.TldPeriod) { // not required
			return nil
		}

		if err := m.TldPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tldPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tldPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *TldProduct) contextValidateTldTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TldTasks); i++ {

		if m.TldTasks[i] != nil {

			if swag.IsZero(m.TldTasks[i]) { // not required
				return nil
			}

			if err := m.TldTasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tldTasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tldTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TldProduct) contextValidateTldType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TldType) { // not required
		return nil
	}

	if err := m.TldType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tldType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tldType")
		}
		return err
	}

	return nil
}

func (m *TldProduct) contextValidateTransferImportedContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransferImportedContacts); i++ {

		if swag.IsZero(m.TransferImportedContacts[i]) { // not required
			return nil
		}

		if err := m.TransferImportedContacts[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferImportedContacts" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferImportedContacts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TldProduct) contextValidateTrusteeTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrusteeTypes); i++ {

		if swag.IsZero(m.TrusteeTypes[i]) { // not required
			return nil
		}

		if err := m.TrusteeTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trusteeTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trusteeTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TldProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TldProduct) UnmarshalBinary(b []byte) error {
	var res TldProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
