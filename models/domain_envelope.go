// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainEnvelope domain envelope
//
// swagger:model DomainEnvelope
type DomainEnvelope struct {

	// The processing time for this domain.
	DebugTime int64 `json:"debugTime,omitempty"`

	// The domain
	// Example: domain.de
	Domain string `json:"domain,omitempty"`

	// All whois checks will be done via dns check.
	ForceDNSCheck bool `json:"forceDnsCheck,omitempty"`

	// The unicode domain name
	// Example: mÃ¼ller.org
	Idn string `json:"idn,omitempty"`

	// Defines whether this domain name is only available for preregistration.
	// Read Only: true
	IsPrereg *bool `json:"isPrereg,omitempty"`

	// Notification
	Notification *Notification `json:"notification,omitempty"`

	// Defines whether to return only free domain names when service WHOIS is used for a source.
	OnlyAvailable bool `json:"onlyAvailable,omitempty"`

	// Defines if the user already owns this domain.
	Portfolio bool `json:"portfolio,omitempty"`

	// Source
	Services *DomainStudioService `json:"services,omitempty"`

	// Source
	Source DomainStudioDomainSource `json:"source,omitempty"`

	// The subTld for the given domain name
	// Example: co
	SubTld string `json:"subTld,omitempty"`

	// The tld for the given domain name
	// Example: com
	Tld string `json:"tld,omitempty"`

	// Defines the timeout for the whois duration in seconds
	WhoisTimeout int32 `json:"whoisTimeout,omitempty"`
}

// Validate validates this domain envelope
func (m *DomainEnvelope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEnvelope) validateNotification(formats strfmt.Registry) error {
	if swag.IsZero(m.Notification) { // not required
		return nil
	}

	if m.Notification != nil {
		if err := m.Notification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEnvelope) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	if m.Services != nil {
		if err := m.Services.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEnvelope) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := m.Source.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("source")
		}
		return err
	}

	return nil
}

// ContextValidate validate this domain envelope based on the context it is used
func (m *DomainEnvelope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsPrereg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEnvelope) contextValidateIsPrereg(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isPrereg", "body", m.IsPrereg); err != nil {
		return err
	}

	return nil
}

func (m *DomainEnvelope) contextValidateNotification(ctx context.Context, formats strfmt.Registry) error {

	if m.Notification != nil {

		if swag.IsZero(m.Notification) { // not required
			return nil
		}

		if err := m.Notification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEnvelope) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	if m.Services != nil {

		if swag.IsZero(m.Services) { // not required
			return nil
		}

		if err := m.Services.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEnvelope) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := m.Source.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("source")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainEnvelope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainEnvelope) UnmarshalBinary(b []byte) error {
	var res DomainEnvelope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
