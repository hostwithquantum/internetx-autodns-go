// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainServices domain services
//
// swagger:model DomainServices
type DomainServices struct {

	// Removes pending services like BackupMX and MailProxy.
	BackupMx []*BackupMx `json:"backupMx"`

	// Removes pending services like BackupMX and MailProxy.
	DomainMonitoring []*DomainMonitoring `json:"domainMonitoring"`

	// Removes pending services like BackupMX and MailProxy.
	MailProxy []*MailProxy `json:"mailProxy"`

	// Removes pending services like BackupMX and MailProxy.
	Redirect []*Redirect `json:"redirect"`
}

// Validate validates this domain services
func (m *DomainServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupMx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainMonitoring(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirect(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainServices) validateBackupMx(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupMx) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupMx); i++ {
		if swag.IsZero(m.BackupMx[i]) { // not required
			continue
		}

		if m.BackupMx[i] != nil {
			if err := m.BackupMx[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupMx" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainServices) validateDomainMonitoring(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainMonitoring) { // not required
		return nil
	}

	for i := 0; i < len(m.DomainMonitoring); i++ {
		if swag.IsZero(m.DomainMonitoring[i]) { // not required
			continue
		}

		if m.DomainMonitoring[i] != nil {
			if err := m.DomainMonitoring[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domainMonitoring" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainServices) validateMailProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.MailProxy) { // not required
		return nil
	}

	for i := 0; i < len(m.MailProxy); i++ {
		if swag.IsZero(m.MailProxy[i]) { // not required
			continue
		}

		if m.MailProxy[i] != nil {
			if err := m.MailProxy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mailProxy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainServices) validateRedirect(formats strfmt.Registry) error {

	if swag.IsZero(m.Redirect) { // not required
		return nil
	}

	for i := 0; i < len(m.Redirect); i++ {
		if swag.IsZero(m.Redirect[i]) { // not required
			continue
		}

		if m.Redirect[i] != nil {
			if err := m.Redirect[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("redirect" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainServices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainServices) UnmarshalBinary(b []byte) error {
	var res DomainServices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
