// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GlobalSignPickupMethod global sign pickup method
//
// swagger:model GlobalSignPickupMethod
type GlobalSignPickupMethod string

func NewGlobalSignPickupMethod(value GlobalSignPickupMethod) *GlobalSignPickupMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GlobalSignPickupMethod.
func (m GlobalSignPickupMethod) Pointer() *GlobalSignPickupMethod {
	return &m
}

const (

	// GlobalSignPickupMethodEDGEIECOMPATIBILITYMODE captures enum value "EDGE_IE_COMPATIBILITY_MODE"
	GlobalSignPickupMethodEDGEIECOMPATIBILITYMODE GlobalSignPickupMethod = "EDGE_IE_COMPATIBILITY_MODE"

	// GlobalSignPickupMethodFORTIFY captures enum value "FORTIFY"
	GlobalSignPickupMethodFORTIFY GlobalSignPickupMethod = "FORTIFY"
)

// for schema
var globalSignPickupMethodEnum []interface{}

func init() {
	var res []GlobalSignPickupMethod
	if err := json.Unmarshal([]byte(`["EDGE_IE_COMPATIBILITY_MODE","FORTIFY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		globalSignPickupMethodEnum = append(globalSignPickupMethodEnum, v)
	}
}

func (m GlobalSignPickupMethod) validateGlobalSignPickupMethodEnum(path, location string, value GlobalSignPickupMethod) error {
	if err := validate.EnumCase(path, location, value, globalSignPickupMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this global sign pickup method
func (m GlobalSignPickupMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGlobalSignPickupMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this global sign pickup method based on context it is used
func (m GlobalSignPickupMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
