// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SanType san type
//
// swagger:model SanType
type SanType string

func NewSanType(value SanType) *SanType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SanType.
func (m SanType) Pointer() *SanType {
	return &m
}

const (

	// SanTypeFQDN captures enum value "FQDN"
	SanTypeFQDN SanType = "FQDN"

	// SanTypeSUBDOMAIN captures enum value "SUBDOMAIN"
	SanTypeSUBDOMAIN SanType = "SUBDOMAIN"

	// SanTypeWILDCARD captures enum value "WILDCARD"
	SanTypeWILDCARD SanType = "WILDCARD"
)

// for schema
var sanTypeEnum []interface{}

func init() {
	var res []SanType
	if err := json.Unmarshal([]byte(`["FQDN","SUBDOMAIN","WILDCARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanTypeEnum = append(sanTypeEnum, v)
	}
}

func (m SanType) validateSanTypeEnum(path, location string, value SanType) error {
	if err := validate.EnumCase(path, location, value, sanTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this san type
func (m SanType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSanTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this san type based on context it is used
func (m SanType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
