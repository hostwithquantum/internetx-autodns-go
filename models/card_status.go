// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CardStatus card status
//
// swagger:model CardStatus
type CardStatus string

func NewCardStatus(value CardStatus) *CardStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CardStatus.
func (m CardStatus) Pointer() *CardStatus {
	return &m
}

const (

	// CardStatusLOST captures enum value "LOST"
	CardStatusLOST CardStatus = "LOST"

	// CardStatusEXPIRED captures enum value "EXPIRED"
	CardStatusEXPIRED CardStatus = "EXPIRED"

	// CardStatusACTIVE captures enum value "ACTIVE"
	CardStatusACTIVE CardStatus = "ACTIVE"
)

// for schema
var cardStatusEnum []interface{}

func init() {
	var res []CardStatus
	if err := json.Unmarshal([]byte(`["LOST","EXPIRED","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardStatusEnum = append(cardStatusEnum, v)
	}
}

func (m CardStatus) validateCardStatusEnum(path, location string, value CardStatus) error {
	if err := validate.EnumCase(path, location, value, cardStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this card status
func (m CardStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCardStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this card status based on context it is used
func (m CardStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
