// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CreditCardVendor credit card vendor
//
// swagger:model CreditCardVendor
type CreditCardVendor string

func NewCreditCardVendor(value CreditCardVendor) *CreditCardVendor {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CreditCardVendor.
func (m CreditCardVendor) Pointer() *CreditCardVendor {
	return &m
}

const (

	// CreditCardVendorMC captures enum value "MC"
	CreditCardVendorMC CreditCardVendor = "MC"

	// CreditCardVendorVISA captures enum value "VISA"
	CreditCardVendorVISA CreditCardVendor = "VISA"

	// CreditCardVendorAMEX captures enum value "AMEX"
	CreditCardVendorAMEX CreditCardVendor = "AMEX"

	// CreditCardVendorDIC captures enum value "DIC"
	CreditCardVendorDIC CreditCardVendor = "DIC"

	// CreditCardVendorDISC captures enum value "DISC"
	CreditCardVendorDISC CreditCardVendor = "DISC"

	// CreditCardVendorCB captures enum value "CB"
	CreditCardVendorCB CreditCardVendor = "CB"
)

// for schema
var creditCardVendorEnum []interface{}

func init() {
	var res []CreditCardVendor
	if err := json.Unmarshal([]byte(`["MC","VISA","AMEX","DIC","DISC","CB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditCardVendorEnum = append(creditCardVendorEnum, v)
	}
}

func (m CreditCardVendor) validateCreditCardVendorEnum(path, location string, value CreditCardVendor) error {
	if err := validate.EnumCase(path, location, value, creditCardVendorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this credit card vendor
func (m CreditCardVendor) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCreditCardVendorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this credit card vendor based on context it is used
func (m CreditCardVendor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
