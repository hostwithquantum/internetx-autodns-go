// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExecutionTypeConstants execution type constants
//
// swagger:model ExecutionTypeConstants
type ExecutionTypeConstants string

func NewExecutionTypeConstants(value ExecutionTypeConstants) *ExecutionTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ExecutionTypeConstants.
func (m ExecutionTypeConstants) Pointer() *ExecutionTypeConstants {
	return &m
}

const (

	// ExecutionTypeConstantsDATE captures enum value "DATE"
	ExecutionTypeConstantsDATE ExecutionTypeConstants = "DATE"

	// ExecutionTypeConstantsEXPIRE captures enum value "EXPIRE"
	ExecutionTypeConstantsEXPIRE ExecutionTypeConstants = "EXPIRE"

	// ExecutionTypeConstantsNOW captures enum value "NOW"
	ExecutionTypeConstantsNOW ExecutionTypeConstants = "NOW"
)

// for schema
var executionTypeConstantsEnum []interface{}

func init() {
	var res []ExecutionTypeConstants
	if err := json.Unmarshal([]byte(`["DATE","EXPIRE","NOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		executionTypeConstantsEnum = append(executionTypeConstantsEnum, v)
	}
}

func (m ExecutionTypeConstants) validateExecutionTypeConstantsEnum(path, location string, value ExecutionTypeConstants) error {
	if err := validate.EnumCase(path, location, value, executionTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this execution type constants
func (m ExecutionTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExecutionTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this execution type constants based on context it is used
func (m ExecutionTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
