// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CsrHashAlgorithmConstants csr hash algorithm constants
//
// swagger:model CsrHashAlgorithmConstants
type CsrHashAlgorithmConstants string

func NewCsrHashAlgorithmConstants(value CsrHashAlgorithmConstants) *CsrHashAlgorithmConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CsrHashAlgorithmConstants.
func (m CsrHashAlgorithmConstants) Pointer() *CsrHashAlgorithmConstants {
	return &m
}

const (

	// CsrHashAlgorithmConstantsPRIME256V1 captures enum value "PRIME_256_V1"
	CsrHashAlgorithmConstantsPRIME256V1 CsrHashAlgorithmConstants = "PRIME_256_V1"

	// CsrHashAlgorithmConstantsSECP384R1 captures enum value "SECP_384_R1"
	CsrHashAlgorithmConstantsSECP384R1 CsrHashAlgorithmConstants = "SECP_384_R1"
)

// for schema
var csrHashAlgorithmConstantsEnum []interface{}

func init() {
	var res []CsrHashAlgorithmConstants
	if err := json.Unmarshal([]byte(`["PRIME_256_V1","SECP_384_R1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		csrHashAlgorithmConstantsEnum = append(csrHashAlgorithmConstantsEnum, v)
	}
}

func (m CsrHashAlgorithmConstants) validateCsrHashAlgorithmConstantsEnum(path, location string, value CsrHashAlgorithmConstants) error {
	if err := validate.EnumCase(path, location, value, csrHashAlgorithmConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this csr hash algorithm constants
func (m CsrHashAlgorithmConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCsrHashAlgorithmConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this csr hash algorithm constants based on context it is used
func (m CsrHashAlgorithmConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
