// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainStudioSourceSuggestion2 domain studio source suggestion2
//
// swagger:model DomainStudioSourceSuggestion2
type DomainStudioSourceSuggestion2 struct {

	// The debug time
	DebugTime int64 `json:"debugTime,omitempty"`

	// The generated domains of this source
	Domains []string `json:"domains"`

	// Suggestion language
	Language string `json:"language,omitempty"`

	// Maximum fetched suggested domains
	Max int32 `json:"max,omitempty"`

	// ?
	MaxPrefixSuffix int32 `json:"maxPrefixSuffix,omitempty"`

	// ?
	MaxSimilarWords int32 `json:"maxSimilarWords,omitempty"`

	// Defines whether to return only free domain names when service WHOIS is used for a source.
	OnlyAvailable bool `json:"onlyAvailable,omitempty"`

	// The services to fetch extra data from for this source
	Services []DomainEnvelopeSearchService `json:"services"`

	// Selected tlds
	Tlds []string `json:"tlds"`

	// Suggested domains with dash
	UseDash bool `json:"useDash,omitempty"`

	// Suggested domains with idn
	UseWordSegmentation bool `json:"useWordSegmentation,omitempty"`
}

// Validate validates this domain studio source suggestion2
func (m *DomainStudioSourceSuggestion2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainStudioSourceSuggestion2) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {

		if err := m.Services[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this domain studio source suggestion2 based on the context it is used
func (m *DomainStudioSourceSuggestion2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainStudioSourceSuggestion2) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if swag.IsZero(m.Services[i]) { // not required
			return nil
		}

		if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainStudioSourceSuggestion2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainStudioSourceSuggestion2) UnmarshalBinary(b []byte) error {
	var res DomainStudioSourceSuggestion2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
