// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactHkExtensions contact hk extensions
//
// swagger:model ContactHkExtensions
type ContactHkExtensions struct {

	// Is the person 18 years of age or older. For Person only.
	Above18 bool `json:"above18,omitempty"`

	// Document number.
	DocumentNumber string `json:"documentNumber,omitempty"`

	// Country of licensure.
	DocumentOrigin string `json:"documentOrigin,omitempty"`

	// The document types.
	DocumentType HkDocumentTypeConstants `json:"documentType,omitempty"`

	// The industry types.
	IndustryType HkIndustryTypeConstants `json:"industryType,omitempty"`

	// Additional descriptions for OTHIDV and OTHORG.
	Others string `json:"others,omitempty"`
}

// Validate validates this contact hk extensions
func (m *ContactHkExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndustryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactHkExtensions) validateDocumentType(formats strfmt.Registry) error {

	if swag.IsZero(m.DocumentType) { // not required
		return nil
	}

	if err := m.DocumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("documentType")
		}
		return err
	}

	return nil
}

func (m *ContactHkExtensions) validateIndustryType(formats strfmt.Registry) error {

	if swag.IsZero(m.IndustryType) { // not required
		return nil
	}

	if err := m.IndustryType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("industryType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactHkExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactHkExtensions) UnmarshalBinary(b []byte) error {
	var res ContactHkExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
