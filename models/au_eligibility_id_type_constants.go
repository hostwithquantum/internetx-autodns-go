// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuEligibilityIDTypeConstants au eligibility Id type constants
//
// swagger:model AuEligibilityIdTypeConstants
type AuEligibilityIDTypeConstants string

func NewAuEligibilityIDTypeConstants(value AuEligibilityIDTypeConstants) *AuEligibilityIDTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuEligibilityIDTypeConstants.
func (m AuEligibilityIDTypeConstants) Pointer() *AuEligibilityIDTypeConstants {
	return &m
}

const (

	// AuEligibilityIDTypeConstantsACN captures enum value "ACN"
	AuEligibilityIDTypeConstantsACN AuEligibilityIDTypeConstants = "ACN"

	// AuEligibilityIDTypeConstantsABN captures enum value "ABN"
	AuEligibilityIDTypeConstantsABN AuEligibilityIDTypeConstants = "ABN"

	// AuEligibilityIDTypeConstantsVIC captures enum value "VIC"
	AuEligibilityIDTypeConstantsVIC AuEligibilityIDTypeConstants = "VIC"

	// AuEligibilityIDTypeConstantsNSW captures enum value "NSW"
	AuEligibilityIDTypeConstantsNSW AuEligibilityIDTypeConstants = "NSW"

	// AuEligibilityIDTypeConstantsSA captures enum value "SA"
	AuEligibilityIDTypeConstantsSA AuEligibilityIDTypeConstants = "SA"

	// AuEligibilityIDTypeConstantsNT captures enum value "NT"
	AuEligibilityIDTypeConstantsNT AuEligibilityIDTypeConstants = "NT"

	// AuEligibilityIDTypeConstantsWA captures enum value "WA"
	AuEligibilityIDTypeConstantsWA AuEligibilityIDTypeConstants = "WA"

	// AuEligibilityIDTypeConstantsTAS captures enum value "TAS"
	AuEligibilityIDTypeConstantsTAS AuEligibilityIDTypeConstants = "TAS"

	// AuEligibilityIDTypeConstantsACT captures enum value "ACT"
	AuEligibilityIDTypeConstantsACT AuEligibilityIDTypeConstants = "ACT"

	// AuEligibilityIDTypeConstantsQLD captures enum value "QLD"
	AuEligibilityIDTypeConstantsQLD AuEligibilityIDTypeConstants = "QLD"

	// AuEligibilityIDTypeConstantsTM captures enum value "TM"
	AuEligibilityIDTypeConstantsTM AuEligibilityIDTypeConstants = "TM"

	// AuEligibilityIDTypeConstantsOTHER captures enum value "OTHER"
	AuEligibilityIDTypeConstantsOTHER AuEligibilityIDTypeConstants = "OTHER"

	// AuEligibilityIDTypeConstantsASL captures enum value "ASL"
	AuEligibilityIDTypeConstantsASL AuEligibilityIDTypeConstants = "ASL"

	// AuEligibilityIDTypeConstantsACECQA captures enum value "ACECQA"
	AuEligibilityIDTypeConstantsACECQA AuEligibilityIDTypeConstants = "ACECQA"

	// AuEligibilityIDTypeConstantsCRICOS captures enum value "CRICOS"
	AuEligibilityIDTypeConstantsCRICOS AuEligibilityIDTypeConstants = "CRICOS"

	// AuEligibilityIDTypeConstantsRTO captures enum value "RTO"
	AuEligibilityIDTypeConstantsRTO AuEligibilityIDTypeConstants = "RTO"

	// AuEligibilityIDTypeConstantsTEQSA captures enum value "TEQSA"
	AuEligibilityIDTypeConstantsTEQSA AuEligibilityIDTypeConstants = "TEQSA"
)

// for schema
var auEligibilityIdTypeConstantsEnum []interface{}

func init() {
	var res []AuEligibilityIDTypeConstants
	if err := json.Unmarshal([]byte(`["ACN","ABN","VIC","NSW","SA","NT","WA","TAS","ACT","QLD","TM","OTHER","ASL","ACECQA","CRICOS","RTO","TEQSA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auEligibilityIdTypeConstantsEnum = append(auEligibilityIdTypeConstantsEnum, v)
	}
}

func (m AuEligibilityIDTypeConstants) validateAuEligibilityIDTypeConstantsEnum(path, location string, value AuEligibilityIDTypeConstants) error {
	if err := validate.EnumCase(path, location, value, auEligibilityIdTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this au eligibility Id type constants
func (m AuEligibilityIDTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuEligibilityIDTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this au eligibility Id type constants based on context it is used
func (m AuEligibilityIDTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
