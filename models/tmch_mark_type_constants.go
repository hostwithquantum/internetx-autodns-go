// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TmchMarkTypeConstants tmch mark type constants
//
// swagger:model TmchMarkTypeConstants
type TmchMarkTypeConstants string

func NewTmchMarkTypeConstants(value TmchMarkTypeConstants) *TmchMarkTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TmchMarkTypeConstants.
func (m TmchMarkTypeConstants) Pointer() *TmchMarkTypeConstants {
	return &m
}

const (

	// TmchMarkTypeConstantsTRADEMARK captures enum value "TRADEMARK"
	TmchMarkTypeConstantsTRADEMARK TmchMarkTypeConstants = "TRADEMARK"

	// TmchMarkTypeConstantsTREATYORSTATUTE captures enum value "TREATY_OR_STATUTE"
	TmchMarkTypeConstantsTREATYORSTATUTE TmchMarkTypeConstants = "TREATY_OR_STATUTE"

	// TmchMarkTypeConstantsCOURT captures enum value "COURT"
	TmchMarkTypeConstantsCOURT TmchMarkTypeConstants = "COURT"

	// TmchMarkTypeConstantsDNLABUSED captures enum value "DNL_ABUSED"
	TmchMarkTypeConstantsDNLABUSED TmchMarkTypeConstants = "DNL_ABUSED"
)

// for schema
var tmchMarkTypeConstantsEnum []interface{}

func init() {
	var res []TmchMarkTypeConstants
	if err := json.Unmarshal([]byte(`["TRADEMARK","TREATY_OR_STATUTE","COURT","DNL_ABUSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tmchMarkTypeConstantsEnum = append(tmchMarkTypeConstantsEnum, v)
	}
}

func (m TmchMarkTypeConstants) validateTmchMarkTypeConstantsEnum(path, location string, value TmchMarkTypeConstants) error {
	if err := validate.EnumCase(path, location, value, tmchMarkTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tmch mark type constants
func (m TmchMarkTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTmchMarkTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tmch mark type constants based on context it is used
func (m TmchMarkTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
