// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PreregConfig prereg config
//
// swagger:model PreregConfig
type PreregConfig struct {

	// autoupdate Dns
	AutoupdateDNS bool `json:"autoupdateDns,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// confirmation end
	// Format: date-time
	ConfirmationEnd strfmt.DateTime `json:"confirmationEnd,omitempty"`

	// confirmation start
	// Format: date-time
	ConfirmationStart strfmt.DateTime `json:"confirmationStart,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// message type
	MessageType MessageTypeConstants `json:"messageType,omitempty"`

	// min period
	MinPeriod *TimePeriod `json:"minPeriod,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// nic member label
	NicMemberLabel string `json:"nicMemberLabel,omitempty"`

	// niccom end
	// Format: date-time
	NiccomEnd strfmt.DateTime `json:"niccomEnd,omitempty"`

	// niccom start
	// Format: date-time
	NiccomStart strfmt.DateTime `json:"niccomStart,omitempty"`

	// period end
	// Format: date-time
	PeriodEnd strfmt.DateTime `json:"periodEnd,omitempty"`

	// period start
	// Format: date-time
	PeriodStart strfmt.DateTime `json:"periodStart,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// registration type
	RegistrationType RegistrationTypeConstants `json:"registrationType,omitempty"`

	// ui fields
	UIFields string `json:"uiFields,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this prereg config
func (m *PreregConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmationEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmationStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNiccomEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNiccomStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreregConfig) validateConfirmationEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfirmationEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmationEnd", "body", "date-time", m.ConfirmationEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateConfirmationStart(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfirmationStart) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmationStart", "body", "date-time", m.ConfirmationStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	if err := m.MessageType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("messageType")
		}
		return err
	}

	return nil
}

func (m *PreregConfig) validateMinPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.MinPeriod) { // not required
		return nil
	}

	if m.MinPeriod != nil {
		if err := m.MinPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *PreregConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateNiccomEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.NiccomEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("niccomEnd", "body", "date-time", m.NiccomEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateNiccomStart(formats strfmt.Registry) error {

	if swag.IsZero(m.NiccomStart) { // not required
		return nil
	}

	if err := validate.FormatOf("niccomStart", "body", "date-time", m.NiccomStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validatePeriodEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("periodEnd", "body", "date-time", m.PeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validatePeriodStart(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodStart) { // not required
		return nil
	}

	if err := validate.FormatOf("periodStart", "body", "date-time", m.PeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregConfig) validateRegistrationType(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrationType) { // not required
		return nil
	}

	if err := m.RegistrationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registrationType")
		}
		return err
	}

	return nil
}

func (m *PreregConfig) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PreregConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreregConfig) UnmarshalBinary(b []byte) error {
	var res PreregConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
