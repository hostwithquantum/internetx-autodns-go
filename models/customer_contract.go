// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerContract customer contract
//
// swagger:model CustomerContract
type CustomerContract struct {

	// The name of the manager.
	AccountManager *AccountManager `json:"accountManager,omitempty"`

	// The classification.
	Classification string `json:"classification,omitempty"`

	// The contract.
	Contract *GenericLabelEntity `json:"contract,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The unique identifier of the customerContract
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// The invoiceNotice.
	InvoiceNotice string `json:"invoiceNotice,omitempty"`

	// If sap is set or not
	NoSap bool `json:"noSap,omitempty"`

	// The notices.
	Notice string `json:"notice,omitempty"`

	// The ticketing number if available.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this customer contract
func (m *CustomerContract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerContract) validateAccountManager(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountManager) { // not required
		return nil
	}

	if m.AccountManager != nil {
		if err := m.AccountManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountManager")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerContract) validateContract(formats strfmt.Registry) error {
	if swag.IsZero(m.Contract) { // not required
		return nil
	}

	if m.Contract != nil {
		if err := m.Contract.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contract")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contract")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerContract) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerContract) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this customer contract based on the context it is used
func (m *CustomerContract) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountManager(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContract(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerContract) contextValidateAccountManager(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountManager != nil {

		if swag.IsZero(m.AccountManager) { // not required
			return nil
		}

		if err := m.AccountManager.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountManager")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerContract) contextValidateContract(ctx context.Context, formats strfmt.Registry) error {

	if m.Contract != nil {

		if swag.IsZero(m.Contract) { // not required
			return nil
		}

		if err := m.Contract.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contract")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contract")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerContract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerContract) UnmarshalBinary(b []byte) error {
	var res CustomerContract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
