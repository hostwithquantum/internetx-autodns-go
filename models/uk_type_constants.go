// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UkTypeConstants uk type constants
//
// swagger:model UkTypeConstants
type UkTypeConstants string

func NewUkTypeConstants(value UkTypeConstants) *UkTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UkTypeConstants.
func (m UkTypeConstants) Pointer() *UkTypeConstants {
	return &m
}

const (

	// UkTypeConstantsLTD captures enum value "LTD"
	UkTypeConstantsLTD UkTypeConstants = "LTD"

	// UkTypeConstantsPLC captures enum value "PLC"
	UkTypeConstantsPLC UkTypeConstants = "PLC"

	// UkTypeConstantsPTNR captures enum value "PTNR"
	UkTypeConstantsPTNR UkTypeConstants = "PTNR"

	// UkTypeConstantsSTRA captures enum value "STRA"
	UkTypeConstantsSTRA UkTypeConstants = "STRA"

	// UkTypeConstantsLLP captures enum value "LLP"
	UkTypeConstantsLLP UkTypeConstants = "LLP"

	// UkTypeConstantsIP captures enum value "IP"
	UkTypeConstantsIP UkTypeConstants = "IP"

	// UkTypeConstantsIND captures enum value "IND"
	UkTypeConstantsIND UkTypeConstants = "IND"

	// UkTypeConstantsSCH captures enum value "SCH"
	UkTypeConstantsSCH UkTypeConstants = "SCH"

	// UkTypeConstantsRCHAR captures enum value "RCHAR"
	UkTypeConstantsRCHAR UkTypeConstants = "RCHAR"

	// UkTypeConstantsGOV captures enum value "GOV"
	UkTypeConstantsGOV UkTypeConstants = "GOV"

	// UkTypeConstantsCRC captures enum value "CRC"
	UkTypeConstantsCRC UkTypeConstants = "CRC"

	// UkTypeConstantsSTAT captures enum value "STAT"
	UkTypeConstantsSTAT UkTypeConstants = "STAT"

	// UkTypeConstantsOTHER captures enum value "OTHER"
	UkTypeConstantsOTHER UkTypeConstants = "OTHER"

	// UkTypeConstantsFIND captures enum value "FIND"
	UkTypeConstantsFIND UkTypeConstants = "FIND"

	// UkTypeConstantsFCORP captures enum value "FCORP"
	UkTypeConstantsFCORP UkTypeConstants = "FCORP"

	// UkTypeConstantsFOTHER captures enum value "FOTHER"
	UkTypeConstantsFOTHER UkTypeConstants = "FOTHER"
)

// for schema
var ukTypeConstantsEnum []interface{}

func init() {
	var res []UkTypeConstants
	if err := json.Unmarshal([]byte(`["LTD","PLC","PTNR","STRA","LLP","IP","IND","SCH","RCHAR","GOV","CRC","STAT","OTHER","FIND","FCORP","FOTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ukTypeConstantsEnum = append(ukTypeConstantsEnum, v)
	}
}

func (m UkTypeConstants) validateUkTypeConstantsEnum(path, location string, value UkTypeConstants) error {
	if err := validate.EnumCase(path, location, value, ukTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this uk type constants
func (m UkTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUkTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this uk type constants based on context it is used
func (m UkTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
