// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Charset charset
//
// swagger:model Charset
type Charset string

func NewCharset(value Charset) *Charset {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Charset.
func (m Charset) Pointer() *Charset {
	return &m
}

const (

	// CharsetBIG5 captures enum value "BIG5"
	CharsetBIG5 Charset = "BIG5"

	// CharsetEUCJP captures enum value "EUC_JP"
	CharsetEUCJP Charset = "EUC_JP"

	// CharsetEUCKR captures enum value "EUC_KR"
	CharsetEUCKR Charset = "EUC_KR"

	// CharsetISCII captures enum value "ISCII"
	CharsetISCII Charset = "ISCII"

	// CharsetKOI8R captures enum value "KOI8_R"
	CharsetKOI8R Charset = "KOI8_R"

	// CharsetKOI8U captures enum value "KOI8_U"
	CharsetKOI8U Charset = "KOI8_U"

	// CharsetSHIFTJIS captures enum value "SHIFT_JIS"
	CharsetSHIFTJIS Charset = "SHIFT_JIS"

	// CharsetTIS620 captures enum value "TIS_620"
	CharsetTIS620 Charset = "TIS_620"

	// CharsetISO88591 captures enum value "ISO_8859_1"
	CharsetISO88591 Charset = "ISO_8859_1"

	// CharsetISO88597 captures enum value "ISO_8859_7"
	CharsetISO88597 Charset = "ISO_8859_7"
)

// for schema
var charsetEnum []interface{}

func init() {
	var res []Charset
	if err := json.Unmarshal([]byte(`["BIG5","EUC_JP","EUC_KR","ISCII","KOI8_R","KOI8_U","SHIFT_JIS","TIS_620","ISO_8859_1","ISO_8859_7"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		charsetEnum = append(charsetEnum, v)
	}
}

func (m Charset) validateCharsetEnum(path, location string, value Charset) error {
	if err := validate.EnumCase(path, location, value, charsetEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this charset
func (m Charset) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCharsetEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this charset based on context it is used
func (m Charset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
