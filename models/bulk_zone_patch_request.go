// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BulkZonePatchRequest bulk zone patch request
//
// swagger:model BulkZonePatchRequest
type BulkZonePatchRequest struct {

	// The modifer to apply on the objects
	Modifiers []*Modifier `json:"modifiers"`

	// The objects to process
	Objects []*ZoneBasePatchRequest `json:"objects"`

	// The query to fetch the object instead of defined list
	Query *Query `json:"query,omitempty"`

	// The template for objects to process
	Template *ZoneBasePatchRequest `json:"template,omitempty"`
}

// Validate validates this bulk zone patch request
func (m *BulkZonePatchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkZonePatchRequest) validateModifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Modifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Modifiers); i++ {
		if swag.IsZero(m.Modifiers[i]) { // not required
			continue
		}

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BulkZonePatchRequest) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BulkZonePatchRequest) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *BulkZonePatchRequest) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkZonePatchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkZonePatchRequest) UnmarshalBinary(b []byte) error {
	var res BulkZonePatchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
