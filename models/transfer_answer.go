// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransferAnswer transfer answer
//
// swagger:model TransferAnswer
type TransferAnswer string

func NewTransferAnswer(value TransferAnswer) *TransferAnswer {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TransferAnswer.
func (m TransferAnswer) Pointer() *TransferAnswer {
	return &m
}

const (

	// TransferAnswerTRANSFEROUTACK captures enum value "TRANSFER_OUT_ACK"
	TransferAnswerTRANSFEROUTACK TransferAnswer = "TRANSFER_OUT_ACK"

	// TransferAnswerTRANSFEROUTNACK captures enum value "TRANSFER_OUT_NACK"
	TransferAnswerTRANSFEROUTNACK TransferAnswer = "TRANSFER_OUT_NACK"
)

// for schema
var transferAnswerEnum []interface{}

func init() {
	var res []TransferAnswer
	if err := json.Unmarshal([]byte(`["TRANSFER_OUT_ACK","TRANSFER_OUT_NACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferAnswerEnum = append(transferAnswerEnum, v)
	}
}

func (m TransferAnswer) validateTransferAnswerEnum(path, location string, value TransferAnswer) error {
	if err := validate.EnumCase(path, location, value, transferAnswerEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transfer answer
func (m TransferAnswer) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransferAnswerEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transfer answer based on context it is used
func (m TransferAnswer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
