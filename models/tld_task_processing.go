// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TldTaskProcessing tld task processing
//
// swagger:model TldTaskProcessing
type TldTaskProcessing string

func NewTldTaskProcessing(value TldTaskProcessing) *TldTaskProcessing {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TldTaskProcessing.
func (m TldTaskProcessing) Pointer() *TldTaskProcessing {
	return &m
}

const (

	// TldTaskProcessingAUTOMATED captures enum value "AUTOMATED"
	TldTaskProcessingAUTOMATED TldTaskProcessing = "AUTOMATED"

	// TldTaskProcessingMANUAL captures enum value "MANUAL"
	TldTaskProcessingMANUAL TldTaskProcessing = "MANUAL"

	// TldTaskProcessingSEMIAUTOMATED captures enum value "SEMIAUTOMATED"
	TldTaskProcessingSEMIAUTOMATED TldTaskProcessing = "SEMIAUTOMATED"
)

// for schema
var tldTaskProcessingEnum []interface{}

func init() {
	var res []TldTaskProcessing
	if err := json.Unmarshal([]byte(`["AUTOMATED","MANUAL","SEMIAUTOMATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tldTaskProcessingEnum = append(tldTaskProcessingEnum, v)
	}
}

func (m TldTaskProcessing) validateTldTaskProcessingEnum(path, location string, value TldTaskProcessing) error {
	if err := validate.EnumCase(path, location, value, tldTaskProcessingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tld task processing
func (m TldTaskProcessing) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTldTaskProcessingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tld task processing based on context it is used
func (m TldTaskProcessing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
