// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TaskGroup task group
//
// swagger:model TaskGroup
type TaskGroup string

func NewTaskGroup(value TaskGroup) *TaskGroup {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TaskGroup.
func (m TaskGroup) Pointer() *TaskGroup {
	return &m
}

const (

	// TaskGroupDOMAINCREATE captures enum value "DOMAIN_CREATE"
	TaskGroupDOMAINCREATE TaskGroup = "DOMAIN_CREATE"

	// TaskGroupDOMAINDELETE captures enum value "DOMAIN_DELETE"
	TaskGroupDOMAINDELETE TaskGroup = "DOMAIN_DELETE"

	// TaskGroupDOMAINSTATUSUPDATE captures enum value "DOMAIN_STATUS_UPDATE"
	TaskGroupDOMAINSTATUSUPDATE TaskGroup = "DOMAIN_STATUS_UPDATE"

	// TaskGroupDOMAINTRANSFERIN captures enum value "DOMAIN_TRANSFER_IN"
	TaskGroupDOMAINTRANSFERIN TaskGroup = "DOMAIN_TRANSFER_IN"

	// TaskGroupDOMAINTRANSFEROUT captures enum value "DOMAIN_TRANSFER_OUT"
	TaskGroupDOMAINTRANSFEROUT TaskGroup = "DOMAIN_TRANSFER_OUT"

	// TaskGroupDOMAINSAFE captures enum value "DOMAINSAFE"
	TaskGroupDOMAINSAFE TaskGroup = "DOMAINSAFE"

	// TaskGroupAUTHINFOCREATE captures enum value "AUTHINFO_CREATE"
	TaskGroupAUTHINFOCREATE TaskGroup = "AUTHINFO_CREATE"

	// TaskGroupAUTHINFOSEND captures enum value "AUTHINFO_SEND"
	TaskGroupAUTHINFOSEND TaskGroup = "AUTHINFO_SEND"

	// TaskGroupZONECREATE captures enum value "ZONE_CREATE"
	TaskGroupZONECREATE TaskGroup = "ZONE_CREATE"

	// TaskGroupWHOIS captures enum value "WHOIS"
	TaskGroupWHOIS TaskGroup = "WHOIS"

	// TaskGroupDOMAINUPDATE captures enum value "DOMAIN_UPDATE"
	TaskGroupDOMAINUPDATE TaskGroup = "DOMAIN_UPDATE"

	// TaskGroupDOMAINSTUDIO captures enum value "DOMAINSTUDIO"
	TaskGroupDOMAINSTUDIO TaskGroup = "DOMAINSTUDIO"

	// TaskGroupZONEUPDATE captures enum value "ZONE_UPDATE"
	TaskGroupZONEUPDATE TaskGroup = "ZONE_UPDATE"

	// TaskGroupZONEDELETE captures enum value "ZONE_DELETE"
	TaskGroupZONEDELETE TaskGroup = "ZONE_DELETE"

	// TaskGroupZONEAXFR captures enum value "ZONE_AXFR"
	TaskGroupZONEAXFR TaskGroup = "ZONE_AXFR"

	// TaskGroupDOMAINSTUDIODOMAINSBOT captures enum value "DOMAINSTUDIO_DOMAINSBOT"
	TaskGroupDOMAINSTUDIODOMAINSBOT TaskGroup = "DOMAINSTUDIO_DOMAINSBOT"

	// TaskGroupDOMAINSTUDIOPLACEMENTPLUS captures enum value "DOMAINSTUDIO_PLACEMENTPLUS"
	TaskGroupDOMAINSTUDIOPLACEMENTPLUS TaskGroup = "DOMAINSTUDIO_PLACEMENTPLUS"
)

// for schema
var taskGroupEnum []interface{}

func init() {
	var res []TaskGroup
	if err := json.Unmarshal([]byte(`["DOMAIN_CREATE","DOMAIN_DELETE","DOMAIN_STATUS_UPDATE","DOMAIN_TRANSFER_IN","DOMAIN_TRANSFER_OUT","DOMAINSAFE","AUTHINFO_CREATE","AUTHINFO_SEND","ZONE_CREATE","WHOIS","DOMAIN_UPDATE","DOMAINSTUDIO","ZONE_UPDATE","ZONE_DELETE","ZONE_AXFR","DOMAINSTUDIO_DOMAINSBOT","DOMAINSTUDIO_PLACEMENTPLUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskGroupEnum = append(taskGroupEnum, v)
	}
}

func (m TaskGroup) validateTaskGroupEnum(path, location string, value TaskGroup) error {
	if err := validate.EnumCase(path, location, value, taskGroupEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this task group
func (m TaskGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskGroupEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this task group based on context it is used
func (m TaskGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
