// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerSoftwareTypeConstants server software type constants
//
// swagger:model ServerSoftwareTypeConstants
type ServerSoftwareTypeConstants string

func NewServerSoftwareTypeConstants(value ServerSoftwareTypeConstants) *ServerSoftwareTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServerSoftwareTypeConstants.
func (m ServerSoftwareTypeConstants) Pointer() *ServerSoftwareTypeConstants {
	return &m
}

const (

	// ServerSoftwareTypeConstantsIIS4 captures enum value "IIS4"
	ServerSoftwareTypeConstantsIIS4 ServerSoftwareTypeConstants = "IIS4"

	// ServerSoftwareTypeConstantsIIS5 captures enum value "IIS5"
	ServerSoftwareTypeConstantsIIS5 ServerSoftwareTypeConstants = "IIS5"

	// ServerSoftwareTypeConstantsAPACHE2 captures enum value "APACHE2"
	ServerSoftwareTypeConstantsAPACHE2 ServerSoftwareTypeConstants = "APACHE2"

	// ServerSoftwareTypeConstantsAPACHESSL captures enum value "APACHESSL"
	ServerSoftwareTypeConstantsAPACHESSL ServerSoftwareTypeConstants = "APACHESSL"

	// ServerSoftwareTypeConstantsPLESK captures enum value "PLESK"
	ServerSoftwareTypeConstantsPLESK ServerSoftwareTypeConstants = "PLESK"

	// ServerSoftwareTypeConstantsTOMCAT captures enum value "TOMCAT"
	ServerSoftwareTypeConstantsTOMCAT ServerSoftwareTypeConstants = "TOMCAT"

	// ServerSoftwareTypeConstantsNOTSET captures enum value "NOT_SET"
	ServerSoftwareTypeConstantsNOTSET ServerSoftwareTypeConstants = "NOT_SET"
)

// for schema
var serverSoftwareTypeConstantsEnum []interface{}

func init() {
	var res []ServerSoftwareTypeConstants
	if err := json.Unmarshal([]byte(`["IIS4","IIS5","APACHE2","APACHESSL","PLESK","TOMCAT","NOT_SET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverSoftwareTypeConstantsEnum = append(serverSoftwareTypeConstantsEnum, v)
	}
}

func (m ServerSoftwareTypeConstants) validateServerSoftwareTypeConstantsEnum(path, location string, value ServerSoftwareTypeConstants) error {
	if err := validate.EnumCase(path, location, value, serverSoftwareTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this server software type constants
func (m ServerSoftwareTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerSoftwareTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this server software type constants based on context it is used
func (m ServerSoftwareTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
