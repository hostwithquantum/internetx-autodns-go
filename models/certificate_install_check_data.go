// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateInstallCheckData certificate install check data
//
// swagger:model CertificateInstallCheckData
type CertificateInstallCheckData struct {

	// Describes whether the zone associated with the hostname contains a CAA record.
	Caa bool `json:"caa,omitempty"`

	// The corresponding certificate from the portfolio
	Certificate *Certificate `json:"certificate,omitempty"`

	// Then data of the certificate installed on the server
	CertificateData *X509CertificateData `json:"certificateData,omitempty"`

	// Then certificate chain
	Chain []*X509CertificateData `json:"chain"`

	// Defines wether the certificate chain is installed in a correct way
	ChainOk bool `json:"chainOk,omitempty"`

	// Defines wether a certificate with the same serial number was found within the owned inventory
	Inventory bool `json:"inventory,omitempty"`

	// The ip that was checked
	IP string `json:"ip,omitempty"`

	// Describes whether the zone associated with the hostname contains multiple CAA records.
	MultipleCaa bool `json:"multipleCaa,omitempty"`

	// Notices for the check
	Notices []*CertificateInstallCheckNotice `json:"notices"`

	// Defines wether the server behind the hostname has a automated redirect to https
	Redirect bool `json:"redirect,omitempty"`

	// Then data of the redirect certificate installed on the server
	RedirectCertificateData *X509CertificateData `json:"redirectCertificateData,omitempty"`

	// Defines wether the certificate at the end of a redirect matches the certificate under https
	RedirectMatch bool `json:"redirectMatch,omitempty"`

	// Defines wether the hostname name is secured by a certificate or not
	Secured bool `json:"secured,omitempty"`

	// Describes whether the hostname is secured by a self signed certificate.
	SelfSigned bool `json:"selfSigned,omitempty"`

	// The supported tls version by server behind the hostname
	// Example: SSL_V1, TLS1.0, TLS1.1, TLS1.2, TLS1.3
	TLS []*TLSData `json:"tls"`
}

// Validate validates this certificate install check data
func (m *CertificateInstallCheckData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectCertificateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateInstallCheckData) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) validateCertificateData(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateData) { // not required
		return nil
	}

	if m.CertificateData != nil {
		if err := m.CertificateData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) validateChain(formats strfmt.Registry) error {
	if swag.IsZero(m.Chain) { // not required
		return nil
	}

	for i := 0; i < len(m.Chain); i++ {
		if swag.IsZero(m.Chain[i]) { // not required
			continue
		}

		if m.Chain[i] != nil {
			if err := m.Chain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chain" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateInstallCheckData) validateNotices(formats strfmt.Registry) error {
	if swag.IsZero(m.Notices) { // not required
		return nil
	}

	for i := 0; i < len(m.Notices); i++ {
		if swag.IsZero(m.Notices[i]) { // not required
			continue
		}

		if m.Notices[i] != nil {
			if err := m.Notices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateInstallCheckData) validateRedirectCertificateData(formats strfmt.Registry) error {
	if swag.IsZero(m.RedirectCertificateData) { // not required
		return nil
	}

	if m.RedirectCertificateData != nil {
		if err := m.RedirectCertificateData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectCertificateData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirectCertificateData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) validateTLS(formats strfmt.Registry) error {
	if swag.IsZero(m.TLS) { // not required
		return nil
	}

	for i := 0; i < len(m.TLS); i++ {
		if swag.IsZero(m.TLS[i]) { // not required
			continue
		}

		if m.TLS[i] != nil {
			if err := m.TLS[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this certificate install check data based on the context it is used
func (m *CertificateInstallCheckData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirectCertificateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateInstallCheckData) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) contextValidateCertificateData(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificateData != nil {

		if swag.IsZero(m.CertificateData) { // not required
			return nil
		}

		if err := m.CertificateData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) contextValidateChain(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Chain); i++ {

		if m.Chain[i] != nil {

			if swag.IsZero(m.Chain[i]) { // not required
				return nil
			}

			if err := m.Chain[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chain" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateInstallCheckData) contextValidateNotices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notices); i++ {

		if m.Notices[i] != nil {

			if swag.IsZero(m.Notices[i]) { // not required
				return nil
			}

			if err := m.Notices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateInstallCheckData) contextValidateRedirectCertificateData(ctx context.Context, formats strfmt.Registry) error {

	if m.RedirectCertificateData != nil {

		if swag.IsZero(m.RedirectCertificateData) { // not required
			return nil
		}

		if err := m.RedirectCertificateData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectCertificateData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirectCertificateData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateInstallCheckData) contextValidateTLS(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TLS); i++ {

		if m.TLS[i] != nil {

			if swag.IsZero(m.TLS[i]) { // not required
				return nil
			}

			if err := m.TLS[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateInstallCheckData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateInstallCheckData) UnmarshalBinary(b []byte) error {
	var res CertificateInstallCheckData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
