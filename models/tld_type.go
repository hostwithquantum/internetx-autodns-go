// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TldType tld type
//
// swagger:model TldType
type TldType string

func NewTldType(value TldType) *TldType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TldType.
func (m TldType) Pointer() *TldType {
	return &m
}

const (

	// TldTypeCCTLD captures enum value "CCTLD"
	TldTypeCCTLD TldType = "CCTLD"

	// TldTypeGTLD captures enum value "GTLD"
	TldTypeGTLD TldType = "GTLD"

	// TldTypeNEWGTLD captures enum value "NEW_GTLD"
	TldTypeNEWGTLD TldType = "NEW_GTLD"
)

// for schema
var tldTypeEnum []interface{}

func init() {
	var res []TldType
	if err := json.Unmarshal([]byte(`["CCTLD","GTLD","NEW_GTLD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tldTypeEnum = append(tldTypeEnum, v)
	}
}

func (m TldType) validateTldTypeEnum(path, location string, value TldType) error {
	if err := validate.EnumCase(path, location, value, tldTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tld type
func (m TldType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTldTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tld type based on context it is used
func (m TldType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
