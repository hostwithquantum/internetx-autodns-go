// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentConstants payment constants
//
// swagger:model PaymentConstants
type PaymentConstants string

func NewPaymentConstants(value PaymentConstants) *PaymentConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PaymentConstants.
func (m PaymentConstants) Pointer() *PaymentConstants {
	return &m
}

const (

	// PaymentConstantsPRE captures enum value "PRE"
	PaymentConstantsPRE PaymentConstants = "PRE"

	// PaymentConstantsPOST captures enum value "POST"
	PaymentConstantsPOST PaymentConstants = "POST"

	// PaymentConstantsLIVE captures enum value "LIVE"
	PaymentConstantsLIVE PaymentConstants = "LIVE"
)

// for schema
var paymentConstantsEnum []interface{}

func init() {
	var res []PaymentConstants
	if err := json.Unmarshal([]byte(`["PRE","POST","LIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentConstantsEnum = append(paymentConstantsEnum, v)
	}
}

func (m PaymentConstants) validatePaymentConstantsEnum(path, location string, value PaymentConstants) error {
	if err := validate.EnumCase(path, location, value, paymentConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment constants
func (m PaymentConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment constants based on context it is used
func (m PaymentConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
