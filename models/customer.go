// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
//
// swagger:model Customer
type Customer struct {

	// The account of the customer in case of prepayment or if the customer has a credit limit
	Account *Account `json:"account,omitempty"`

	// The address of the customer
	// Required: true
	// Max Items: 2147483647
	// Min Items: 1
	AddressLines []string `json:"addressLines"`

	// Flag indication if the customer is autodelete
	Autodelete bool `json:"autodelete,omitempty"`

	// The billing recipients.
	BillingEmails []string `json:"billingEmails"`

	// The billing users.
	BillingUsers []*BasicUser `json:"billingUsers"`

	// The customers minimal credit card data if payament was post with credit card.
	Card *Card `json:"card,omitempty"`

	// The city of the customer.
	City string `json:"city,omitempty"`

	// The period after the post payment account will be cleared to zero
	ClearAccount ClearAccountPeriod `json:"clearAccount,omitempty"`

	// client
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Client *string `json:"client"`

	// The customers contracts.
	Contracts []*CustomerContract `json:"contracts"`

	// The country of the customer.
	// Required: true
	Country *string `json:"country"`

	// The end of a promo discount.
	// Format: date-time
	DiscountValid strfmt.DateTime `json:"discountValid,omitempty"`

	// The email addresses.
	// Max Items: 2147483647
	// Min Items: 1
	Emails []string `json:"emails"`

	// The fax number.
	Fax Phone `json:"fax,omitempty"`

	// The first name.
	// Max Length: 35
	// Min Length: 0
	Fname *string `json:"fname,omitempty"`

	// The gender of the person.
	Gender GenderConstants `json:"gender,omitempty"`

	// group
	Group int64 `json:"group,omitempty"`

	// The language to use for the invoice.
	InvoiceLanguage string `json:"invoiceLanguage,omitempty"`

	// The last name.
	// Max Length: 35
	// Min Length: 0
	Lname *string `json:"lname,omitempty"`

	// The name of the customer.
	// Required: true
	// Max Length: 255
	// Min Length: 0
	Name *string `json:"name"`

	// number
	// Required: true
	Number *int64 `json:"number"`

	// The name of the organization.
	// Max Length: 70
	// Min Length: 0
	Organization *string `json:"organization,omitempty"`

	// The payment typ of the customer.
	// Required: true
	Payment PaymentConstants `json:"payment"`

	// The payment currency of the customer.
	PaymentCurrency Currency `json:"paymentCurrency,omitempty"`

	// The payment mode of the customer.
	PaymentMode string `json:"paymentMode,omitempty"`

	// The postal code of the city.
	Pcode string `json:"pcode,omitempty"`

	// The phone number of the customer
	Phone string `json:"phone,omitempty"`

	// The customers sepa mandate if payament was post with sepa.
	Sepa *SEPAMandate `json:"sepa,omitempty"`

	// The state of the customer.
	State string `json:"state,omitempty"`

	// The taxable flag of the customer.
	Taxable bool `json:"taxable,omitempty"`

	// The title of the customer
	Title string `json:"title,omitempty"`

	// The value added tax number.
	VatNumber string `json:"vatNumber,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClearAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContracts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountValid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSepa(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateAddressLines(formats strfmt.Registry) error {

	if err := validate.Required("addressLines", "body", m.AddressLines); err != nil {
		return err
	}

	iAddressLinesSize := int64(len(m.AddressLines))

	if err := validate.MinItems("addressLines", "body", iAddressLinesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("addressLines", "body", iAddressLinesSize, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateBillingUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.BillingUsers); i++ {
		if swag.IsZero(m.BillingUsers[i]) { // not required
			continue
		}

		if m.BillingUsers[i] != nil {
			if err := m.BillingUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateClearAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ClearAccount) { // not required
		return nil
	}

	if err := m.ClearAccount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clearAccount")
		}
		return err
	}

	return nil
}

func (m *Customer) validateClient(formats strfmt.Registry) error {

	if err := validate.Required("client", "body", m.Client); err != nil {
		return err
	}

	if err := validate.MinLength("client", "body", string(*m.Client), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("client", "body", string(*m.Client), 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateContracts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contracts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contracts); i++ {
		if swag.IsZero(m.Contracts[i]) { // not required
			continue
		}

		if m.Contracts[i] != nil {
			if err := m.Contracts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateDiscountValid(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountValid) { // not required
		return nil
	}

	if err := validate.FormatOf("discountValid", "body", "date-time", m.DiscountValid.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	iEmailsSize := int64(len(m.Emails))

	if err := validate.MinItems("emails", "body", iEmailsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("emails", "body", iEmailsSize, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateFname(formats strfmt.Registry) error {

	if swag.IsZero(m.Fname) { // not required
		return nil
	}

	if err := validate.MinLength("fname", "body", string(*m.Fname), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fname", "body", string(*m.Fname), 35); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if err := m.Gender.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *Customer) validateLname(formats strfmt.Registry) error {

	if swag.IsZero(m.Lname) { // not required
		return nil
	}

	if err := validate.MinLength("lname", "body", string(*m.Lname), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lname", "body", string(*m.Lname), 35); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if err := validate.MinLength("organization", "body", string(*m.Organization), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("organization", "body", string(*m.Organization), 70); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePayment(formats strfmt.Registry) error {

	if err := m.Payment.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payment")
		}
		return err
	}

	return nil
}

func (m *Customer) validateSepa(formats strfmt.Registry) error {

	if swag.IsZero(m.Sepa) { // not required
		return nil
	}

	if m.Sepa != nil {
		if err := m.Sepa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sepa")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
