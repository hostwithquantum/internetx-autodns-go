// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAcls user acls
//
// swagger:model UserAcls
type UserAcls struct {

	// The acls of the user.
	// Max Items: 2147483647
	// Min Items: 1
	Acls []*UserACL `json:"acls"`

	// The user which has been effected
	// Required: true
	User *BasicUser `json:"user"`
}

// Validate validates this user acls
func (m *UserAcls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAcls) validateAcls(formats strfmt.Registry) error {

	if swag.IsZero(m.Acls) { // not required
		return nil
	}

	iAclsSize := int64(len(m.Acls))

	if err := validate.MinItems("acls", "body", iAclsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("acls", "body", iAclsSize, 2147483647); err != nil {
		return err
	}

	for i := 0; i < len(m.Acls); i++ {
		if swag.IsZero(m.Acls[i]) { // not required
			continue
		}

		if m.Acls[i] != nil {
			if err := m.Acls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAcls) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAcls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAcls) UnmarshalBinary(b []byte) error {
	var res UserAcls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
