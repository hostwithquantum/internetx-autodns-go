// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PreregInformation prereg information
//
// swagger:model PreregInformation
type PreregInformation struct {

	// category
	Category string `json:"category,omitempty"`

	// confirmation end
	// Format: date-time
	ConfirmationEnd strfmt.DateTime `json:"confirmationEnd,omitempty"`

	// confirmation start
	// Format: date-time
	ConfirmationStart strfmt.DateTime `json:"confirmationStart,omitempty"`

	// min period
	MinPeriod *TimePeriod `json:"minPeriod,omitempty"`

	// period end
	// Format: date-time
	PeriodEnd strfmt.DateTime `json:"periodEnd,omitempty"`

	// period start
	// Format: date-time
	PeriodStart strfmt.DateTime `json:"periodStart,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// registration type
	RegistrationType string `json:"registrationType,omitempty"`
}

// Validate validates this prereg information
func (m *PreregInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmationEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmationStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreregInformation) validateConfirmationEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmationEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmationEnd", "body", "date-time", m.ConfirmationEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregInformation) validateConfirmationStart(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmationStart) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmationStart", "body", "date-time", m.ConfirmationStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregInformation) validateMinPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.MinPeriod) { // not required
		return nil
	}

	if m.MinPeriod != nil {
		if err := m.MinPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *PreregInformation) validatePeriodEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("periodEnd", "body", "date-time", m.PeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreregInformation) validatePeriodStart(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodStart) { // not required
		return nil
	}

	if err := validate.FormatOf("periodStart", "body", "date-time", m.PeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prereg information based on the context it is used
func (m *PreregInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreregInformation) contextValidateMinPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.MinPeriod != nil {

		if swag.IsZero(m.MinPeriod) { // not required
			return nil
		}

		if err := m.MinPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PreregInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreregInformation) UnmarshalBinary(b []byte) error {
	var res PreregInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
