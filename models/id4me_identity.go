// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Id4meIdentity id4me identity
//
// swagger:model Id4meIdentity
type Id4meIdentity struct {

	// Additional information
	Addons Configuration `json:"addons,omitempty"`

	// The ID4ME agent
	// Required: true
	Agent *Id4MeAgent `json:"agent"`

	// The initial claims
	Claims *Claims `json:"claims,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The language.
	// Required: true
	Language *string `json:"language"`

	// The generated magic link
	MagicLink string `json:"magicLink,omitempty"`

	// Fully qualified domain name
	Name string `json:"name,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// DNS text records
	Record []string `json:"record"`

	// Url to redirect to passwort reset
	ResetURL string `json:"resetUrl,omitempty"`

	// time when reset url expire
	// Format: date-time
	ResetURLExpire strfmt.DateTime `json:"resetUrlExpire,omitempty"`

	// Enables showing claims.
	ShowClaims bool `json:"showClaims,omitempty"`

	// status
	Status IdentityStatus `json:"status,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// Expiration of verification
	// Format: date-time
	VerifyExpire strfmt.DateTime `json:"verifyExpire,omitempty"`
}

// Validate validates this id4me identity
func (m *Id4meIdentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaims(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetURLExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifyExpire(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Id4meIdentity) validateAgent(formats strfmt.Registry) error {

	if err := validate.Required("agent", "body", m.Agent); err != nil {
		return err
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Id4meIdentity) validateClaims(formats strfmt.Registry) error {

	if swag.IsZero(m.Claims) { // not required
		return nil
	}

	if m.Claims != nil {
		if err := m.Claims.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claims")
			}
			return err
		}
	}

	return nil
}

func (m *Id4meIdentity) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Id4meIdentity) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *Id4meIdentity) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Id4meIdentity) validateResetURLExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetURLExpire) { // not required
		return nil
	}

	if err := validate.FormatOf("resetUrlExpire", "body", "date-time", m.ResetURLExpire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Id4meIdentity) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Id4meIdentity) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Id4meIdentity) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *Id4meIdentity) validateVerifyExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.VerifyExpire) { // not required
		return nil
	}

	if err := validate.FormatOf("verifyExpire", "body", "date-time", m.VerifyExpire.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Id4meIdentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Id4meIdentity) UnmarshalBinary(b []byte) error {
	var res Id4meIdentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
