// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PremiumStatusConstants premium status constants
//
// swagger:model PremiumStatusConstants
type PremiumStatusConstants string

func NewPremiumStatusConstants(value PremiumStatusConstants) *PremiumStatusConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PremiumStatusConstants.
func (m PremiumStatusConstants) Pointer() *PremiumStatusConstants {
	return &m
}

const (

	// PremiumStatusConstantsASSIGNED captures enum value "ASSIGNED"
	PremiumStatusConstantsASSIGNED PremiumStatusConstants = "ASSIGNED"

	// PremiumStatusConstantsFREE captures enum value "FREE"
	PremiumStatusConstantsFREE PremiumStatusConstants = "FREE"

	// PremiumStatusConstantsINACTIVE captures enum value "INACTIVE"
	PremiumStatusConstantsINACTIVE PremiumStatusConstants = "INACTIVE"

	// PremiumStatusConstantsEAP captures enum value "EAP"
	PremiumStatusConstantsEAP PremiumStatusConstants = "EAP"

	// PremiumStatusConstantsSYNCERROR captures enum value "SYNC_ERROR"
	PremiumStatusConstantsSYNCERROR PremiumStatusConstants = "SYNC_ERROR"

	// PremiumStatusConstantsOFFERED captures enum value "OFFERED"
	PremiumStatusConstantsOFFERED PremiumStatusConstants = "OFFERED"

	// PremiumStatusConstantsONHOLD captures enum value "ON_HOLD"
	PremiumStatusConstantsONHOLD PremiumStatusConstants = "ON_HOLD"
)

// for schema
var premiumStatusConstantsEnum []interface{}

func init() {
	var res []PremiumStatusConstants
	if err := json.Unmarshal([]byte(`["ASSIGNED","FREE","INACTIVE","EAP","SYNC_ERROR","OFFERED","ON_HOLD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		premiumStatusConstantsEnum = append(premiumStatusConstantsEnum, v)
	}
}

func (m PremiumStatusConstants) validatePremiumStatusConstantsEnum(path, location string, value PremiumStatusConstants) error {
	if err := validate.EnumCase(path, location, value, premiumStatusConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this premium status constants
func (m PremiumStatusConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePremiumStatusConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this premium status constants based on context it is used
func (m PremiumStatusConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
