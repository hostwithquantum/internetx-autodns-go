// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SellMode sell mode
//
// swagger:model SellMode
type SellMode string

func NewSellMode(value SellMode) *SellMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SellMode.
func (m SellMode) Pointer() *SellMode {
	return &m
}

const (

	// SellModeMANUAL captures enum value "MANUAL"
	SellModeMANUAL SellMode = "MANUAL"

	// SellModeAUTO captures enum value "AUTO"
	SellModeAUTO SellMode = "AUTO"
)

// for schema
var sellModeEnum []interface{}

func init() {
	var res []SellMode
	if err := json.Unmarshal([]byte(`["MANUAL","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sellModeEnum = append(sellModeEnum, v)
	}
}

func (m SellMode) validateSellModeEnum(path, location string, value SellMode) error {
	if err := validate.EnumCase(path, location, value, sellModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sell mode
func (m SellMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSellModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sell mode based on context it is used
func (m SellMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
