// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NameserverActionConstants nameserver action constants
//
// swagger:model NameserverActionConstants
type NameserverActionConstants string

const (

	// NameserverActionConstantsPRIMARY captures enum value "PRIMARY"
	NameserverActionConstantsPRIMARY NameserverActionConstants = "PRIMARY"

	// NameserverActionConstantsSECONDARY captures enum value "SECONDARY"
	NameserverActionConstantsSECONDARY NameserverActionConstants = "SECONDARY"

	// NameserverActionConstantsCOMPLETE captures enum value "COMPLETE"
	NameserverActionConstantsCOMPLETE NameserverActionConstants = "COMPLETE"

	// NameserverActionConstantsHIDDEN captures enum value "HIDDEN"
	NameserverActionConstantsHIDDEN NameserverActionConstants = "HIDDEN"

	// NameserverActionConstantsNONE captures enum value "NONE"
	NameserverActionConstantsNONE NameserverActionConstants = "NONE"

	// NameserverActionConstantsAUTO captures enum value "AUTO"
	NameserverActionConstantsAUTO NameserverActionConstants = "AUTO"
)

// for schema
var nameserverActionConstantsEnum []interface{}

func init() {
	var res []NameserverActionConstants
	if err := json.Unmarshal([]byte(`["PRIMARY","SECONDARY","COMPLETE","HIDDEN","NONE","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nameserverActionConstantsEnum = append(nameserverActionConstantsEnum, v)
	}
}

func (m NameserverActionConstants) validateNameserverActionConstantsEnum(path, location string, value NameserverActionConstants) error {
	if err := validate.EnumCase(path, location, value, nameserverActionConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this nameserver action constants
func (m NameserverActionConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNameserverActionConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
