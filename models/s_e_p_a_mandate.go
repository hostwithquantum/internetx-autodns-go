// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SEPAMandate s e p a mandate
//
// swagger:model SEPAMandate
type SEPAMandate struct {

	// The holder of the bank account
	AccountHolder string `json:"accountHolder,omitempty"`

	// The bank bic
	Bic string `json:"bic,omitempty"`

	// Flag for indicating if the confirm data has been checked
	// Required: true
	ConfirmChecked *bool `json:"confirmChecked"`

	// The address of the confirm signature
	// Required: true
	ConfirmIP InetAddress `json:"confirmIp"`

	// The date of the confirm signature
	// Required: true
	// Format: date-time
	ConfirmSignature *strfmt.DateTime `json:"confirmSignature"`

	// The user agent of the confirm signature
	ConfirmUseragent string `json:"confirmUseragent,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Date after the mandate will be expired
	// Format: date-time
	Expire strfmt.DateTime `json:"expire,omitempty"`

	// A list of historized sepa mandates
	Histories []*SEPAMandate `json:"histories"`

	// The bank iban
	Iban string `json:"iban,omitempty"`

	// The sepa mandate reference
	Reference string `json:"reference,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this s e p a mandate
func (m *SEPAMandate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmChecked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SEPAMandate) validateConfirmChecked(formats strfmt.Registry) error {

	if err := validate.Required("confirmChecked", "body", m.ConfirmChecked); err != nil {
		return err
	}

	return nil
}

func (m *SEPAMandate) validateConfirmIP(formats strfmt.Registry) error {

	if err := validate.Required("confirmIp", "body", m.ConfirmIP); err != nil {
		return err
	}

	return nil
}

func (m *SEPAMandate) validateConfirmSignature(formats strfmt.Registry) error {

	if err := validate.Required("confirmSignature", "body", m.ConfirmSignature); err != nil {
		return err
	}

	if err := validate.FormatOf("confirmSignature", "body", "date-time", m.ConfirmSignature.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SEPAMandate) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SEPAMandate) validateExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.Expire) { // not required
		return nil
	}

	if err := validate.FormatOf("expire", "body", "date-time", m.Expire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SEPAMandate) validateHistories(formats strfmt.Registry) error {

	if swag.IsZero(m.Histories) { // not required
		return nil
	}

	for i := 0; i < len(m.Histories); i++ {
		if swag.IsZero(m.Histories[i]) { // not required
			continue
		}

		if m.Histories[i] != nil {
			if err := m.Histories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("histories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SEPAMandate) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SEPAMandate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SEPAMandate) UnmarshalBinary(b []byte) error {
	var res SEPAMandate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
