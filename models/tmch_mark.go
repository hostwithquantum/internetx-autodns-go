// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TmchMark tmch mark
//
// swagger:model TmchMark
type TmchMark struct {

	// claims notify
	// Required: true
	ClaimsNotify *bool `json:"claimsNotify"`

	// claims notify extended
	ClaimsNotifyExtended bool `json:"claimsNotifyExtended,omitempty"`

	// comments
	Comments []*TmchMarkComment `json:"comments"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// documents
	Documents []*TmchMarkDocument `json:"documents"`

	// extension
	Extension *TmchMarkAddon `json:"extension,omitempty"`

	// holder
	Holder *TmchContact `json:"holder,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// name
	// Required: true
	Name *string `json:"name"`

	// order complete
	OrderComplete bool `json:"orderComplete,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// payable
	// Required: true
	// Format: date-time
	Payable *strfmt.DateTime `json:"payable"`

	// period
	// Required: true
	Period *TimePeriod `json:"period"`

	// reference
	// Required: true
	Reference *string `json:"reference"`

	// renew
	Renew RenewStatusConstants `json:"renew,omitempty"`

	// sent
	Sent bool `json:"sent,omitempty"`

	// smd file
	SmdFile string `json:"smdFile,omitempty"`

	// smd inclusion
	// Required: true
	SmdInclusion *bool `json:"smdInclusion"`

	// status
	Status TmchMarkStatusConstants `json:"status,omitempty"`

	// type
	// Required: true
	Type TmchMarkTypeConstants `json:"type"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this tmch mark
func (m *TmchMark) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimsNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmdInclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchMark) validateClaimsNotify(formats strfmt.Registry) error {

	if err := validate.Required("claimsNotify", "body", m.ClaimsNotify); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateDocuments(formats strfmt.Registry) error {

	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) validateExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.Holder) { // not required
		return nil
	}

	if m.Holder != nil {
		if err := m.Holder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("holder")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validatePayable(formats strfmt.Registry) error {

	if err := validate.Required("payable", "body", m.Payable); err != nil {
		return err
	}

	if err := validate.FormatOf("payable", "body", "date-time", m.Payable.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateRenew(formats strfmt.Registry) error {

	if swag.IsZero(m.Renew) { // not required
		return nil
	}

	if err := m.Renew.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("renew")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateSmdInclusion(formats strfmt.Registry) error {

	if err := validate.Required("smdInclusion", "body", m.SmdInclusion); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TmchMark) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TmchMark) UnmarshalBinary(b []byte) error {
	var res TmchMark
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
