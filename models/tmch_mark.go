// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TmchMark tmch mark
//
// swagger:model TmchMark
type TmchMark struct {

	// claims notify
	ClaimsNotify bool `json:"claimsNotify,omitempty"`

	// claims notify extended
	ClaimsNotifyExtended bool `json:"claimsNotifyExtended,omitempty"`

	// comments
	Comments []*TmchMarkComment `json:"comments"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// documents
	Documents []*TmchMarkDocument `json:"documents"`

	// extension
	Extension *TmchMarkAddon `json:"extension,omitempty"`

	// holder
	Holder *TmchContact `json:"holder,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// name
	Name string `json:"name,omitempty"`

	// order complete
	OrderComplete bool `json:"orderComplete,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// payable
	// Format: date-time
	Payable strfmt.DateTime `json:"payable,omitempty"`

	// period
	Period *TimePeriod `json:"period,omitempty"`

	// reference
	Reference string `json:"reference,omitempty"`

	// renew
	Renew RenewStatusConstants `json:"renew,omitempty"`

	// sent
	Sent bool `json:"sent,omitempty"`

	// smd file
	SmdFile string `json:"smdFile,omitempty"`

	// smd inclusion
	SmdInclusion bool `json:"smdInclusion,omitempty"`

	// status
	Status TmchMarkStatusConstants `json:"status,omitempty"`

	// type
	Type TmchMarkTypeConstants `json:"type,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`
}

// Validate validates this tmch mark
func (m *TmchMark) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchMark) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) validateExtension(formats strfmt.Registry) error {
	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateHolder(formats strfmt.Registry) error {
	if swag.IsZero(m.Holder) { // not required
		return nil
	}

	if m.Holder != nil {
		if err := m.Holder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("holder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("holder")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validatePayable(formats strfmt.Registry) error {
	if swag.IsZero(m.Payable) { // not required
		return nil
	}

	if err := validate.FormatOf("payable", "body", "date-time", m.Payable.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validatePeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) validateRenew(formats strfmt.Registry) error {
	if swag.IsZero(m.Renew) { // not required
		return nil
	}

	if err := m.Renew.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("renew")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("renew")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *TmchMark) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TmchMark) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tmch mark based on the context it is used
func (m *TmchMark) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtension(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenew(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TmchMark) contextValidateComments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Comments); i++ {

		if m.Comments[i] != nil {

			if swag.IsZero(m.Comments[i]) { // not required
				return nil
			}

			if err := m.Comments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) contextValidateDocuments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Documents); i++ {

		if m.Documents[i] != nil {

			if swag.IsZero(m.Documents[i]) { // not required
				return nil
			}

			if err := m.Documents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TmchMark) contextValidateExtension(ctx context.Context, formats strfmt.Registry) error {

	if m.Extension != nil {

		if swag.IsZero(m.Extension) { // not required
			return nil
		}

		if err := m.Extension.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) contextValidateHolder(ctx context.Context, formats strfmt.Registry) error {

	if m.Holder != nil {

		if swag.IsZero(m.Holder) { // not required
			return nil
		}

		if err := m.Holder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("holder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("holder")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {

		if swag.IsZero(m.Period) { // not required
			return nil
		}

		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *TmchMark) contextValidateRenew(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Renew) { // not required
		return nil
	}

	if err := m.Renew.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("renew")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("renew")
		}
		return err
	}

	return nil
}

func (m *TmchMark) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TmchMark) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *TmchMark) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TmchMark) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TmchMark) UnmarshalBinary(b []byte) error {
	var res TmchMark
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
