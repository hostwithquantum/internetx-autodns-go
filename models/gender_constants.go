// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GenderConstants gender constants
//
// swagger:model GenderConstants
type GenderConstants string

func NewGenderConstants(value GenderConstants) *GenderConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GenderConstants.
func (m GenderConstants) Pointer() *GenderConstants {
	return &m
}

const (

	// GenderConstantsMALE captures enum value "MALE"
	GenderConstantsMALE GenderConstants = "MALE"

	// GenderConstantsFEMALE captures enum value "FEMALE"
	GenderConstantsFEMALE GenderConstants = "FEMALE"
)

// for schema
var genderConstantsEnum []interface{}

func init() {
	var res []GenderConstants
	if err := json.Unmarshal([]byte(`["MALE","FEMALE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		genderConstantsEnum = append(genderConstantsEnum, v)
	}
}

func (m GenderConstants) validateGenderConstantsEnum(path, location string, value GenderConstants) error {
	if err := validate.EnumCase(path, location, value, genderConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gender constants
func (m GenderConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGenderConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gender constants based on context it is used
func (m GenderConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
