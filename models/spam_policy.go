// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpamPolicy spam policy
//
// swagger:model SpamPolicy
type SpamPolicy struct {

	// kill
	// Maximum: 999.9
	// Minimum: -999.9
	Kill *float64 `json:"kill,omitempty"`

	// modify subject
	ModifySubject bool `json:"modifySubject,omitempty"`

	// quarantine digest interval
	// Minimum: 1440
	QuarantineDigestInterval int32 `json:"quarantineDigestInterval,omitempty"`

	// spam
	// Maximum: 999.9
	// Minimum: -999.9
	Spam *float64 `json:"spam,omitempty"`

	// tag header
	// Maximum: 999.9
	// Minimum: -999.9
	TagHeader *float64 `json:"tagHeader,omitempty"`
}

// Validate validates this spam policy
func (m *SpamPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuarantineDigestInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpamPolicy) validateKill(formats strfmt.Registry) error {

	if swag.IsZero(m.Kill) { // not required
		return nil
	}

	if err := validate.Minimum("kill", "body", float64(*m.Kill), -999.9, false); err != nil {
		return err
	}

	if err := validate.Maximum("kill", "body", float64(*m.Kill), 999.9, false); err != nil {
		return err
	}

	return nil
}

func (m *SpamPolicy) validateQuarantineDigestInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.QuarantineDigestInterval) { // not required
		return nil
	}

	if err := validate.MinimumInt("quarantineDigestInterval", "body", int64(m.QuarantineDigestInterval), 1440, false); err != nil {
		return err
	}

	return nil
}

func (m *SpamPolicy) validateSpam(formats strfmt.Registry) error {

	if swag.IsZero(m.Spam) { // not required
		return nil
	}

	if err := validate.Minimum("spam", "body", float64(*m.Spam), -999.9, false); err != nil {
		return err
	}

	if err := validate.Maximum("spam", "body", float64(*m.Spam), 999.9, false); err != nil {
		return err
	}

	return nil
}

func (m *SpamPolicy) validateTagHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.TagHeader) { // not required
		return nil
	}

	if err := validate.Minimum("tagHeader", "body", float64(*m.TagHeader), -999.9, false); err != nil {
		return err
	}

	if err := validate.Maximum("tagHeader", "body", float64(*m.TagHeader), 999.9, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpamPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpamPolicy) UnmarshalBinary(b []byte) error {
	var res SpamPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
