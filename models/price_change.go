// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceChange price change
//
// swagger:model PriceChange
type PriceChange struct {

	// Article
	Article *Article `json:"article,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// the confirmed date of the priceChange
	// Format: date-time
	Confirmed strfmt.DateTime `json:"confirmed,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// the customer or customer group used for the price change
	Customer *GenericCustomer `json:"customer,omitempty"`

	// The new customer data
	CustomerData *BasicCustomer `json:"customerData,omitempty"`

	// the error message from job
	ErrorMessage string `json:"errorMessage,omitempty"`

	// PriceClassTemplate
	ErrorPriceClassTemplate *PriceClassTemplate `json:"errorPriceClassTemplate,omitempty"`

	// ProductPriceTemplate
	ErrorProductPriceTemplate *ProductPriceTemplate `json:"errorProductPriceTemplate,omitempty"`

	// The id.
	ID int32 `json:"id,omitempty"`

	// the messageSend date of the priceChange
	// Format: date-time
	MessageSend strfmt.DateTime `json:"messageSend,omitempty"`

	// The name of the priceChange.
	Name string `json:"name,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// price change excludes
	PriceChangeExcludes []*PriceChangeExclude `json:"priceChangeExcludes"`

	// Used by the patch route
	PriceChangeExcludesAdd []*PriceChangeExclude `json:"priceChangeExcludesAdd"`

	// Used by the patch route
	PriceChangeExcludesRem []*PriceChangeExclude `json:"priceChangeExcludesRem"`

	// prefix of the price class
	PriceClassPrefix string `json:"priceClassPrefix,omitempty"`

	// price class templates
	PriceClassTemplates []*PriceClassTemplate `json:"priceClassTemplates"`

	// type of the priceClass article
	PriceClassType string `json:"priceClassType,omitempty"`

	// price templates
	PriceTemplates []*ProductPriceTemplate `json:"priceTemplates"`

	// The optional primary price change
	Primary *PriceChange `json:"primary,omitempty"`

	// status
	Status PriceChangeStatusConstants `json:"status,omitempty"`

	// The ticketing number if available.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// type
	Type PriceChangeTypeConstants `json:"type,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`

	// the validFrom date of the priceChange
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	// the validUntil date of the priceChange
	// Format: date-time
	ValidUntil strfmt.DateTime `json:"validUntil,omitempty"`

	// the worker of the priceChange
	Worker string `json:"worker,omitempty"`
}

// Validate validates this price change
func (m *PriceChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorPriceClassTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorProductPriceTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceChangeExcludes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceChangeExcludesAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceChangeExcludesRem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceClassTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceChange) validateArticle(formats strfmt.Registry) error {
	if swag.IsZero(m.Article) { // not required
		return nil
	}

	if m.Article != nil {
		if err := m.Article.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("article")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateConfirmed(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmed) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmed", "body", "date-time", m.Confirmed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceChange) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceChange) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateCustomerData(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerData) { // not required
		return nil
	}

	if m.CustomerData != nil {
		if err := m.CustomerData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerData")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateErrorPriceClassTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorPriceClassTemplate) { // not required
		return nil
	}

	if m.ErrorPriceClassTemplate != nil {
		if err := m.ErrorPriceClassTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorPriceClassTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorPriceClassTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateErrorProductPriceTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorProductPriceTemplate) { // not required
		return nil
	}

	if m.ErrorProductPriceTemplate != nil {
		if err := m.ErrorProductPriceTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorProductPriceTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorProductPriceTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateMessageSend(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageSend) { // not required
		return nil
	}

	if err := validate.FormatOf("messageSend", "body", "date-time", m.MessageSend.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceChange) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validatePriceChangeExcludes(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceChangeExcludes) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceChangeExcludes); i++ {
		if swag.IsZero(m.PriceChangeExcludes[i]) { // not required
			continue
		}

		if m.PriceChangeExcludes[i] != nil {
			if err := m.PriceChangeExcludes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) validatePriceChangeExcludesAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceChangeExcludesAdd) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceChangeExcludesAdd); i++ {
		if swag.IsZero(m.PriceChangeExcludesAdd[i]) { // not required
			continue
		}

		if m.PriceChangeExcludesAdd[i] != nil {
			if err := m.PriceChangeExcludesAdd[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludesAdd" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludesAdd" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) validatePriceChangeExcludesRem(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceChangeExcludesRem) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceChangeExcludesRem); i++ {
		if swag.IsZero(m.PriceChangeExcludesRem[i]) { // not required
			continue
		}

		if m.PriceChangeExcludesRem[i] != nil {
			if err := m.PriceChangeExcludesRem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludesRem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludesRem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) validatePriceClassTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceClassTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceClassTemplates); i++ {
		if swag.IsZero(m.PriceClassTemplates[i]) { // not required
			continue
		}

		if m.PriceClassTemplates[i] != nil {
			if err := m.PriceClassTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceClassTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceClassTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) validatePriceTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceTemplates); i++ {
		if swag.IsZero(m.PriceTemplates[i]) { // not required
			continue
		}

		if m.PriceTemplates[i] != nil {
			if err := m.PriceTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) validatePrimary(formats strfmt.Registry) error {
	if swag.IsZero(m.Primary) { // not required
		return nil
	}

	if m.Primary != nil {
		if err := m.Primary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *PriceChange) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *PriceChange) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceChange) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) validateValidFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PriceChange) validateValidUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("validUntil", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this price change based on the context it is used
func (m *PriceChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArticle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorPriceClassTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorProductPriceTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceChangeExcludes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceChangeExcludesAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceChangeExcludesRem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceClassTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceChange) contextValidateArticle(ctx context.Context, formats strfmt.Registry) error {

	if m.Article != nil {

		if swag.IsZero(m.Article) { // not required
			return nil
		}

		if err := m.Article.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("article")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateCustomerData(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerData != nil {

		if swag.IsZero(m.CustomerData) { // not required
			return nil
		}

		if err := m.CustomerData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerData")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateErrorPriceClassTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorPriceClassTemplate != nil {

		if swag.IsZero(m.ErrorPriceClassTemplate) { // not required
			return nil
		}

		if err := m.ErrorPriceClassTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorPriceClassTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorPriceClassTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateErrorProductPriceTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorProductPriceTemplate != nil {

		if swag.IsZero(m.ErrorProductPriceTemplate) { // not required
			return nil
		}

		if err := m.ErrorProductPriceTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorProductPriceTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorProductPriceTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidatePriceChangeExcludes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceChangeExcludes); i++ {

		if m.PriceChangeExcludes[i] != nil {

			if swag.IsZero(m.PriceChangeExcludes[i]) { // not required
				return nil
			}

			if err := m.PriceChangeExcludes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) contextValidatePriceChangeExcludesAdd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceChangeExcludesAdd); i++ {

		if m.PriceChangeExcludesAdd[i] != nil {

			if swag.IsZero(m.PriceChangeExcludesAdd[i]) { // not required
				return nil
			}

			if err := m.PriceChangeExcludesAdd[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludesAdd" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludesAdd" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) contextValidatePriceChangeExcludesRem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceChangeExcludesRem); i++ {

		if m.PriceChangeExcludesRem[i] != nil {

			if swag.IsZero(m.PriceChangeExcludesRem[i]) { // not required
				return nil
			}

			if err := m.PriceChangeExcludesRem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceChangeExcludesRem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceChangeExcludesRem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) contextValidatePriceClassTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceClassTemplates); i++ {

		if m.PriceClassTemplates[i] != nil {

			if swag.IsZero(m.PriceClassTemplates[i]) { // not required
				return nil
			}

			if err := m.PriceClassTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceClassTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceClassTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) contextValidatePriceTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceTemplates); i++ {

		if m.PriceTemplates[i] != nil {

			if swag.IsZero(m.PriceTemplates[i]) { // not required
				return nil
			}

			if err := m.PriceTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priceTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PriceChange) contextValidatePrimary(ctx context.Context, formats strfmt.Registry) error {

	if m.Primary != nil {

		if swag.IsZero(m.Primary) { // not required
			return nil
		}

		if err := m.Primary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

func (m *PriceChange) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *PriceChange) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *PriceChange) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceChange) UnmarshalBinary(b []byte) error {
	var res PriceChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
