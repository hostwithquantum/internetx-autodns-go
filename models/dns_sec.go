// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DNSSec DNS sec
//
// swagger:model DNSSec
type DNSSec struct {

	// The algorithm.
	// Required: true
	Algorithm *int32 `json:"algorithm"`

	// The flags.
	// Required: true
	// Maximum: 257
	// Minimum: 256
	Flags *int32 `json:"flags"`

	// The protocol.
	// Required: true
	Protocol *int32 `json:"protocol"`

	// The public key.
	// Required: true
	// Pattern: ^[\sA-Za-z0-9+\/]+[=]*$
	PublicKey *string `json:"publicKey"`
}

// Validate validates this DNS sec
func (m *DNSSec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DNSSec) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *DNSSec) validateFlags(formats strfmt.Registry) error {

	if err := validate.Required("flags", "body", m.Flags); err != nil {
		return err
	}

	if err := validate.MinimumInt("flags", "body", int64(*m.Flags), 256, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("flags", "body", int64(*m.Flags), 257, false); err != nil {
		return err
	}

	return nil
}

func (m *DNSSec) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *DNSSec) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	if err := validate.Pattern("publicKey", "body", string(*m.PublicKey), `^[\sA-Za-z0-9+\/]+[=]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DNSSec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSSec) UnmarshalBinary(b []byte) error {
	var res DNSSec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
