// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TmchMarkHolderConstants tmch mark holder constants
//
// swagger:model TmchMarkHolderConstants
type TmchMarkHolderConstants string

func NewTmchMarkHolderConstants(value TmchMarkHolderConstants) *TmchMarkHolderConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TmchMarkHolderConstants.
func (m TmchMarkHolderConstants) Pointer() *TmchMarkHolderConstants {
	return &m
}

const (

	// TmchMarkHolderConstantsOWNER captures enum value "OWNER"
	TmchMarkHolderConstantsOWNER TmchMarkHolderConstants = "OWNER"

	// TmchMarkHolderConstantsLICENSEE captures enum value "LICENSEE"
	TmchMarkHolderConstantsLICENSEE TmchMarkHolderConstants = "LICENSEE"

	// TmchMarkHolderConstantsASSIGNEE captures enum value "ASSIGNEE"
	TmchMarkHolderConstantsASSIGNEE TmchMarkHolderConstants = "ASSIGNEE"
)

// for schema
var tmchMarkHolderConstantsEnum []interface{}

func init() {
	var res []TmchMarkHolderConstants
	if err := json.Unmarshal([]byte(`["OWNER","LICENSEE","ASSIGNEE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tmchMarkHolderConstantsEnum = append(tmchMarkHolderConstantsEnum, v)
	}
}

func (m TmchMarkHolderConstants) validateTmchMarkHolderConstantsEnum(path, location string, value TmchMarkHolderConstants) error {
	if err := validate.EnumCase(path, location, value, tmchMarkHolderConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tmch mark holder constants
func (m TmchMarkHolderConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTmchMarkHolderConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tmch mark holder constants based on context it is used
func (m TmchMarkHolderConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
