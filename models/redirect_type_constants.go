// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RedirectTypeConstants redirect type constants
//
// swagger:model RedirectTypeConstants
type RedirectTypeConstants string

func NewRedirectTypeConstants(value RedirectTypeConstants) *RedirectTypeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RedirectTypeConstants.
func (m RedirectTypeConstants) Pointer() *RedirectTypeConstants {
	return &m
}

const (

	// RedirectTypeConstantsDOMAIN captures enum value "DOMAIN"
	RedirectTypeConstantsDOMAIN RedirectTypeConstants = "DOMAIN"

	// RedirectTypeConstantsEMAIL captures enum value "EMAIL"
	RedirectTypeConstantsEMAIL RedirectTypeConstants = "EMAIL"
)

// for schema
var redirectTypeConstantsEnum []interface{}

func init() {
	var res []RedirectTypeConstants
	if err := json.Unmarshal([]byte(`["DOMAIN","EMAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		redirectTypeConstantsEnum = append(redirectTypeConstantsEnum, v)
	}
}

func (m RedirectTypeConstants) validateRedirectTypeConstantsEnum(path, location string, value RedirectTypeConstants) error {
	if err := validate.EnumCase(path, location, value, redirectTypeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this redirect type constants
func (m RedirectTypeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRedirectTypeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this redirect type constants based on context it is used
func (m RedirectTypeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
