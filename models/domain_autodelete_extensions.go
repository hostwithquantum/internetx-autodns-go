// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAutodeleteExtensions domain autodelete extensions
//
// swagger:model DomainAutodeleteExtensions
type DomainAutodeleteExtensions struct {

	// auto delete status
	AutoDeleteStatus AutoDeleteStatus `json:"autoDeleteStatus,omitempty"`

	// autodelete last updated
	// Format: date-time
	AutodeleteLastUpdated strfmt.DateTime `json:"autodeleteLastUpdated,omitempty"`

	// autodelete payment limit
	// Format: date-time
	AutodeletePaymentLimit strfmt.DateTime `json:"autodeletePaymentLimit,omitempty"`
}

// Validate validates this domain autodelete extensions
func (m *DomainAutodeleteExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoDeleteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutodeleteLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutodeletePaymentLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAutodeleteExtensions) validateAutoDeleteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoDeleteStatus) { // not required
		return nil
	}

	if err := m.AutoDeleteStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("autoDeleteStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("autoDeleteStatus")
		}
		return err
	}

	return nil
}

func (m *DomainAutodeleteExtensions) validateAutodeleteLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.AutodeleteLastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("autodeleteLastUpdated", "body", "date-time", m.AutodeleteLastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainAutodeleteExtensions) validateAutodeletePaymentLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.AutodeletePaymentLimit) { // not required
		return nil
	}

	if err := validate.FormatOf("autodeletePaymentLimit", "body", "date-time", m.AutodeletePaymentLimit.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain autodelete extensions based on the context it is used
func (m *DomainAutodeleteExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoDeleteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAutodeleteExtensions) contextValidateAutoDeleteStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AutoDeleteStatus) { // not required
		return nil
	}

	if err := m.AutoDeleteStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("autoDeleteStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("autoDeleteStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAutodeleteExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAutodeleteExtensions) UnmarshalBinary(b []byte) error {
	var res DomainAutodeleteExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
