// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DocumentType document type
//
// swagger:model DocumentType
type DocumentType string

func NewDocumentType(value DocumentType) *DocumentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DocumentType.
func (m DocumentType) Pointer() *DocumentType {
	return &m
}

const (

	// DocumentTypeCONTACT captures enum value "CONTACT"
	DocumentTypeCONTACT DocumentType = "CONTACT"

	// DocumentTypeJOB captures enum value "JOB"
	DocumentTypeJOB DocumentType = "JOB"
)

// for schema
var documentTypeEnum []interface{}

func init() {
	var res []DocumentType
	if err := json.Unmarshal([]byte(`["CONTACT","JOB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentTypeEnum = append(documentTypeEnum, v)
	}
}

func (m DocumentType) validateDocumentTypeEnum(path, location string, value DocumentType) error {
	if err := validate.EnumCase(path, location, value, documentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this document type
func (m DocumentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDocumentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this document type based on context it is used
func (m DocumentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
