// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Zone zone
//
// swagger:model Zone
type Zone struct {

	// Additional nameserver check is proceeded
	Action NameserverActionConstants `json:"action,omitempty"`

	// Allow AXFR
	AllowTransfer bool `json:"allowTransfer,omitempty"`

	// A custom field. Can only be updated via PUT /zone/{name}/{nameserver}/_comment. Requires appropriate ACLs.
	Comment string `json:"comment,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Enables dnssec
	Dnssec bool `json:"dnssec,omitempty"`

	// true if the domain is represented in the domain safe
	Domainsafe bool `json:"domainsafe,omitempty"`

	// The free text records.
	FreeText []string `json:"freeText"`

	// The grants where transfer (axfr) can be done from.
	Grants []string `json:"grants"`

	// The idn version of the origin.
	Idn string `json:"idn,omitempty"`

	// The id of the related log-entry.
	LogID int64 `json:"logId,omitempty"`

	// IP address of the zone (A record)
	Main *MainIP `json:"main,omitempty"`

	// The name of the name server group, if the zone is managed by
	NameServerGroup string `json:"nameServerGroup,omitempty"`

	// List of name servers
	NameServers []*NameServer `json:"nameServers"`

	// Zone name
	// Required: true
	Origin *string `json:"origin"`

	// The owner of the object
	Owner *BasicUser `json:"owner,omitempty"`

	// The resource records.
	// Max Items: 10000
	// Min Items: 0
	ResourceRecords []*ResourceRecord `json:"resourceRecords"`

	// The resource object identifier of the zone
	Roid int32 `json:"roid,omitempty"`

	// Only for ns_action: "primary"  and "complete"
	Soa *Soa `json:"soa,omitempty"`

	// Nameserver, the zone is copied from via AXFR (for zone_import)
	Source string `json:"source,omitempty"`

	// System name server to look up the zone to copy
	SourceVirtualHostname string `json:"sourceVirtualHostname,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updating user of the object
	Updater *BasicUser `json:"updater,omitempty"`

	// The first nameserver managed by the system
	VirtualNameServer string `json:"virtualNameServer,omitempty"`

	// Automatic generation of resource records "www"
	WwwInclude bool `json:"wwwInclude,omitempty"`
}

// Validate validates this zone
func (m *Zone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Zone) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *Zone) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateMain(formats strfmt.Registry) error {

	if swag.IsZero(m.Main) { // not required
		return nil
	}

	if m.Main != nil {
		if err := m.Main.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("main")
			}
			return err
		}
	}

	return nil
}

func (m *Zone) validateNameServers(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NameServers); i++ {
		if swag.IsZero(m.NameServers[i]) { // not required
			continue
		}

		if m.NameServers[i] != nil {
			if err := m.NameServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nameServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Zone) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Zone) validateResourceRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceRecords) { // not required
		return nil
	}

	iResourceRecordsSize := int64(len(m.ResourceRecords))

	if err := validate.MinItems("resourceRecords", "body", iResourceRecordsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("resourceRecords", "body", iResourceRecordsSize, 10000); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceRecords); i++ {
		if swag.IsZero(m.ResourceRecords[i]) { // not required
			continue
		}

		if m.ResourceRecords[i] != nil {
			if err := m.ResourceRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Zone) validateSoa(formats strfmt.Registry) error {

	if swag.IsZero(m.Soa) { // not required
		return nil
	}

	if m.Soa != nil {
		if err := m.Soa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("soa")
			}
			return err
		}
	}

	return nil
}

func (m *Zone) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Zone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Zone) UnmarshalBinary(b []byte) error {
	var res Zone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
