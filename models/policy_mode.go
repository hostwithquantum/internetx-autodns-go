// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyMode policy mode
//
// swagger:model PolicyMode
type PolicyMode string

func NewPolicyMode(value PolicyMode) *PolicyMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyMode.
func (m PolicyMode) Pointer() *PolicyMode {
	return &m
}

const (

	// PolicyModeDISABLED captures enum value "DISABLED"
	PolicyModeDISABLED PolicyMode = "DISABLED"

	// PolicyModeQUARANTINE captures enum value "QUARANTINE"
	PolicyModeQUARANTINE PolicyMode = "QUARANTINE"

	// PolicyModeDISCARD captures enum value "DISCARD"
	PolicyModeDISCARD PolicyMode = "DISCARD"

	// PolicyModeACCEPT captures enum value "ACCEPT"
	PolicyModeACCEPT PolicyMode = "ACCEPT"
)

// for schema
var policyModeEnum []interface{}

func init() {
	var res []PolicyMode
	if err := json.Unmarshal([]byte(`["DISABLED","QUARANTINE","DISCARD","ACCEPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyModeEnum = append(policyModeEnum, v)
	}
}

func (m PolicyMode) validatePolicyModeEnum(path, location string, value PolicyMode) error {
	if err := validate.EnumCase(path, location, value, policyModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy mode
func (m PolicyMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy mode based on context it is used
func (m PolicyMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
