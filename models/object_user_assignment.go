// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectUserAssignment object user assignment
//
// swagger:model ObjectUserAssignment
type ObjectUserAssignment struct {

	// The cancelation mode.
	Cancelation ObjectAssignmentMode `json:"cancelation,omitempty"`

	// The object name.
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Name *string `json:"name"`

	// The owner of the object.
	// Required: true
	Owner *BasicUser `json:"owner"`

	// The source owner.
	Source *BasicUser `json:"source,omitempty"`

	// The target owner.
	Target *BasicUser `json:"target,omitempty"`

	// The type of the object.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this object user assignment
func (m *ObjectUserAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectUserAssignment) validateCancelation(formats strfmt.Registry) error {

	if swag.IsZero(m.Cancelation) { // not required
		return nil
	}

	if err := m.Cancelation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cancelation")
		}
		return err
	}

	return nil
}

func (m *ObjectUserAssignment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *ObjectUserAssignment) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectUserAssignment) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectUserAssignment) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectUserAssignment) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectUserAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectUserAssignment) UnmarshalBinary(b []byte) error {
	var res ObjectUserAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
