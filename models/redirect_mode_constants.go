// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RedirectModeConstants redirect mode constants
//
// swagger:model RedirectModeConstants
type RedirectModeConstants string

func NewRedirectModeConstants(value RedirectModeConstants) *RedirectModeConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RedirectModeConstants.
func (m RedirectModeConstants) Pointer() *RedirectModeConstants {
	return &m
}

const (

	// RedirectModeConstantsCATCHALL captures enum value "CATCHALL"
	RedirectModeConstantsCATCHALL RedirectModeConstants = "CATCHALL"

	// RedirectModeConstantsFRAME captures enum value "FRAME"
	RedirectModeConstantsFRAME RedirectModeConstants = "FRAME"

	// RedirectModeConstantsHTTP captures enum value "HTTP"
	RedirectModeConstantsHTTP RedirectModeConstants = "HTTP"

	// RedirectModeConstantsSINGLE captures enum value "SINGLE"
	RedirectModeConstantsSINGLE RedirectModeConstants = "SINGLE"

	// RedirectModeConstantsHTTPS captures enum value "HTTPS"
	RedirectModeConstantsHTTPS RedirectModeConstants = "HTTPS"
)

// for schema
var redirectModeConstantsEnum []interface{}

func init() {
	var res []RedirectModeConstants
	if err := json.Unmarshal([]byte(`["CATCHALL","FRAME","HTTP","SINGLE","HTTPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		redirectModeConstantsEnum = append(redirectModeConstantsEnum, v)
	}
}

func (m RedirectModeConstants) validateRedirectModeConstantsEnum(path, location string, value RedirectModeConstants) error {
	if err := validate.EnumCase(path, location, value, redirectModeConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this redirect mode constants
func (m RedirectModeConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRedirectModeConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this redirect mode constants based on context it is used
func (m RedirectModeConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
