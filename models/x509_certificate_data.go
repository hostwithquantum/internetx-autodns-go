// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// X509CertificateData x509 certificate data
//
// swagger:model X509CertificateData
type X509CertificateData struct {

	// The common name
	Cn string `json:"cn,omitempty"`

	// The issuer information of the certificate
	Issuer *X509CertificateIssuer `json:"issuer,omitempty"`

	// The MD5 thumbprint for the certificate.
	Md5Thumbprint string `json:"md5Thumbprint,omitempty"`

	// The plain certificate pem string, that was used to decode.
	Plain string `json:"plain,omitempty"`

	// The public key data from the certificate.
	PublicKeyData *X509CertificatePublicKeyData `json:"publicKeyData,omitempty"`

	// The serial number of the certificate
	SerialNumber string `json:"serialNumber,omitempty"`

	// The SHA-1 thumbprint for the certificate.
	Sha1Thumbprint string `json:"sha1Thumbprint,omitempty"`

	// The SHA-256 thumbprint for the certificate.
	Sha256Thumbprint string `json:"sha256Thumbprint,omitempty"`

	// The signatureAlgorithm of the certificate.
	SignatureAlgorithm string `json:"signatureAlgorithm,omitempty"`

	// The subject information of the certificate
	Subject *X509CertificateSubject `json:"subject,omitempty"`

	// The subject alternativ names covered by this certificate
	SubjectAlternativNames []string `json:"subjectAlternativNames"`

	// The validity of the certificate
	Validity *X509CertificateValidity `json:"validity,omitempty"`
}

// Validate validates this x509 certificate data
func (m *X509CertificateData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKeyData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509CertificateData) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) validatePublicKeyData(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKeyData) { // not required
		return nil
	}

	if m.PublicKeyData != nil {
		if err := m.PublicKeyData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKeyData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKeyData")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) validateValidity(formats strfmt.Registry) error {
	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {
		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this x509 certificate data based on the context it is used
func (m *X509CertificateData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicKeyData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509CertificateData) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if m.Issuer != nil {

		if swag.IsZero(m.Issuer) { // not required
			return nil
		}

		if err := m.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) contextValidatePublicKeyData(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKeyData != nil {

		if swag.IsZero(m.PublicKeyData) { // not required
			return nil
		}

		if err := m.PublicKeyData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKeyData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKeyData")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *X509CertificateData) contextValidateValidity(ctx context.Context, formats strfmt.Registry) error {

	if m.Validity != nil {

		if swag.IsZero(m.Validity) { // not required
			return nil
		}

		if err := m.Validity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509CertificateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509CertificateData) UnmarshalBinary(b []byte) error {
	var res X509CertificateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
