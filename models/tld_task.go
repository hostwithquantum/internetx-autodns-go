// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TldTask tld task
//
// swagger:model TldTask
type TldTask struct {

	// authinfo
	Authinfo AuthInfo `json:"authinfo,omitempty"`

	// available
	Available bool `json:"available,omitempty"`

	// chargeable
	Chargeable bool `json:"chargeable,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// max
	Max *TimePeriod `json:"max,omitempty"`

	// min
	Min *TimePeriod `json:"min,omitempty"`

	// processing
	Processing TldTaskProcessing `json:"processing,omitempty"`

	// required authinfo
	RequiredAuthinfo bool `json:"requiredAuthinfo,omitempty"`
}

// Validate validates this tld task
func (m *TldTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthinfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldTask) validateAuthinfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Authinfo) { // not required
		return nil
	}

	if err := m.Authinfo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authinfo")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authinfo")
		}
		return err
	}

	return nil
}

func (m *TldTask) validateMax(formats strfmt.Registry) error {
	if swag.IsZero(m.Max) { // not required
		return nil
	}

	if m.Max != nil {
		if err := m.Max.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max")
			}
			return err
		}
	}

	return nil
}

func (m *TldTask) validateMin(formats strfmt.Registry) error {
	if swag.IsZero(m.Min) { // not required
		return nil
	}

	if m.Min != nil {
		if err := m.Min.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("min")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("min")
			}
			return err
		}
	}

	return nil
}

func (m *TldTask) validateProcessing(formats strfmt.Registry) error {
	if swag.IsZero(m.Processing) { // not required
		return nil
	}

	if err := m.Processing.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processing")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processing")
		}
		return err
	}

	return nil
}

// ContextValidate validate this tld task based on the context it is used
func (m *TldTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthinfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TldTask) contextValidateAuthinfo(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Authinfo) { // not required
		return nil
	}

	if err := m.Authinfo.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authinfo")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authinfo")
		}
		return err
	}

	return nil
}

func (m *TldTask) contextValidateMax(ctx context.Context, formats strfmt.Registry) error {

	if m.Max != nil {

		if swag.IsZero(m.Max) { // not required
			return nil
		}

		if err := m.Max.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max")
			}
			return err
		}
	}

	return nil
}

func (m *TldTask) contextValidateMin(ctx context.Context, formats strfmt.Registry) error {

	if m.Min != nil {

		if swag.IsZero(m.Min) { // not required
			return nil
		}

		if err := m.Min.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("min")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("min")
			}
			return err
		}
	}

	return nil
}

func (m *TldTask) contextValidateProcessing(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Processing) { // not required
		return nil
	}

	if err := m.Processing.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processing")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processing")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TldTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TldTask) UnmarshalBinary(b []byte) error {
	var res TldTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
