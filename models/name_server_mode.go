// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NameServerMode name server mode
//
// swagger:model NameServerMode
type NameServerMode string

func NewNameServerMode(value NameServerMode) *NameServerMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NameServerMode.
func (m NameServerMode) Pointer() *NameServerMode {
	return &m
}

const (

	// NameServerModeMASTER captures enum value "MASTER"
	NameServerModeMASTER NameServerMode = "MASTER"

	// NameServerModeSLAVE captures enum value "SLAVE"
	NameServerModeSLAVE NameServerMode = "SLAVE"

	// NameServerModeMASTERSLAVE captures enum value "MASTER_SLAVE"
	NameServerModeMASTERSLAVE NameServerMode = "MASTER_SLAVE"

	// NameServerModeCOMPLETE captures enum value "COMPLETE"
	NameServerModeCOMPLETE NameServerMode = "COMPLETE"

	// NameServerModeANYCAST captures enum value "ANYCAST"
	NameServerModeANYCAST NameServerMode = "ANYCAST"
)

// for schema
var nameServerModeEnum []interface{}

func init() {
	var res []NameServerMode
	if err := json.Unmarshal([]byte(`["MASTER","SLAVE","MASTER_SLAVE","COMPLETE","ANYCAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nameServerModeEnum = append(nameServerModeEnum, v)
	}
}

func (m NameServerMode) validateNameServerModeEnum(path, location string, value NameServerMode) error {
	if err := validate.EnumCase(path, location, value, nameServerModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this name server mode
func (m NameServerMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNameServerModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this name server mode based on context it is used
func (m NameServerMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
