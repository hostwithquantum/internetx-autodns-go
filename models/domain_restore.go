// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainRestore domain restore
//
// swagger:model DomainRestore
type DomainRestore struct {

	// The abuse email.
	AbuseEmail string `json:"abuseEmail,omitempty"`

	// The last action.
	Action DomainActionConstants `json:"action,omitempty"`

	// The administrative contact.
	Adminc *Contact `json:"adminc,omitempty"`

	// The authinfo.
	Authinfo string `json:"authinfo,omitempty"`

	// Enables or disables automatic DNSSEC for certain name servers (e.g. NodeSecure).
	AutoDnssec bool `json:"autoDnssec,omitempty"`

	// The autorenew status.
	AutoRenewStatus AutoRenewStatusConstants `json:"autoRenewStatus,omitempty"`

	// AutodnsSecJob
	AutodnsSecJob DNSSecJob `json:"autodnsSecJob,omitempty"`

	// The cancelation status.
	CancelationStatus CancelationStatusConstants `json:"cancelationStatus,omitempty"`

	// A custom field. Can only be updated via PUT /domain/{name}/_comment. Requires appropriate ACLs.
	Comment string `json:"comment,omitempty"`

	// Some TLDs require a confirmation of the â€œTerms and Conditions of Registration.
	ConfirmOrder bool `json:"confirmOrder,omitempty"`

	// Confirms the consent of the domainowner for the changes. Required for gTLDs and new gTLDs when changing the name, the email address or the organization of the domain owner.
	ConfirmOwnerConsent bool `json:"confirmOwnerConsent,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The date at deletion of the domain
	// Format: date-time
	Deleted strfmt.DateTime `json:"deleted,omitempty"`

	// Indicates whether DNSSEC is enabled for the domain or not.
	Dnssec bool `json:"dnssec,omitempty"`

	// Submits the key material to the registry. If the list is empty, the key material is deleted at the registry. If the key is omitted during an update, the data is retained.
	DnssecData []*DNSSec `json:"dnssecData"`

	// The domain creation of the domain at the registry.
	// Format: date-time
	DomainCreated strfmt.DateTime `json:"domainCreated,omitempty"`

	// Enable domainsafe.
	Domainsafe bool `json:"domainsafe,omitempty"`

	// The expire date of the domain.
	// Format: date-time
	Expire strfmt.DateTime `json:"expire,omitempty"`

	// The domain extensions.
	Extensions *DomainExtensions `json:"extensions,omitempty"`

	// The general request mail.
	GeneralRequestEmail string `json:"generalRequestEmail,omitempty"`

	// The unicode domain name
	Idn string `json:"idn,omitempty"`

	// Ignore whois.
	IgnoreWhois bool `json:"ignoreWhois,omitempty"`

	// The logId
	LogID int64 `json:"logId,omitempty"`

	// The name of the domain.
	// Required: true
	Name *string `json:"name"`

	// NSentry is only be provided for .DE. If NSentry is used, nameServers is not allowed.
	NameServerEntries []string `json:"nameServerEntries"`

	// The nameserver group.
	NameServerGroup string `json:"nameServerGroup,omitempty"`

	// The nameservers.
	NameServers []*NameServer `json:"nameServers"`

	// The nic member label.
	NicMemberLabel string `json:"nicMemberLabel,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// The owner contact.
	Ownerc *Contact `json:"ownerc,omitempty"`

	// The parking provider.
	Parking ParkingProviderConstants `json:"parking,omitempty"`

	// The payable date of the domain.
	// Required: true
	// Format: date-time
	Payable *strfmt.DateTime `json:"payable"`

	// The period in years, depends on the requested action
	Period *TimePeriod `json:"period,omitempty"`

	// The priceclass for the registration of the domain.
	PriceClass string `json:"priceClass,omitempty"`

	// The priceclass for the renew of the domain.
	PriceClassRenew string `json:"priceClassRenew,omitempty"`

	// Enable privacy service for the domain.
	Privacy bool `json:"privacy,omitempty"`

	// Enable privacy plus.
	PrivacyPlus bool `json:"privacyPlus,omitempty"`

	// The privacy plus mail.
	PrivacyPlusMail string `json:"privacyPlusMail,omitempty"`

	// Enables the whois output to show redacted contacts.
	RddsOptIn RddsOptInConstants `json:"rddsOptIn,omitempty"`

	// The registrar status.
	RegistrarStatus RegistryStatusConstants `json:"registrarStatus,omitempty"`

	// The registrar status reason.
	RegistrarStatusReason string `json:"registrarStatusReason,omitempty"`

	// The registry status.
	RegistryStatus RegistryStatusConstants `json:"registryStatus,omitempty"`

	// Remove cancelation.
	// Required: true
	RemoveCancelation *bool `json:"removeCancelation"`

	// The end of current restore phase
	// Format: date-time
	RestorePhaseEnd strfmt.DateTime `json:"restorePhaseEnd,omitempty"`

	// Adds pending services like BackupMX and MailProxy.
	ServicesAdd *DomainServices `json:"servicesAdd,omitempty"`

	// Removes pending services like BackupMX and MailProxy.
	ServicesRem *DomainServices `json:"servicesRem,omitempty"`

	// The technical contact reference.
	Techc *Contact `json:"techc,omitempty"`

	// Enable trustee service for the domain.
	Trustee bool `json:"trustee,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// Domain has an matching certificate.
	ValidCertificate bool `json:"validCertificate,omitempty"`

	// The zone to create.
	Zone *Zone `json:"zone,omitempty"`

	// The dns contact.
	Zonec *Contact `json:"zonec,omitempty"`
}

// Validate validates this domain restore
func (m *DomainRestore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoRenewStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancelationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDnssecData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRddsOptIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrarStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoveCancelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePhaseEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicesAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicesRem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRestore) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateAdminc(formats strfmt.Registry) error {

	if swag.IsZero(m.Adminc) { // not required
		return nil
	}

	if m.Adminc != nil {
		if err := m.Adminc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateAutoRenewStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoRenewStatus) { // not required
		return nil
	}

	if err := m.AutoRenewStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("autoRenewStatus")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateCancelationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelationStatus) { // not required
		return nil
	}

	if err := m.CancelationStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cancelationStatus")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateDeleted(formats strfmt.Registry) error {

	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date-time", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateDnssecData(formats strfmt.Registry) error {

	if swag.IsZero(m.DnssecData) { // not required
		return nil
	}

	for i := 0; i < len(m.DnssecData); i++ {
		if swag.IsZero(m.DnssecData[i]) { // not required
			continue
		}

		if m.DnssecData[i] != nil {
			if err := m.DnssecData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnssecData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainRestore) validateDomainCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("domainCreated", "body", "date-time", m.DomainCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.Expire) { // not required
		return nil
	}

	if err := validate.FormatOf("expire", "body", "date-time", m.Expire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateNameServers(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NameServers); i++ {
		if swag.IsZero(m.NameServers[i]) { // not required
			continue
		}

		if m.NameServers[i] != nil {
			if err := m.NameServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nameServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainRestore) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateOwnerc(formats strfmt.Registry) error {

	if swag.IsZero(m.Ownerc) { // not required
		return nil
	}

	if m.Ownerc != nil {
		if err := m.Ownerc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateParking(formats strfmt.Registry) error {

	if swag.IsZero(m.Parking) { // not required
		return nil
	}

	if err := m.Parking.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parking")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validatePayable(formats strfmt.Registry) error {

	if err := validate.Required("payable", "body", m.Payable); err != nil {
		return err
	}

	if err := validate.FormatOf("payable", "body", "date-time", m.Payable.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateRddsOptIn(formats strfmt.Registry) error {

	if swag.IsZero(m.RddsOptIn) { // not required
		return nil
	}

	if err := m.RddsOptIn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rddsOptIn")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateRegistrarStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrarStatus) { // not required
		return nil
	}

	if err := m.RegistrarStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registrarStatus")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateRegistryStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryStatus) { // not required
		return nil
	}

	if err := m.RegistryStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registryStatus")
		}
		return err
	}

	return nil
}

func (m *DomainRestore) validateRemoveCancelation(formats strfmt.Registry) error {

	if err := validate.Required("removeCancelation", "body", m.RemoveCancelation); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateRestorePhaseEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.RestorePhaseEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("restorePhaseEnd", "body", "date-time", m.RestorePhaseEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateServicesAdd(formats strfmt.Registry) error {

	if swag.IsZero(m.ServicesAdd) { // not required
		return nil
	}

	if m.ServicesAdd != nil {
		if err := m.ServicesAdd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesAdd")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateServicesRem(formats strfmt.Registry) error {

	if swag.IsZero(m.ServicesRem) { // not required
		return nil
	}

	if m.ServicesRem != nil {
		if err := m.ServicesRem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicesRem")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateTechc(formats strfmt.Registry) error {

	if swag.IsZero(m.Techc) { // not required
		return nil
	}

	if m.Techc != nil {
		if err := m.Techc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("techc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRestore) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRestore) validateZonec(formats strfmt.Registry) error {

	if swag.IsZero(m.Zonec) { // not required
		return nil
	}

	if m.Zonec != nil {
		if err := m.Zonec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zonec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainRestore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainRestore) UnmarshalBinary(b []byte) error {
	var res DomainRestore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
