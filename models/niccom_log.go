// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NiccomLog niccom log
//
// swagger:model NiccomLog
type NiccomLog struct {

	// The created date of the niccom log.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The jobId of the niccom log.
	JobID int64 `json:"jobId,omitempty"`

	// The name of the niccom log.
	Name string `json:"name,omitempty"`

	// The nicTransactionId of the niccom log.
	NicTransactionID string `json:"nicTransactionId,omitempty"`

	// The source of the niccom log.
	Source NiccomSourceConstants `json:"source,omitempty"`

	// The task of the niccom log.
	Task string `json:"task,omitempty"`

	// The text of the niccom log.
	Text string `json:"text,omitempty"`

	// The vertexId of the niccom log.
	VertexID int32 `json:"vertexId,omitempty"`
}

// Validate validates this niccom log
func (m *NiccomLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiccomLog) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NiccomLog) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := m.Source.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiccomLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiccomLog) UnmarshalBinary(b []byte) error {
	var res NiccomLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
