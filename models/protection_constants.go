// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProtectionConstants protection constants
//
// swagger:model ProtectionConstants
type ProtectionConstants string

func NewProtectionConstants(value ProtectionConstants) *ProtectionConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ProtectionConstants.
func (m ProtectionConstants) Pointer() *ProtectionConstants {
	return &m
}

const (

	// ProtectionConstantsHIGH captures enum value "HIGH"
	ProtectionConstantsHIGH ProtectionConstants = "HIGH"

	// ProtectionConstantsMEDIUM captures enum value "MEDIUM"
	ProtectionConstantsMEDIUM ProtectionConstants = "MEDIUM"

	// ProtectionConstantsLOW captures enum value "LOW"
	ProtectionConstantsLOW ProtectionConstants = "LOW"

	// ProtectionConstantsOFF captures enum value "OFF"
	ProtectionConstantsOFF ProtectionConstants = "OFF"

	// ProtectionConstantsCUSTOM captures enum value "CUSTOM"
	ProtectionConstantsCUSTOM ProtectionConstants = "CUSTOM"
)

// for schema
var protectionConstantsEnum []interface{}

func init() {
	var res []ProtectionConstants
	if err := json.Unmarshal([]byte(`["HIGH","MEDIUM","LOW","OFF","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionConstantsEnum = append(protectionConstantsEnum, v)
	}
}

func (m ProtectionConstants) validateProtectionConstantsEnum(path, location string, value ProtectionConstants) error {
	if err := validate.EnumCase(path, location, value, protectionConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this protection constants
func (m ProtectionConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProtectionConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this protection constants based on context it is used
func (m ProtectionConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
