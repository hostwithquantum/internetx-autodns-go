// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthInfo1Location auth info1 location
//
// swagger:model AuthInfo1Location
type AuthInfo1Location string

func NewAuthInfo1Location(value AuthInfo1Location) *AuthInfo1Location {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthInfo1Location.
func (m AuthInfo1Location) Pointer() *AuthInfo1Location {
	return &m
}

const (

	// AuthInfo1LocationREGISTRAR captures enum value "REGISTRAR"
	AuthInfo1LocationREGISTRAR AuthInfo1Location = "REGISTRAR"

	// AuthInfo1LocationREGISTRY captures enum value "REGISTRY"
	AuthInfo1LocationREGISTRY AuthInfo1Location = "REGISTRY"

	// AuthInfo1LocationREGISTRANT captures enum value "REGISTRANT"
	AuthInfo1LocationREGISTRANT AuthInfo1Location = "REGISTRANT"
)

// for schema
var authInfo1LocationEnum []interface{}

func init() {
	var res []AuthInfo1Location
	if err := json.Unmarshal([]byte(`["REGISTRAR","REGISTRY","REGISTRANT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authInfo1LocationEnum = append(authInfo1LocationEnum, v)
	}
}

func (m AuthInfo1Location) validateAuthInfo1LocationEnum(path, location string, value AuthInfo1Location) error {
	if err := validate.EnumCase(path, location, value, authInfo1LocationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth info1 location
func (m AuthInfo1Location) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthInfo1LocationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth info1 location based on context it is used
func (m AuthInfo1Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
