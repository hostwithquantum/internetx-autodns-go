// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthInfo auth info
//
// swagger:model AuthInfo
type AuthInfo string

func NewAuthInfo(value AuthInfo) *AuthInfo {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthInfo.
func (m AuthInfo) Pointer() *AuthInfo {
	return &m
}

const (

	// AuthInfoAUTHINFO1 captures enum value "AUTHINFO1"
	AuthInfoAUTHINFO1 AuthInfo = "AUTHINFO1"

	// AuthInfoAUTHINFO2 captures enum value "AUTHINFO2"
	AuthInfoAUTHINFO2 AuthInfo = "AUTHINFO2"

	// AuthInfoALL captures enum value "ALL"
	AuthInfoALL AuthInfo = "ALL"
)

// for schema
var authInfoEnum []interface{}

func init() {
	var res []AuthInfo
	if err := json.Unmarshal([]byte(`["AUTHINFO1","AUTHINFO2","ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authInfoEnum = append(authInfoEnum, v)
	}
}

func (m AuthInfo) validateAuthInfoEnum(path, location string, value AuthInfo) error {
	if err := validate.EnumCase(path, location, value, authInfoEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth info
func (m AuthInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthInfoEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth info based on context it is used
func (m AuthInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
