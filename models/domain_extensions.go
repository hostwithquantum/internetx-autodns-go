// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainExtensions domain extensions
//
// swagger:model DomainExtensions
type DomainExtensions struct {

	// cancelation extensions
	CancelationExtensions *DomainCancelationExtensions `json:"cancelationExtensions,omitempty"`

	// parking extensions
	ParkingExtensions *DomainParkingExtensions `json:"parkingExtensions,omitempty"`

	// tmch claims notice extensions
	TmchClaimsNoticeExtensions *DomainTmchClaimNoticeExtensions `json:"tmchClaimsNoticeExtensions,omitempty"`

	// verification extensions
	VerificationExtensions *ContactVerificationDomain `json:"verificationExtensions,omitempty"`
}

// Validate validates this domain extensions
func (m *DomainExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelationExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParkingExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTmchClaimsNoticeExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationExtensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExtensions) validateCancelationExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelationExtensions) { // not required
		return nil
	}

	if m.CancelationExtensions != nil {
		if err := m.CancelationExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelationExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExtensions) validateParkingExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ParkingExtensions) { // not required
		return nil
	}

	if m.ParkingExtensions != nil {
		if err := m.ParkingExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parkingExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExtensions) validateTmchClaimsNoticeExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.TmchClaimsNoticeExtensions) { // not required
		return nil
	}

	if m.TmchClaimsNoticeExtensions != nil {
		if err := m.TmchClaimsNoticeExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmchClaimsNoticeExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExtensions) validateVerificationExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.VerificationExtensions) { // not required
		return nil
	}

	if m.VerificationExtensions != nil {
		if err := m.VerificationExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationExtensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExtensions) UnmarshalBinary(b []byte) error {
	var res DomainExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
