// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContactReferenceType contact reference type
//
// swagger:model ContactReferenceType
type ContactReferenceType string

func NewContactReferenceType(value ContactReferenceType) *ContactReferenceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContactReferenceType.
func (m ContactReferenceType) Pointer() *ContactReferenceType {
	return &m
}

const (

	// ContactReferenceTypeALL captures enum value "ALL"
	ContactReferenceTypeALL ContactReferenceType = "ALL"

	// ContactReferenceTypeOWNERC captures enum value "OWNERC"
	ContactReferenceTypeOWNERC ContactReferenceType = "OWNERC"

	// ContactReferenceTypeADMINC captures enum value "ADMINC"
	ContactReferenceTypeADMINC ContactReferenceType = "ADMINC"

	// ContactReferenceTypeTECHC captures enum value "TECHC"
	ContactReferenceTypeTECHC ContactReferenceType = "TECHC"

	// ContactReferenceTypeZONEC captures enum value "ZONEC"
	ContactReferenceTypeZONEC ContactReferenceType = "ZONEC"

	// ContactReferenceTypeBILLINGC captures enum value "BILLINGC"
	ContactReferenceTypeBILLINGC ContactReferenceType = "BILLINGC"
)

// for schema
var contactReferenceTypeEnum []interface{}

func init() {
	var res []ContactReferenceType
	if err := json.Unmarshal([]byte(`["ALL","OWNERC","ADMINC","TECHC","ZONEC","BILLINGC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactReferenceTypeEnum = append(contactReferenceTypeEnum, v)
	}
}

func (m ContactReferenceType) validateContactReferenceTypeEnum(path, location string, value ContactReferenceType) error {
	if err := validate.EnumCase(path, location, value, contactReferenceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this contact reference type
func (m ContactReferenceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContactReferenceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this contact reference type based on context it is used
func (m ContactReferenceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
