// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PriceMarkupType price markup type
//
// swagger:model PriceMarkupType
type PriceMarkupType string

func NewPriceMarkupType(value PriceMarkupType) *PriceMarkupType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PriceMarkupType.
func (m PriceMarkupType) Pointer() *PriceMarkupType {
	return &m
}

const (

	// PriceMarkupTypePERCENT captures enum value "PERCENT"
	PriceMarkupTypePERCENT PriceMarkupType = "PERCENT"

	// PriceMarkupTypeABSOLUTE captures enum value "ABSOLUTE"
	PriceMarkupTypeABSOLUTE PriceMarkupType = "ABSOLUTE"
)

// for schema
var priceMarkupTypeEnum []interface{}

func init() {
	var res []PriceMarkupType
	if err := json.Unmarshal([]byte(`["PERCENT","ABSOLUTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceMarkupTypeEnum = append(priceMarkupTypeEnum, v)
	}
}

func (m PriceMarkupType) validatePriceMarkupTypeEnum(path, location string, value PriceMarkupType) error {
	if err := validate.EnumCase(path, location, value, priceMarkupTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this price markup type
func (m PriceMarkupType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePriceMarkupTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this price markup type based on context it is used
func (m PriceMarkupType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
