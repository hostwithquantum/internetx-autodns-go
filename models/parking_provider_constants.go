// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ParkingProviderConstants parking provider constants
//
// swagger:model ParkingProviderConstants
type ParkingProviderConstants string

func NewParkingProviderConstants(value ParkingProviderConstants) *ParkingProviderConstants {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ParkingProviderConstants.
func (m ParkingProviderConstants) Pointer() *ParkingProviderConstants {
	return &m
}

const (

	// ParkingProviderConstantsSEDO captures enum value "SEDO"
	ParkingProviderConstantsSEDO ParkingProviderConstants = "SEDO"

	// ParkingProviderConstantsNAMEDRIVE captures enum value "NAMEDRIVE"
	ParkingProviderConstantsNAMEDRIVE ParkingProviderConstants = "NAMEDRIVE"

	// ParkingProviderConstantsPARKINGCREW captures enum value "PARKINGCREW"
	ParkingProviderConstantsPARKINGCREW ParkingProviderConstants = "PARKINGCREW"
)

// for schema
var parkingProviderConstantsEnum []interface{}

func init() {
	var res []ParkingProviderConstants
	if err := json.Unmarshal([]byte(`["SEDO","NAMEDRIVE","PARKINGCREW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parkingProviderConstantsEnum = append(parkingProviderConstantsEnum, v)
	}
}

func (m ParkingProviderConstants) validateParkingProviderConstantsEnum(path, location string, value ParkingProviderConstants) error {
	if err := validate.EnumCase(path, location, value, parkingProviderConstantsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this parking provider constants
func (m ParkingProviderConstants) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateParkingProviderConstantsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this parking provider constants based on context it is used
func (m ParkingProviderConstants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
