// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPrereg domain prereg
//
// swagger:model DomainPrereg
type DomainPrereg struct {

	// The administrative contact.
	Adminc *Contact `json:"adminc,omitempty"`

	// The authinfo.
	Authinfo string `json:"authinfo,omitempty"`

	// The confirmation date.
	// Format: date-time
	Confirmed strfmt.DateTime `json:"confirmed,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The domain created date.
	// Format: date-time
	DomainCreated strfmt.DateTime `json:"domainCreated,omitempty"`

	// The domain expire date.
	// Format: date-time
	DomainExpire strfmt.DateTime `json:"domainExpire,omitempty"`

	// The preregistration extensions.
	Extension *DomainPreregAddon `json:"extension,omitempty"`

	// The idn version of the name.
	Idn string `json:"idn,omitempty"`

	// The name of the domain.
	Name string `json:"name,omitempty"`

	// The nameserver entries.
	NameServerEntries []string `json:"nameServerEntries"`

	// The nameservers.
	NameServers []*NameServer `json:"nameServers"`

	// The unique order reference.
	OrderReference string `json:"orderReference,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// The owner contact.
	Ownerc *Contact `json:"ownerc,omitempty"`

	// The preregistration phase.
	Phase string `json:"phase,omitempty"`

	// The preregistration configuration.
	PreregConfig *PreregConfig `json:"preregConfig,omitempty"`

	// Recommended
	Recommended bool `json:"recommended,omitempty"`

	// The registry status.
	RegistryStatus RegistryStatusConstants `json:"registryStatus,omitempty"`

	// The preregistration status of the domain.
	Status DomainPreregStatusConstants `json:"status,omitempty"`

	// The technical contact reference.
	Techc *Contact `json:"techc,omitempty"`

	// The tmchmark.
	TmchMark *TmchMark `json:"tmchMark,omitempty"`

	// Trustee active or not.
	Trustee bool `json:"trustee,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// The dns contact.
	Zonec *Contact `json:"zonec,omitempty"`
}

// Validate validates this domain prereg
func (m *DomainPrereg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreregConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTmchMark(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPrereg) validateAdminc(formats strfmt.Registry) error {

	if swag.IsZero(m.Adminc) { // not required
		return nil
	}

	if m.Adminc != nil {
		if err := m.Adminc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateConfirmed(formats strfmt.Registry) error {

	if swag.IsZero(m.Confirmed) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmed", "body", "date-time", m.Confirmed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPrereg) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPrereg) validateDomainCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("domainCreated", "body", "date-time", m.DomainCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPrereg) validateDomainExpire(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainExpire) { // not required
		return nil
	}

	if err := validate.FormatOf("domainExpire", "body", "date-time", m.DomainExpire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPrereg) validateExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateNameServers(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NameServers); i++ {
		if swag.IsZero(m.NameServers[i]) { // not required
			continue
		}

		if m.NameServers[i] != nil {
			if err := m.NameServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nameServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainPrereg) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateOwnerc(formats strfmt.Registry) error {

	if swag.IsZero(m.Ownerc) { // not required
		return nil
	}

	if m.Ownerc != nil {
		if err := m.Ownerc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validatePreregConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.PreregConfig) { // not required
		return nil
	}

	if m.PreregConfig != nil {
		if err := m.PreregConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preregConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateRegistryStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryStatus) { // not required
		return nil
	}

	if err := m.RegistryStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registryStatus")
		}
		return err
	}

	return nil
}

func (m *DomainPrereg) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *DomainPrereg) validateTechc(formats strfmt.Registry) error {

	if swag.IsZero(m.Techc) { // not required
		return nil
	}

	if m.Techc != nil {
		if err := m.Techc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("techc")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateTmchMark(formats strfmt.Registry) error {

	if swag.IsZero(m.TmchMark) { // not required
		return nil
	}

	if m.TmchMark != nil {
		if err := m.TmchMark.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmchMark")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPrereg) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *DomainPrereg) validateZonec(formats strfmt.Registry) error {

	if swag.IsZero(m.Zonec) { // not required
		return nil
	}

	if m.Zonec != nil {
		if err := m.Zonec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zonec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainPrereg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPrereg) UnmarshalBinary(b []byte) error {
	var res DomainPrereg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
