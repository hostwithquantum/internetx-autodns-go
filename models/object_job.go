// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectJob object job
//
// swagger:model ObjectJob
type ObjectJob struct {

	// The overall authentication status for a certificate request.
	Authentication []*CertAuthenticationStatus `json:"authentication"`

	// The domain controll validation status for each domain.
	DcvAuth []*DomainControllValidationStatus `json:"dcvAuth"`

	// The related job.
	Job *Job `json:"job,omitempty"`

	// The niccom logs.
	NiccomLogs []*NiccomLog `json:"niccomLogs"`

	// The object of the job or notify.
	Object *ResponseObject `json:"object,omitempty"`
}

// Validate validates this object job
func (m *ObjectJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcvAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNiccomLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectJob) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	for i := 0; i < len(m.Authentication); i++ {
		if swag.IsZero(m.Authentication[i]) { // not required
			continue
		}

		if m.Authentication[i] != nil {
			if err := m.Authentication[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authentication" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectJob) validateDcvAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.DcvAuth) { // not required
		return nil
	}

	for i := 0; i < len(m.DcvAuth); i++ {
		if swag.IsZero(m.DcvAuth[i]) { // not required
			continue
		}

		if m.DcvAuth[i] != nil {
			if err := m.DcvAuth[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dcvAuth" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectJob) validateJob(formats strfmt.Registry) error {

	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectJob) validateNiccomLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.NiccomLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.NiccomLogs); i++ {
		if swag.IsZero(m.NiccomLogs[i]) { // not required
			continue
		}

		if m.NiccomLogs[i] != nil {
			if err := m.NiccomLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("niccomLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectJob) validateObject(formats strfmt.Registry) error {

	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectJob) UnmarshalBinary(b []byte) error {
	var res ObjectJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
