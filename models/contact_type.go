// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContactType contact type
//
// swagger:model ContactType
type ContactType string

func NewContactType(value ContactType) *ContactType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContactType.
func (m ContactType) Pointer() *ContactType {
	return &m
}

const (

	// ContactTypeBILLING captures enum value "BILLING"
	ContactTypeBILLING ContactType = "BILLING"

	// ContactTypeTECH captures enum value "TECH"
	ContactTypeTECH ContactType = "TECH"

	// ContactTypeLEGAL captures enum value "LEGAL"
	ContactTypeLEGAL ContactType = "LEGAL"

	// ContactTypePRIMARY captures enum value "PRIMARY"
	ContactTypePRIMARY ContactType = "PRIMARY"

	// ContactTypeDOMAIN captures enum value "DOMAIN"
	ContactTypeDOMAIN ContactType = "DOMAIN"

	// ContactTypeSSL captures enum value "SSL"
	ContactTypeSSL ContactType = "SSL"

	// ContactTypeSERVER captures enum value "SERVER"
	ContactTypeSERVER ContactType = "SERVER"

	// ContactTypeABUSE captures enum value "ABUSE"
	ContactTypeABUSE ContactType = "ABUSE"
)

// for schema
var contactTypeEnum []interface{}

func init() {
	var res []ContactType
	if err := json.Unmarshal([]byte(`["BILLING","TECH","LEGAL","PRIMARY","DOMAIN","SSL","SERVER","ABUSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactTypeEnum = append(contactTypeEnum, v)
	}
}

func (m ContactType) validateContactTypeEnum(path, location string, value ContactType) error {
	if err := validate.EnumCase(path, location, value, contactTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this contact type
func (m ContactType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContactTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this contact type based on context it is used
func (m ContactType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
