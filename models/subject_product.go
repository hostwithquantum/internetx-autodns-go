// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubjectProduct subject product
//
// swagger:model SubjectProduct
type SubjectProduct struct {

	// Calculated gross amount
	Amount float64 `json:"amount,omitempty"`

	// Billing user
	Billing *BasicUser `json:"billing,omitempty"`

	// Comment to the product
	Comment string `json:"comment,omitempty"`

	// Count
	Count float32 `json:"count,omitempty"`

	// Date of creation.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Used currency of the amount
	// Example: EUR
	Currency string `json:"currency,omitempty"`

	// Customer
	Customer *GenericCustomer `json:"customer,omitempty"`

	// Number actually billed
	EffectiveCount float32 `json:"effectiveCount,omitempty"`

	// Reference in external booking system
	ExternalAccountingStatus string `json:"externalAccountingStatus,omitempty"`

	// Id of the product
	ID int64 `json:"id,omitempty"`

	// The complete text of the posting item
	Label string `json:"label,omitempty"`

	// Net amount
	NetAmount float64 `json:"netAmount,omitempty"`

	// The number of the product in the external booking system
	Number string `json:"number,omitempty"`

	// The object owner.
	Owner *BasicUser `json:"owner,omitempty"`

	// Maturity of the position
	// Format: date-time
	Payable strfmt.DateTime `json:"payable,omitempty"`

	// Product run time
	Period *TimePeriod `json:"period,omitempty"`

	// Price of the product
	Price *ExchangedPrice `json:"price,omitempty"`

	// Name of the product
	Product *Product `json:"product,omitempty"`

	// Internal status of provision
	Provisioning GenericStatusConstants `json:"provisioning,omitempty"`

	// Booking item
	Subject *Subject `json:"subject,omitempty"`

	// Type of posting item. Charge, credit, etc.
	Type AccountingDocumentTypeConstants `json:"type,omitempty"`

	// Date of the last update.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// User who performed the last update.
	Updater *BasicUser `json:"updater,omitempty"`

	// Calculated vat amount
	VatAmount float64 `json:"vatAmount,omitempty"`

	// Currency to be displayed
	View *CurrencyRate `json:"view,omitempty"`
}

// Validate validates this subject product
func (m *SubjectProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectProduct) validateBilling(formats strfmt.Registry) error {
	if swag.IsZero(m.Billing) { // not required
		return nil
	}

	if m.Billing != nil {
		if err := m.Billing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubjectProduct) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validatePayable(formats strfmt.Registry) error {
	if swag.IsZero(m.Payable) { // not required
		return nil
	}

	if err := validate.FormatOf("payable", "body", "date-time", m.Payable.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubjectProduct) validatePeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateProduct(formats strfmt.Registry) error {
	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateProvisioning(formats strfmt.Registry) error {
	if swag.IsZero(m.Provisioning) { // not required
		return nil
	}

	if err := m.Provisioning.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provisioning")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provisioning")
		}
		return err
	}

	return nil
}

func (m *SubjectProduct) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *SubjectProduct) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubjectProduct) validateUpdater(formats strfmt.Registry) error {
	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) validateView(formats strfmt.Registry) error {
	if swag.IsZero(m.View) { // not required
		return nil
	}

	if m.View != nil {
		if err := m.View.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subject product based on the context it is used
func (m *SubjectProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBilling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectProduct) contextValidateBilling(ctx context.Context, formats strfmt.Registry) error {

	if m.Billing != nil {

		if swag.IsZero(m.Billing) { // not required
			return nil
		}

		if err := m.Billing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {

		if swag.IsZero(m.Period) { // not required
			return nil
		}

		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {

		if swag.IsZero(m.Price) { // not required
			return nil
		}

		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateProduct(ctx context.Context, formats strfmt.Registry) error {

	if m.Product != nil {

		if swag.IsZero(m.Product) { // not required
			return nil
		}

		if err := m.Product.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateProvisioning(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Provisioning) { // not required
		return nil
	}

	if err := m.Provisioning.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provisioning")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provisioning")
		}
		return err
	}

	return nil
}

func (m *SubjectProduct) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *SubjectProduct) contextValidateUpdater(ctx context.Context, formats strfmt.Registry) error {

	if m.Updater != nil {

		if swag.IsZero(m.Updater) { // not required
			return nil
		}

		if err := m.Updater.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectProduct) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	if m.View != nil {

		if swag.IsZero(m.View) { // not required
			return nil
		}

		if err := m.View.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubjectProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubjectProduct) UnmarshalBinary(b []byte) error {
	var res SubjectProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
