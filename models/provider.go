// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Provider provider
//
// swagger:model Provider
type Provider string

func NewProvider(value Provider) *Provider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Provider.
func (m Provider) Pointer() *Provider {
	return &m
}

const (

	// ProviderIPAYMENT captures enum value "IPAYMENT"
	ProviderIPAYMENT Provider = "IPAYMENT"

	// ProviderPAYPAL captures enum value "PAYPAL"
	ProviderPAYPAL Provider = "PAYPAL"
)

// for schema
var providerEnum []interface{}

func init() {
	var res []Provider
	if err := json.Unmarshal([]byte(`["IPAYMENT","PAYPAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerEnum = append(providerEnum, v)
	}
}

func (m Provider) validateProviderEnum(path, location string, value Provider) error {
	if err := validate.EnumCase(path, location, value, providerEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this provider
func (m Provider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this provider based on context it is used
func (m Provider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
