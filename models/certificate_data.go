// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateData certificate data
//
// swagger:model CertificateData
type CertificateData struct {

	// The algorithm used in the CSR key.
	Algorithm CsrHashAlgorithmConstants `json:"algorithm,omitempty"`

	// The generated authentication data.
	Authentication []*CertAuthentication `json:"authentication"`

	// Describes the business case (CREATE, RENEW, REISSUE, DELETE) for which preparation is to be performed.
	BusinessCase string `json:"businessCase,omitempty"`

	// The certificate.
	Certificate *Certificate `json:"certificate,omitempty"`

	// The password defined in the csr.
	ChallengePassword string `json:"challengePassword,omitempty"`

	// Activates the CAA record check.
	// false = off
	// true = on
	// Default value = false
	CheckCaa bool `json:"checkCaa,omitempty"`

	// The city contained within the CSR key.
	City string `json:"city,omitempty"`

	// The country code which is contained within the CSR key.
	CountryCode string `json:"countryCode,omitempty"`

	// The ec curve of the public key.
	EcCurve CsrHashAlgorithmConstants `json:"ecCurve,omitempty"`

	// The email address contained within the CSR key.
	Email string `json:"email,omitempty"`

	// Describes whether the CSR contains multi value DN data
	HasMultiValueDN bool `json:"hasMultiValueDN,omitempty"`

	// The certificate history (old version).
	Histories []*CertificateHistory `json:"histories"`

	// The common name written in punycode format.
	Idn string `json:"idn,omitempty"`

	// Included subject alternativ names for the current order
	IncludedSans []string `json:"includedSans"`

	// The key length of the CSR key.
	KeySize int32 `json:"keySize,omitempty"`

	// The name of the certificate which is contained within the CSR key.
	Name string `json:"name,omitempty"`

	// The organisation contained within the CSR key.
	Organization string `json:"organization,omitempty"`

	// The organisation contained within the CSR key.
	OrganizationUnit string `json:"organizationUnit,omitempty"`

	// The CSR key as a string.
	Plain string `json:"plain,omitempty"`

	// The SSL product.
	Product string `json:"product,omitempty"`

	// The DCV scope to use for generating the dcv data
	Scope DcvValidationScope `json:"scope,omitempty"`

	// The hash algorithm which was used for the CSR.
	SignatureHashAlgorithm SignatureHashAlgorithmConstants `json:"signatureHashAlgorithm,omitempty"`

	// The state defined in the csr.
	State string `json:"state,omitempty"`

	// The SubjectAlternativeNames contained within the CSR key.
	SubjectAlternativeNames []*SubjectAlternativeName `json:"subjectAlternativeNames"`

	// Describes whether the CSR contains a valid signature or not
	ValidSignature bool `json:"validSignature,omitempty"`

	// The base64 encoded SVG logo
	VmcLogo string `json:"vmcLogo,omitempty"`

	// Two-letter code for the country or region where the logo is trademarked
	VmcTrademarkCountryOrRegion VmcTrademarkCountryOrRegion `json:"vmcTrademarkCountryOrRegion,omitempty"`

	// The trademark registration number
	VmcTrademarkRegistrationNumber string `json:"vmcTrademarkRegistrationNumber,omitempty"`
}

// Validate validates this certificate data
func (m *CertificateData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureHashAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAlternativeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmcTrademarkCountryOrRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateData) validateAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if err := m.Algorithm.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("algorithm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("algorithm")
		}
		return err
	}

	return nil
}

func (m *CertificateData) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	for i := 0; i < len(m.Authentication); i++ {
		if swag.IsZero(m.Authentication[i]) { // not required
			continue
		}

		if m.Authentication[i] != nil {
			if err := m.Authentication[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authentication" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authentication" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateData) validateEcCurve(formats strfmt.Registry) error {
	if swag.IsZero(m.EcCurve) { // not required
		return nil
	}

	if err := m.EcCurve.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ecCurve")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ecCurve")
		}
		return err
	}

	return nil
}

func (m *CertificateData) validateHistories(formats strfmt.Registry) error {
	if swag.IsZero(m.Histories) { // not required
		return nil
	}

	for i := 0; i < len(m.Histories); i++ {
		if swag.IsZero(m.Histories[i]) { // not required
			continue
		}

		if m.Histories[i] != nil {
			if err := m.Histories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("histories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("histories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *CertificateData) validateSignatureHashAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.SignatureHashAlgorithm) { // not required
		return nil
	}

	if err := m.SignatureHashAlgorithm.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signatureHashAlgorithm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signatureHashAlgorithm")
		}
		return err
	}

	return nil
}

func (m *CertificateData) validateSubjectAlternativeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectAlternativeNames) { // not required
		return nil
	}

	for i := 0; i < len(m.SubjectAlternativeNames); i++ {
		if swag.IsZero(m.SubjectAlternativeNames[i]) { // not required
			continue
		}

		if m.SubjectAlternativeNames[i] != nil {
			if err := m.SubjectAlternativeNames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjectAlternativeNames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subjectAlternativeNames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) validateVmcTrademarkCountryOrRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.VmcTrademarkCountryOrRegion) { // not required
		return nil
	}

	if err := m.VmcTrademarkCountryOrRegion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vmcTrademarkCountryOrRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vmcTrademarkCountryOrRegion")
		}
		return err
	}

	return nil
}

// ContextValidate validate this certificate data based on the context it is used
func (m *CertificateData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignatureHashAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectAlternativeNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmcTrademarkCountryOrRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateData) contextValidateAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if err := m.Algorithm.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("algorithm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("algorithm")
		}
		return err
	}

	return nil
}

func (m *CertificateData) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Authentication); i++ {

		if m.Authentication[i] != nil {

			if swag.IsZero(m.Authentication[i]) { // not required
				return nil
			}

			if err := m.Authentication[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authentication" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authentication" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateData) contextValidateEcCurve(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EcCurve) { // not required
		return nil
	}

	if err := m.EcCurve.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ecCurve")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ecCurve")
		}
		return err
	}

	return nil
}

func (m *CertificateData) contextValidateHistories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Histories); i++ {

		if m.Histories[i] != nil {

			if swag.IsZero(m.Histories[i]) { // not required
				return nil
			}

			if err := m.Histories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("histories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("histories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := m.Scope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *CertificateData) contextValidateSignatureHashAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SignatureHashAlgorithm) { // not required
		return nil
	}

	if err := m.SignatureHashAlgorithm.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signatureHashAlgorithm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signatureHashAlgorithm")
		}
		return err
	}

	return nil
}

func (m *CertificateData) contextValidateSubjectAlternativeNames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubjectAlternativeNames); i++ {

		if m.SubjectAlternativeNames[i] != nil {

			if swag.IsZero(m.SubjectAlternativeNames[i]) { // not required
				return nil
			}

			if err := m.SubjectAlternativeNames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjectAlternativeNames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subjectAlternativeNames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateData) contextValidateVmcTrademarkCountryOrRegion(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VmcTrademarkCountryOrRegion) { // not required
		return nil
	}

	if err := m.VmcTrademarkCountryOrRegion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vmcTrademarkCountryOrRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vmcTrademarkCountryOrRegion")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateData) UnmarshalBinary(b []byte) error {
	var res CertificateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
