// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertAuthenticationStatus cert authentication status
//
// swagger:model CertAuthenticationStatus
type CertAuthenticationStatus struct {

	// The status of the authentication step.
	Status AuthenticateStatus `json:"status,omitempty"`

	// The authentication step.
	Step AuthenticationStep `json:"step,omitempty"`
}

// Validate validates this cert authentication status
func (m *CertAuthenticationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertAuthenticationStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *CertAuthenticationStatus) validateStep(formats strfmt.Registry) error {

	if swag.IsZero(m.Step) { // not required
		return nil
	}

	if err := m.Step.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("step")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertAuthenticationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertAuthenticationStatus) UnmarshalBinary(b []byte) error {
	var res CertAuthenticationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
