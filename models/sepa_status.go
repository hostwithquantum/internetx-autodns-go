// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SepaStatus sepa status
//
// swagger:model SepaStatus
type SepaStatus string

func NewSepaStatus(value SepaStatus) *SepaStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SepaStatus.
func (m SepaStatus) Pointer() *SepaStatus {
	return &m
}

const (

	// SepaStatusACTIVE captures enum value "ACTIVE"
	SepaStatusACTIVE SepaStatus = "ACTIVE"

	// SepaStatusUPDATE captures enum value "UPDATE"
	SepaStatusUPDATE SepaStatus = "UPDATE"

	// SepaStatusCANCELED captures enum value "CANCELED"
	SepaStatusCANCELED SepaStatus = "CANCELED"

	// SepaStatusEXPIRED captures enum value "EXPIRED"
	SepaStatusEXPIRED SepaStatus = "EXPIRED"

	// SepaStatusLOCKED captures enum value "LOCKED"
	SepaStatusLOCKED SepaStatus = "LOCKED"

	// SepaStatusREMOVE captures enum value "REMOVE"
	SepaStatusREMOVE SepaStatus = "REMOVE"
)

// for schema
var sepaStatusEnum []interface{}

func init() {
	var res []SepaStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","UPDATE","CANCELED","EXPIRED","LOCKED","REMOVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sepaStatusEnum = append(sepaStatusEnum, v)
	}
}

func (m SepaStatus) validateSepaStatusEnum(path, location string, value SepaStatus) error {
	if err := validate.EnumCase(path, location, value, sepaStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sepa status
func (m SepaStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSepaStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sepa status based on context it is used
func (m SepaStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
