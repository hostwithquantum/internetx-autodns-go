// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactVerificationDomain contact verification domain
//
// swagger:model ContactVerificationDomain
type ContactVerificationDomain struct {

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// the deactivation of the domain Verification
	// Format: date-time
	Deactivation strfmt.DateTime `json:"deactivation,omitempty"`

	// the idn domain
	Idn string `json:"idn,omitempty"`

	// the domain of the Verification
	Name string `json:"name,omitempty"`

	// the status of the domain Verification
	Status GenericStatusConstants `json:"status,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this contact verification domain
func (m *ContactVerificationDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeactivation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactVerificationDomain) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerificationDomain) validateDeactivation(formats strfmt.Registry) error {

	if swag.IsZero(m.Deactivation) { // not required
		return nil
	}

	if err := validate.FormatOf("deactivation", "body", "date-time", m.Deactivation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerificationDomain) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *ContactVerificationDomain) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactVerificationDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactVerificationDomain) UnmarshalBinary(b []byte) error {
	var res ContactVerificationDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
