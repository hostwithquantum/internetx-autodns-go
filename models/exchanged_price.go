// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangedPrice exchanged price
//
// swagger:model ExchangedPrice
type ExchangedPrice struct {

	// Lorem Ipum
	Amount float64 `json:"amount,omitempty"`

	// Lorem Ipum
	Comment string `json:"comment,omitempty"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Lorem Ipsum
	// Required: true
	Currency *string `json:"currency"`

	// Lorem Ipum
	Customer *Customer `json:"customer,omitempty"`

	// Lorem Ipum
	Discountable bool `json:"discountable,omitempty"`

	// The exchange fee if the price currency does not match the billing currency
	ExchangeFee float32 `json:"exchangeFee,omitempty"`

	// Lorem Ipum
	LogID int64 `json:"logId,omitempty"`

	// Lorem Ipum
	NormalPrice *ExchangedPrice `json:"normalPrice,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// Lorem Ipum
	Period *TimePeriod `json:"period,omitempty"`

	// Lorem Ipum
	PriceConditions []*PriceServiceEntity `json:"priceConditions"`

	// Lorem Ipum
	Priority PriorityConstants `json:"priority,omitempty"`

	// The exchange rate between account and price
	Rate float64 `json:"rate,omitempty"`

	// Lorem Ipum
	Refund int32 `json:"refund,omitempty"`

	// Lorem Ipum
	Type PriceTypeConstants `json:"type,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updating user of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// Lorem Ipum
	// Format: date-time
	Valid strfmt.DateTime `json:"valid,omitempty"`

	// The calculated vat amount
	VatAmount float64 `json:"vatAmount,omitempty"`

	// The vat rate of the price
	VatRate float64 `json:"vatRate,omitempty"`
}

// Validate validates this exchanged price
func (m *ExchangedPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNormalPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangedPrice) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExchangedPrice) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *ExchangedPrice) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangedPrice) validateNormalPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.NormalPrice) { // not required
		return nil
	}

	if m.NormalPrice != nil {
		if err := m.NormalPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("normalPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangedPrice) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangedPrice) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangedPrice) validatePriceConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceConditions); i++ {
		if swag.IsZero(m.PriceConditions[i]) { // not required
			continue
		}

		if m.PriceConditions[i] != nil {
			if err := m.PriceConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangedPrice) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *ExchangedPrice) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *ExchangedPrice) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExchangedPrice) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangedPrice) validateValid(formats strfmt.Registry) error {

	if swag.IsZero(m.Valid) { // not required
		return nil
	}

	if err := validate.FormatOf("valid", "body", "date-time", m.Valid.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangedPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangedPrice) UnmarshalBinary(b []byte) error {
	var res ExchangedPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
