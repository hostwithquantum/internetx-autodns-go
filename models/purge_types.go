// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PurgeTypes purge types
//
// swagger:model PurgeTypes
type PurgeTypes string

func NewPurgeTypes(value PurgeTypes) *PurgeTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PurgeTypes.
func (m PurgeTypes) Pointer() *PurgeTypes {
	return &m
}

const (

	// PurgeTypesAUTO captures enum value "AUTO"
	PurgeTypesAUTO PurgeTypes = "AUTO"

	// PurgeTypesDISABLED captures enum value "DISABLED"
	PurgeTypesDISABLED PurgeTypes = "DISABLED"

	// PurgeTypesSCHEDULED captures enum value "SCHEDULED"
	PurgeTypesSCHEDULED PurgeTypes = "SCHEDULED"
)

// for schema
var purgeTypesEnum []interface{}

func init() {
	var res []PurgeTypes
	if err := json.Unmarshal([]byte(`["AUTO","DISABLED","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		purgeTypesEnum = append(purgeTypesEnum, v)
	}
}

func (m PurgeTypes) validatePurgeTypesEnum(path, location string, value PurgeTypes) error {
	if err := validate.EnumCase(path, location, value, purgeTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this purge types
func (m PurgeTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePurgeTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this purge types based on context it is used
func (m PurgeTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
