// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DcvValidationScope dcv validation scope
//
// swagger:model DcvValidationScope
type DcvValidationScope string

func NewDcvValidationScope(value DcvValidationScope) *DcvValidationScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DcvValidationScope.
func (m DcvValidationScope) Pointer() *DcvValidationScope {
	return &m
}

const (

	// DcvValidationScopeFQDN captures enum value "FQDN"
	DcvValidationScopeFQDN DcvValidationScope = "FQDN"

	// DcvValidationScopeBASEDOMAIN captures enum value "BASEDOMAIN"
	DcvValidationScopeBASEDOMAIN DcvValidationScope = "BASEDOMAIN"
)

// for schema
var dcvValidationScopeEnum []interface{}

func init() {
	var res []DcvValidationScope
	if err := json.Unmarshal([]byte(`["FQDN","BASEDOMAIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dcvValidationScopeEnum = append(dcvValidationScopeEnum, v)
	}
}

func (m DcvValidationScope) validateDcvValidationScopeEnum(path, location string, value DcvValidationScope) error {
	if err := validate.EnumCase(path, location, value, dcvValidationScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dcv validation scope
func (m DcvValidationScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDcvValidationScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dcv validation scope based on context it is used
func (m DcvValidationScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
