// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contact contact
//
// swagger:model Contact
type Contact struct {

	// The address of the contact.
	// Required: true
	// Max Items: 2147483647
	// Min Items: 1
	Address []string `json:"address"`

	// The unique alias of the contact
	Alias string `json:"alias,omitempty"`

	// The city of the contact
	// Required: true
	City *string `json:"city"`

	// The comment for the contact
	Comment string `json:"comment,omitempty"`

	// ???
	ConfirmOwnerConsent bool `json:"confirmOwnerConsent,omitempty"`

	// The country of the contact
	// Required: true
	Country *string `json:"country"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// The nic references of the contact
	Domainsafe bool `json:"domainsafe,omitempty"`

	// The email of the contact
	Email string `json:"email,omitempty"`

	// The contact extensions.
	Extensions *ContactExtensions `json:"extensions,omitempty"`

	// The fax number of the contact
	Fax string `json:"fax,omitempty"`

	// The first name of the contact
	Fname string `json:"fname,omitempty"`

	// The unique identifier of the contact
	ID int32 `json:"id,omitempty"`

	// The last name of the contact
	// Required: true
	Lname *string `json:"lname"`

	// The nic references of the contact
	NicRef []*ContactReference `json:"nicRef"`

	// The name of the organization
	Organization string `json:"organization,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// The pcode of the contact
	// Required: true
	Pcode *string `json:"pcode"`

	// The phone number of the contact
	Phone string `json:"phone,omitempty"`

	// The protection of the contact
	Protection ContactProtectionConstants `json:"protection,omitempty"`

	// The remarks of the contact
	Remarks []string `json:"remarks"`

	// The sip of the contact
	Sip string `json:"sip,omitempty"`

	// The local country state of the contact
	State string `json:"state,omitempty"`

	// The title of the contact
	Title string `json:"title,omitempty"`

	// The type of the contact
	// Required: true
	Type ContactTypeConstants `json:"type"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updating user of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// The verification status of the contact
	Verification GenericStatusConstants `json:"verification,omitempty"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	iAddressSize := int64(len(m.Address))

	if err := validate.MinItems("address", "body", iAddressSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("address", "body", iAddressSize, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

func (m *Contact) validateLname(formats strfmt.Registry) error {

	if err := validate.Required("lname", "body", m.Lname); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateNicRef(formats strfmt.Registry) error {

	if swag.IsZero(m.NicRef) { // not required
		return nil
	}

	for i := 0; i < len(m.NicRef); i++ {
		if swag.IsZero(m.NicRef[i]) { // not required
			continue
		}

		if m.NicRef[i] != nil {
			if err := m.NicRef[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nicRef" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Contact) validatePcode(formats strfmt.Registry) error {

	if err := validate.Required("pcode", "body", m.Pcode); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateProtection(formats strfmt.Registry) error {

	if swag.IsZero(m.Protection) { // not required
		return nil
	}

	if err := m.Protection.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protection")
		}
		return err
	}

	return nil
}

func (m *Contact) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *Contact) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *Contact) validateVerification(formats strfmt.Registry) error {

	if swag.IsZero(m.Verification) { // not required
		return nil
	}

	if err := m.Verification.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("verification")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
