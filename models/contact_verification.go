// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactVerification contact verification
//
// swagger:model ContactVerification
type ContactVerification struct {

	// the action of the Verification, e.g. domain update or contact task
	Action string `json:"action,omitempty"`

	// the comment of the Verification
	Comment string `json:"comment,omitempty"`

	// the confirmIp of the Verification
	// Required: true
	ConfirmIP InetAddress `json:"confirmIp"`

	// the confirmed date of the Verification
	// Format: date-time
	Confirmed strfmt.DateTime `json:"confirmed,omitempty"`

	// the contact of the Verification
	// Required: true
	Contact *Contact `json:"contact"`

	// The created date.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// the domains of the Verification
	Domains []*ContactVerificationDomain `json:"domains"`

	// the failed date of the Verification
	// Format: date-time
	Failed strfmt.DateTime `json:"failed,omitempty"`

	// the messageSend date of the Verification
	// Format: date-time
	MessageSend strfmt.DateTime `json:"messageSend,omitempty"`

	// The owner of the object.
	Owner *BasicUser `json:"owner,omitempty"`

	// the unique reference of the Verification
	Reference string `json:"reference,omitempty"`

	// The updated date.
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// The updater of the object.
	Updater *BasicUser `json:"updater,omitempty"`

	// the messages of the Verification
	VerificationMails []*ContactVerificationMessage `json:"verificationMails"`
}

// Validate validates this contact verification
func (m *ContactVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdater(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationMails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactVerification) validateConfirmIP(formats strfmt.Registry) error {

	if err := validate.Required("confirmIp", "body", m.ConfirmIP); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateConfirmed(formats strfmt.Registry) error {

	if swag.IsZero(m.Confirmed) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmed", "body", "date-time", m.Confirmed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateContact(formats strfmt.Registry) error {

	if err := validate.Required("contact", "body", m.Contact); err != nil {
		return err
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *ContactVerification) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	for i := 0; i < len(m.Domains); i++ {
		if swag.IsZero(m.Domains[i]) { // not required
			continue
		}

		if m.Domains[i] != nil {
			if err := m.Domains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContactVerification) validateFailed(formats strfmt.Registry) error {

	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	if err := validate.FormatOf("failed", "body", "date-time", m.Failed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateMessageSend(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageSend) { // not required
		return nil
	}

	if err := validate.FormatOf("messageSend", "body", "date-time", m.MessageSend.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ContactVerification) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactVerification) validateUpdater(formats strfmt.Registry) error {

	if swag.IsZero(m.Updater) { // not required
		return nil
	}

	if m.Updater != nil {
		if err := m.Updater.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updater")
			}
			return err
		}
	}

	return nil
}

func (m *ContactVerification) validateVerificationMails(formats strfmt.Registry) error {

	if swag.IsZero(m.VerificationMails) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationMails); i++ {
		if swag.IsZero(m.VerificationMails[i]) { // not required
			continue
		}

		if m.VerificationMails[i] != nil {
			if err := m.VerificationMails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verificationMails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactVerification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactVerification) UnmarshalBinary(b []byte) error {
	var res ContactVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
