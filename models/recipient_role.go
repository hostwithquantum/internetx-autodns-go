// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecipientRole recipient role
//
// swagger:model RecipientRole
type RecipientRole string

func NewRecipientRole(value RecipientRole) *RecipientRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RecipientRole.
func (m RecipientRole) Pointer() *RecipientRole {
	return &m
}

const (

	// RecipientRoleTO captures enum value "TO"
	RecipientRoleTO RecipientRole = "TO"

	// RecipientRoleCC captures enum value "CC"
	RecipientRoleCC RecipientRole = "CC"

	// RecipientRoleBCC captures enum value "BCC"
	RecipientRoleBCC RecipientRole = "BCC"
)

// for schema
var recipientRoleEnum []interface{}

func init() {
	var res []RecipientRole
	if err := json.Unmarshal([]byte(`["TO","CC","BCC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recipientRoleEnum = append(recipientRoleEnum, v)
	}
}

func (m RecipientRole) validateRecipientRoleEnum(path, location string, value RecipientRole) error {
	if err := validate.EnumCase(path, location, value, recipientRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recipient role
func (m RecipientRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecipientRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recipient role based on context it is used
func (m RecipientRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
